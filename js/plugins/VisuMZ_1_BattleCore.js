//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.88;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.88] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * ---
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 * 
 * <Under>
 * 
 * - Used for: Animation Name Tags
 * - If this tag is found in an animation's name, the animation will appear
 *   under battlers while in battle.
 * - This effect only applies to battlers in the battle scene.
 * - Under effect is NOT applied to status window portraits.
 * - Under effect is NOT applied to projectile animations.
 * 
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Status
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 * 
 * - Status
 *   - Adds a status command to view the current inputting actor's status.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * <Help Description>
 *  text
 *  text
 * </Help Description>
 *
 * - Used for: State Notetags
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - This is used as a common notetag between Battle Core's state descriptions
 *   and State Tooltips' state descriptions.
 * 
 * ---
 * 
 * <In-Battle Status Description>
 *  text
 *  text
 * </In-Battle Status Description>
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - The description used here will not be used for State Tooltips.
 * - If both <Help Description> and <In-Battle Status Description> notetags
 *   exist in the same state, priority will be given to this one for the
 *   In-Battle Status Window.
 *
 * ---
 * 
 * <Exclude From Status Listing>
 * 
 * - Used for: State Notetags
 * - Excludes the state from being displayed in the status listing.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 *   - This is NOT used for filtering out who the player can or cannot select.
 *   - This determines a final result.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 * 
 * <Damage Flinch>
 * 
 * - Used for: Skill, Item Notetags
 * - Normally, MP and TP actions do not cause damage flinching. However,
 *   skills and items with this notetag will cause damage flinching if they
 *   hurt the target's MP or TP.
 * - HP damage will always be affected and cause target to flinch.
 * 
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 * 
 * <Popup Position: Head>
 * <Popup Position: Center>
 * <Popup Position: Base>
 * 
 * - Used for: Enemy Notetags
 * - Determines the popup starting position for this enemy.
 *   - Head makes the popups start at the top of the ennemy.
 *   - Center makes the popups start at the center of the ennemy.
 *   - Base makes the popups start at the bottom of the ennemy.
 * - If this notetag is not used, refer to the default Plugin Parameter setting
 *   found in Damage Settings.
 * 
 * ---
 * 
 * <Popup Offset X: +x>
 * <Popup Offset X: -x>
 * <Popup Offset Y: +y>
 * <Popup Offset Y: -y>
 * 
 * - Used for: Enemy Notetags
 * - Alters the popup x/y position offset for this enemy.
 * - Replace 'x' with a number representing the horizontal position x offset.
 *   - Negative: left. Positive: right.
 * - Replace 'y' with a number representing the vertical position y offset.
 *   - Negative: up. Positive: down.
 * - If these notetags are not used, refer to the default Plugin Parameter
 *   settings found in Damage Settings.
 * 
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 * 
 * <Aspect Name: name>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'name' with text for how enemy aspect should be renamed.
 * 
 * ---
 * 
 * <Aspect Color: color>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name color shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'color' with either a number from 0 to 31 representing the text
 *   color or in the format of '#rrggbb' to custom pick a hex color.
 * 
 * ---
 * 
 * <Aspect Icon: x>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect icon shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'x' with a number representing the icon index used to represent
 *   the enemy aspect.
 * 
 * ---
 * 
 * <Aspect Description>
 *  text
 *  text
 * </Aspect Description>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect description shown in the In-Battle Status and other
 *   supported plugin menus.
 * - Replace 'text' with the text you would like to appear as a description for
 *   the enemy's aspect.
 * 
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Change Battle Portrait (JS)
 * - Changes the battle portrait of the actor through JavaScript.
 * - Can be used outside of battle/action sequences.
 * 
 *   JS: Actor ID:
 *   - Enter which Actor ID to affect.
 *   - Uses JavaScript code.
 * 
 *   JS: Filename:
 *   - Enter the filename you wish to use.
 *   - Uses JavaScript code.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *     
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Check Formulas?:
 *   - It's usually bad practice to put in battle mechanics within damage
 *     formulas and this will check the damage formulas for skills and items
 *     to see if they contain any of the common battle mechanics that have the
 *     potential to cause problems.
 *   - Checks for illegal mechanics inside of damage formulas?
 *   - (ie. gainHp, loseHp, addBuff, addDebuff, addState, etc)
 *   - Read the following article for an explanation on why battle mechanics in
 *     damage formulas are undesirable and for an alternate solution:
 *     - http://www.yanfly.moe/wiki/Stop_Putting_Mechanics_in_Damage_Formulas
 *   - Turn this off if you do not want to be alerted of which skills/items
 *     have battle mechanics in their damage formulas.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Status?:
 *   - Add the "Status" command to the Command Window?
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Status
 *       - Adds the status command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: In-Battle Status Window
 * ============================================================================
 *
 * Added with Battle Core version 1.84, this new window allows the player to
 * view the status of the current active party. If the actors have states and
 * buffs, the player can scroll through them and read about their effects
 * through the help window.
 * 
 * If you would like to manage which parameters can appear here, this can be
 * done through the VisuMZ_0_CoreEngine's "Parameter Settings" and adjust which
 * parameters are shown through "Extended Parameters". These settings will
 * reflect in the In-Battle Status window, too. Otherwise, the parameters that
 * will be shown will only be MaxHP, MaxMP, ATK, DEF, MAT, MDF, AGI, and LUK.
 * 
 * The In-Battle Status can also be used to view enemies (if the parameter is
 * enabled). To view enemies, players must scroll through all the actors before
 * viewing enemies. Enemies will have their battler graphic displayed. If the
 * enemy has a SV Battler graphic, that will be displayed instead. However, if
 * the enemy has a Dragonbones, then the database battler graphic is displayed
 * to match any of the turn order displays as those also use the same graphic.
 * 
 * Enemies will not display the current HP on their In-Battle Status gauges.
 * Instead, they will display what percentage their HP, MP, and/or TP is at.
 * This is primarily due to how gauges do not support large numbers well and
 * showing the percentage values are better for this scene.
 *
 * ---
 * 
 * General Settings
 * 
 *   Status Icon:
 *   - The icon used for the Status command.
 * 
 *   Status Graphic:
 *   - Choose how the actor graphic appears for In-Battle Status.
 * 
 *   Help Description:
 *   - Text displayed when selecting the Status command.
 * 
 * ---
 * 
 * Enemy Settings
 * 
 *   Allow View Enemies?:
 *   - Allows players to view enemy stats (even if limited)?
 * 
 *   Show Level?:
 *   - Shows the enemy's level in the In-Battle Status?
 * 
 *   Hidden Parameter:
 *   - The text that appears if a parameter value is hidden.
 * 
 *     Show Params Always:
 *     - Always show exact enemy parameter values.
 * 
 *     Show Battle Test:
 *     - Show exact enemy parameter values in battle test.
 * 
 *     Show If Defeated:
 *     - Show exact enemy parameter values if enemy has been defeated before.
 * 
 * ---
 * 
 * Page Buttons:
 * 
 *   Show Page Buttons?:
 *   - Shows page buttons to switch between actors?
 *   - Still requires Touch UI option to be on.
 * 
 *   Large UI Position?:
 *   - If using a large resolution, position the page buttons on which side?
 * 
 *  Offset X
 *  - Offsets the page buttons x position.
 *  - Negative: left. Positive: right.
 * 
 *  Offset Y
 *  - Offsets the page buttons y position.
 *  - Negative: up. Positive: down.
 * 
 * ---
 * 
 * Parameter Display
 * 
 *   Increased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 *   Decreased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 * ---
 * 
 * States Display
 * 
 *   Max Width
 *   - Maximum width of the states list display.
 * 
 *   List States?
 *   - Lists states in the states list display?
 * 
 *   List Buffs?
 *   - Lists buffs in the states list display?
 * 
 *   List Debuffs?
 *   - Lists debuffs in the states list display?
 * 
 *   Buffs/Debuffs Display:
 * 
 *     Buff Name Format
 *     - Text format used to represent buffs.
 *     - %1 - Parameter Name
 * 
 *     Debuff Name Format
 *     - Text format used to represent debuffs.
 *     - %1 - Parameter Name
 * 
 *   Normal State:
 * 
 *     Normal Icon
 *     - Icon used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 *     Normal Text
 *     - Text used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 * ---
 * 
 * Help Descriptions
 * 
 *   State Help Format:
 *   - Text format used for state help descriptions
 *   - %1 - Description; %2 - Turns/Actions Remaining
 * 
 *   Buff Help Format:
 *   - Text format used for Buff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Debuff Help Format:
 *   - Text format used for Debuff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Normal State:
 *   - Help description used to explain normal state (unaffected by states,
 *     buffs, or debuffs).
 * 
 *   Turns/Actions Left:
 * 
 *     Actions Format:
 *     - Text format used to represent actions remaining.
 *     - %1 - Actions; %2 - Color
 * 
 *     Turns Format:
 *     - Text format used to represent turns remaining.
 *     - %1 - Turns; %2 - Color
 * 
 *     Passive Text:
 *     - Text used to represent a passive.
 * 
 * ---
 * 
 * Window Settings
 * 
 *   Background Type:
 *   - Select background type for this window.
 * 
 *   JS: Draw Data:
 *   - Code used to draw battler data.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 * 
 * Frontview Battlers
 * 
 *   Portrait Animations:
 * 
 *     Each Target:
 *     - Place animations on top for "Each Target" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of All:
 *     - Place animations on top for "Center of All" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of Screen:
 *     - Place animations on top for "Center of Screen" display types?
 *     - Does not apply to MV animations.
 * 
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 * 
 * Aspect Defaults
 * 
 *   Name Format:
 *   - Default name aspect format.
 *   - %1 - Original Enemy Name
 * 
 *   Name Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Icon:
 *   - Default icon used for aspect.
 *   - Use <Aspect Icon: x> to change icon.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.88: September 18, 2025
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetag added by Olivia:
 * *** <Damage Flinch>
 * **** Normally, MP and TP actions do not cause damage flinching. However,
 *      skills and items with this notetag will cause damage flinching if they
 *      hurt the target's MP or TP.
 * **** HP damage will always be affected and cause target to flinch.
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Damage Settings > Check Formulas?
 * **** It's usually bad practice to put in battle mechanics within damage
 *      formulas and this will check the damage formulas for skills and items
 *      to see if they contain any of the common battle mechanics that have the
 *      potential to cause problems.
 * **** Checks for illegal mechanics inside of damage formulas?
 * **** (ie. gainHp, loseHp, addBuff, addDebuff, addState, etc)
 * **** Read the following article for an explanation on why battle mechanics
 *      in damage formulas are undesirable and for an alternate solution:
 * **** http://www.yanfly.moe/wiki/Stop_Putting_Mechanics_in_Damage_Formulas
 * **** Turn this off if you do not want to be alerted of which skills/items
 *      have battle mechanics in their damage formulas. 
 * 
 * Version 1.87: June 12, 2025
 * * Bug Fixes!
 * ** Fixed a bug where <JS Accuracy> and related notetags did not work.
 *    Fix made by Arisu.
 * ** Fixed a bug where dual wielding weapons with HP/MP bonuses would cause
 *    the max cache values to fluctuate per hit. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added fail safes for plugins that would sometimes add null battlers to
 *    animation queues. This update prevents crashes for potential checks.
 * ** Added better compatibility with Message Core's text language change.
 *    Enemy names did not convert prior to placing state icons and would cause
 *    misalignment.
 * 
 * Version 1.86: January 16, 2025
 * * Bug Fixes!
 * ** Fixed a bug where during Active TPB, actors were not showing damage
 *    motions. Fix made by Olivia.
 * ** Fixed a bug regarding the in-battle status requiring that the Main Menu
 *    Core to be installed when other plugins are also present. Fix by Olivia.
 * ** Fixed a bug where <Exclude From Status Listing> notetag was not working
 *    properly due to a documentation typo of <Exclude From Status List>. Both
 *    notetags should now work. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added clarity for Plugin Parameters > Party Command Window Settings >
 *    Help Window
 * ** Added clarity for Plugin Parameters > Actor Command Window Settings >
 *    Help Window
 * *** The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 *     battle layouts.
 * * New Features!
 * ** New notetag added by Irina:
 * *** <Under>
 * **** If this tag is found in an animation's name, the animation will appear
 *      under battlers while in battle.
 * ***** This effect only applies to battlers in the battle scene.
 * ***** Under effect is NOT applied to status window portraits.
 * ***** Under effect is NOT applied to projectile animations.
 * ** Added new Action Sequence Projectile settings:
 * *** Extra Settings > End Animation ID:
 * **** Plays an animation when projectile reaches target.
 * **** Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 * Version 1.85: October 17, 2024
 * * Bug Fixes!
 * ** Fixed a bug where the enemy name's visibility would remain after an
 *    action has taken place and before inputting is done. Fix made by Olivia.
 * ** Fixed a bug where the "Name Visibility As Target" plugin parameter did
 *    not work properly. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Updated <Help Description> notetag documentation:
 * *** This is used as a common notetag between Battle Core's state
 *     descriptions and State Tooltips' state descriptions.
 * * New Features!
 * ** New Notetag added by Olivia:
 * *** <In-Battle Status Description>
 * **** A prioritized help description used to separate from the common help
 *      description notetag shared with State Tooltips.
 * ** New Plugin Parameters added by Olivia:
 * *** Actor Battlers > Frontview > Portrait Animations > Each Target
 * *** Actor Battlers > Frontview > Portrait Animations > Center of All
 * *** Actor Battlers > Frontview > Portrait Animations > Center of Screen
 * **** Place animations on top or behind for these display types?
 * *** Battle Log > Action Changes > Show Counter? > Wait Frames
 * *** Battle Log > Action Changes > Show Reflect? > Wait Frames
 * *** Battle Log > Action Changes > Show Substitute? > Wait Frames
 * **** If devs allow the results of counters, reflects, and substitutes, there
 *      wasn't enough time before to allow the text to be visible on screen.
 *      You can now adjust how many frames are now visible if text is shown.
 * **** Default values are left at 0 as to not interrupt currently existing
 *      action sequences.
 * 
 * Version 1.84: September 19, 2024
 * * Bug Fixes!
 * ** Fixed a bug where Action Sequence "MOVE: Change Home By Distance" would
 *    also be affected by the actor and enemy position offsets. Fixed by Irina.
 * ** Fixed a bug where Action Sequence "MECH: STB Exploit Effect" caused a
 *    crash. Fix made by Arisu.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Command added by Arisu:
 * *** ANIM: Change Battle Portrait (JS)
 * **** Changes the battle portrait of the actor through JavaScript.
 * **** Can be used outside of battle/action sequences.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > In-Battle Status Window
 * **** This new window allows the player to view the status of the current
 *      active party. If the actors have states and buffs, the player can
 *      scroll through them and read about their effects through the help
 *      window.
 * ** New Notetags added by Olivia:
 * *** <Help Description>
 * **** Assigns a help description for the state that's displayed under the
 *      new "Status" actor command.
 * *** <Exclude From Status Listing>
 * **** Excludes the state from being displayed in the status listing.
 * *** <Aspect Name: x>
 * *** <Aspect Icon: x>
 * *** <Aspect Color: x>
 * *** <Aspect Description>
 * **** Used to define enemy aspect that will show up in the In-Battle Status
 *      as well as other supported plugins.
 * *** <Popup Position: Head>
 * *** <Popup Position: Center>
 * *** <Popup Position: Base>
 * **** Changes the popup starting position for this enemy.
 * *** <Popup Offset X: +x>
 * *** <Popup Offset X: -x>
 * *** <Popup Offset Y: +y>
 * *** <Popup Offset Y: -y>
 * **** Changes the popup X/Y position offset for this enemy.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Party Command Window > Add Status?
 * **** Add the "Status" command to the Command Window? 
 * *** Plugin Parameters > Actor Command Window > Command List
 * **** Updated to have the "Status" command.
 * *** Plugin Parameters > In-Battle Status Window
 * **** Completely new! View the help file for more information.
 * *** Plugin Parameters > Enemy > Aspects
 * **** Used for the In-Battle Status as well as other supported plugins.
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait_JS
 * @text ANIM: Change Battle Portrait (JS)
 * @desc Changes the battle portrait of the actor through JavaScript.
 * Can be used outside of battle/action sequences.
 *
 * @arg ActorJS:func
 * @text JS: Actor ID
 * @type note
 * @desc Enter which Actor ID to affect.
 * Uses JavaScript code.
 * @default "// Get Actor ID here.\nlet actorID = 0;\nactorID = $gameParty.members()[0].actorId();\n\n// Return Actor ID\nreturn actorID;"
 *
 * @arg FilenameJS:func
 * @text JS: Filename
 * @type note
 * @desc Enter the filename you wish to use.
 * Uses JavaScript code.
 * @default "// Get Filename here.\nlet filename = 'Actor1_';\nfilename += String(Math.randomInt(8) + 1);\n\n// Return Filename\nreturn filename;"
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","ShowCosts:eval":"true","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat.","HelpParty:str":"Automatically choose an action suitable for combat."}
 *
 * @param InBattleStatus:struct
 * @text In-Battle Status Window
 * @type struct<InBattleStatus>
 * @desc Settings that alter the In-Battle Status window accessed
 * through the "Status" command.
 * @default {"General":"","CmdIconStatus:num":"87","StatusGraphic:str":"face","HelpStatus:str":"View battle member status.","Enemy":"","enemyStatus:eval":"true","enemyShowLevel:eval":"true","enemyHiddenParameter:str":"???","enemyShowParametersAlways:eval":"false","enemyShowParametersIfBattleTest:eval":"true","enemyShowParametersIfDefeated:eval":"true","PageButtons":"","pageOffsetX:num":"+0","pageOffsetY:num":"+0","pageButtons:eval":"true","Parameters":"","buffValueFmt:str":"▲%1","debuffValueFmt:str":"▼%1","States":"","statesMaxWidth:num":"384","drawStates:eval":"true","drawBuffs:eval":"true","drawDebuffs:eval":"true","BuffsDebuffs":"","buffNameFmt:str":"%1▲","debuffNameFmt:str":"%1▼","NormalState":"","normalIcon:num":"84","normalText:str":"Normal","HelpDesc":"","stateHelpFmt:json":"\"%1 %2\"","buffHelpFmt:json":"\"Increases %1 to %3%2\\\\C[0]. %4\"","debuffHelpFmt:json":"\"Decreases %1 to %3%2\\\\C[0]. %4\"","normalHelp:json":"\"Status is currently normal.\"","TurnHelpDesc":"","actionsFmt:str":"\\C[6](Actions %2%1\\C[6])\\C[0]","TurnsFmt:str":"\\C[5](Turns %2%1\\C[5])\\C[0]","passiveText:str":"\\C[4](Passive)\\C[0]","Window":"","StatusWindow_BgType:num":"0","StatusWindow_DrawJS:func":"\"{ // Draw Face and Simple Status\\n    const x = this.colSpacing() / 2;\\n    const h = ImageManager.faceHeight;\\n    const y = h / 2 - this.lineHeight() * 1.5;\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\n}\\n{ // Draw Actor Parameters\\n    let maxWidth = this.drawingAreaWidth();\\n    let x1 = 0;\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\n\\n    let counter = 0;\\n    const params = this.displayedParams();\\n\\n    let px = x1;\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\n    let pw = Math.floor(maxWidth / 2);\\n\\n    if (this._statesWindow.y !== 0) {\\n        this._statesWindow.y = py;\\n    }\\n\\n    for (const param of params) {\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\n        this.drawParamData(param, px, py, pw);\\n        counter++;\\n        if (counter % 2 === 0) {\\n            px = x1;\\n            py += this.lineHeight();\\n        } else {\\n            px = x2;\\n        }\\n    }\\n}\"","StatusWindow_RectJS:func":"\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\nconst ww = Graphics.boxWidth - (wx * 2);\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\nreturn new Rectangle(wx, wy, ww, wh);\""}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param CheckFormulaMechanics:eval
 * @text Check Formulas?
 * @parent DamageStyles
 * @type boolean
 * @on Check
 * @off Disable
 * @desc Checks for illegal mechanics inside of damage formulas?
 * (ie. gainHp, loseHp, addBuff, addDebuff, addState, etc)
 * @default true
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowCounterWait:eval
 * @text Wait Frames
 * @parent ShowCounter:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowReflectWait:eval
 * @text Wait Frames
 * @parent ShowReflect:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ShowSubstituteWait:eval
 * @text Wait Frames
 * @parent ShowSubstitute:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddStatus:eval
 * @text Add Status?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Status" command to the Command Window?
 * @default true
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent CommandAddStatus:eval
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option status
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * In_Battle Status Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~InBattleStatus:
 *
 * @param General
 * @text General Settings
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent General
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param StatusGraphic:str
 * @text Status Graphic
 * @parent General
 * @type select
 * @option None
 * @value none
 * @option Face
 * @value face
 * @option Map Sprite
 * @value sprite
 * @option Sideview Battler
 * @value svbattler
 * @desc Choose how the actor graphic appears for In-Battle Status.
 * @default face
 *
 * @param HelpStatus:str
 * @text Help Description
 * @parent General
 * @desc Text displayed when selecting the Status command.
 * @default View battle member status.
 *
 * @param Enemy
 * @text Enemy Settings
 *
 * @param enemyStatus:eval
 * @text Allow View Enemies?
 * @parent Enemy
 * @type boolean
 * @on Allow
 * @off Forbid
 * @desc Allows players to view enemy stats (even if limited)?
 * @default true
 *
 * @param enemyShowLevel:eval
 * @text Show Level?
 * @parent Enemy
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the enemy's level in the In-Battle Status?
 * @default true
 *
 * @param enemyHiddenParameter:str
 * @text Hidden Parameter
 * @parent Enemy
 * @desc The text that appears if a parameter value is hidden.
 * @default ???
 *
 * @param enemyShowParametersAlways:eval
 * @text Show Params Always
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Always show exact enemy parameter values.
 * @default false
 *
 * @param enemyShowParametersIfBattleTest:eval
 * @text Show Battle Test
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values in battle test.
 * @default true
 *
 * @param enemyShowParametersIfDefeated:eval
 * @text Show If Defeated
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values if enemy has been defeated before.
 * @default true
 *
 * @param PageButtons
 * @text Page Buttons
 *
 * @param pageButtons:eval
 * @text Show Page Buttons?
 * @parent PageButtons
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows page buttons to switch between actors?
 * Still requires Touch UI option to be on.
 * @default true
 *
 * @param pageButtonPosition:str
 * @text Large UI Position?
 * @parent pageButtons:eval
 * @type select
 * @option left
 * @option right
 * @desc If using a large resolution, position the page buttons on which side?
 * @default left
 *
 * @param pageOffsetX:num
 * @text Offset X
 * @parent PageButtons
 * @desc Offsets the page buttons x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param pageOffsetY:num
 * @text Offset Y
 * @parent PageButtons
 * @desc Offsets the page buttons y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param Parameters
 * @text Parameter Display
 *
 * @param buffValueFmt:str
 * @text Increased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▲%1
 *
 * @param debuffValueFmt:str
 * @text Decreased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▼%1
 *
 * @param States
 * @text States Display
 *
 * @param statesMaxWidth:num
 * @text Max Width
 * @parent States
 * @desc Maximum width of the states list display.
 * @default 384
 *
 * @param drawStates:eval
 * @text List States?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists states in the states list display?
 * @default true
 *
 * @param drawBuffs:eval
 * @text List Buffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists buffs in the states list display?
 * @default true
 *
 * @param drawDebuffs:eval
 * @text List Debuffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists debuffs in the states list display?
 * @default true
 *
 * @param BuffsDebuffs
 * @text Buffs/Debuffs Display
 * @parent States
 *
 * @param buffNameFmt:str
 * @text Buff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent buffs.
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param debuffNameFmt:str
 * @text Debuff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent debuffs.
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param NormalState
 * @text Normal State
 * @parent States
 *
 * @param normalIcon:num
 * @text Normal Icon
 * @parent NormalState
 * @desc Icon used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default 84
 *
 * @param normalText:str
 * @text Normal Text
 * @parent NormalState
 * @desc Text used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default Normal
 *
 * @param HelpDesc
 * @text Help Descriptions
 *
 * @param stateHelpFmt:json
 * @text State Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for state help descriptions
 * %1 - Description; %2 - Turns/Actions Remaining
 * @default "%1 %2"
 *
 * @param buffHelpFmt:json
 * @text Buff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Buff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Increases %1 to %3%2\\C[0]. %4"
 *
 * @param debuffHelpFmt:json
 * @text Debuff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Debuff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Decreases %1 to %3%2\\C[0]. %4"
 *
 * @param normalHelp:json
 * @text Normal State
 * @parent HelpDesc
 * @type note
 * @desc Help description used to explain normal state (unaffected by states, buffs, or debuffs).
 * @default "Status is currently normal."
 *
 * @param TurnHelpDesc
 * @text Turns/Actions Left
 * @parent HelpDesc
 *
 * @param actionsFmt:str
 * @text Actions Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent actions remaining.
 * %1 - Actions; %2 - Color
 * @default \C[6](Actions %2%1\C[6])\C[0]
 *
 * @param TurnsFmt:str
 * @text Turns Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent turns remaining.
 * %1 - Turns; %2 - Color
 * @default \C[5](Turns %2%1\C[5])\C[0]
 *
 * @param passiveText:str
 * @text Passive Text
 * @parent TurnHelpDesc
 * @desc Text used to represent a passive.
 * @default \C[4](Passive)\C[0]
 *
 * @param Window
 * @text Window Settings
 *
 * @param StatusWindow_BgType:num
 * @text Background Type
 * @parent Window
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param StatusWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Window
 * @type note
 * @desc Code used to draw battler data.
 * @default "{ // Draw Face and Simple Status\n    const x = this.colSpacing() / 2;\n    const h = ImageManager.faceHeight;\n    const y = h / 2 - this.lineHeight() * 1.5;\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\n}\n{ // Draw Actor Parameters\n    let maxWidth = this.drawingAreaWidth();\n    let x1 = 0;\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\n\n    let counter = 0;\n    const params = this.displayedParams();\n\n    let px = x1;\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\n    let pw = Math.floor(maxWidth / 2);\n\n    if (this._statesWindow.y !== 0) {\n        this._statesWindow.y = py;\n    }\n\n    for (const param of params) {\n        this.drawDarkRect(px, py, pw, this.lineHeight());\n        this.drawParamData(param, px, py, pw);\n        counter++;\n        if (counter % 2 === 0) {\n            px = x1;\n            py += this.lineHeight();\n        } else {\n            px = x2;\n        }\n    }\n}"
 *
 * @param StatusWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Window
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const wx = Graphics.boxWidth > 1000 ? 120 : 0;\nconst wy = this._helpWindow.y + this._helpWindow.height;\nconst ww = Graphics.boxWidth - (wx * 2);\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param FvBattlers
 * @text Frontview Battlers
 * 
 * @param FvPortraitAni
 * @text Portrait Animations
 * @parent FvBattlers
 *
 * @param FvAniEachTarget:eval
 * @text Each Target
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Each Target" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterAll:eval
 * @text Center of All
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of All" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterScreen:eval
 * @text Center of Screen
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of Screen" display types?
 * Does not apply to MV animations.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 * @param Aspect
 * @text Aspect Defaults
 *
 * @param AspectNameFmt:str
 * @text Name Format
 * @parent Aspect
 * @desc Default name aspect format.
 * %1 - Original Enemy Name
 * @default %1 Aspect
 *
 * @param AspectColor:str
 * @text Name Color
 * @parent Aspect
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 2
 *
 * @param AspectIcon:num
 * @text Icon
 * @parent Aspect
 * @desc Default icon used for aspect.
 * Use <Aspect Icon: x> to change icon.
 * @default 26
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

function _0x5220(){const _0x4d98ba=['mhp','enemyShowLevel','ShowTpDmg','startShakeFlinch','Game_Action_executeHpDamage','%1StartTurnJS','battleFloat','debuffValueFmt','freezeMotion','_cache','VisuMZ_2_AggroControlSystem','ActSeq_Impact_TimeStop','setBattlerMotionTrailData','endBattle','increaseHits','Game_Battler_clearDamagePopup','ANNOYED','Game_Enemy_setup','_regionBattleback1','Game_Actor_equips','callNextMethod','CastMagical','ActSeq_Cutin_WaitForEntrance','setBattlerBattleCore','GetParamIcon','isMeleeSingleTargetAction','AnchorY','_createEffectsContainer','applyCritical','virtualClick','NOTE','XPSpriteYLocation','_helpWindow','cancel','ActSeq_BattleLog_UI','ActSeq_BattleLog_PushBaseLine','performCastAnimation','origin','createDigits','isFastForward','maxCols','Users','Game_Action_testApply','debuffColor','DisablePartyCmd','getLastHpDamage','CmdIconFight','_createCursorArea','battleInjectAni','applyFreezeMotionFrames','isVisualHpGaugeDisplayed','HpGauge','ActSeq_Projectile_Icon','Destination','battleStatusSprite','attackStatesRate','Sprite_AnimationMV_updatePosition','startInput','displayCounter','%1▼','clone','JS\x20ESCAPE\x20FAILURE','DigitGrouping','updateOnceParallelInterpreters','popBaseLine','getCommonEventIdWithName','Targets2','ScaleToFit','onAngleEnd','USER-DEFINED\x205','TpbActiveChangeEnabled','messageSpeed','Game_Battler_makeSpeed','PopupShiftY','ElementStatusCore','stateHelpFmt','duration','clearElementChanges','Scene_Battle_createEnemyWindow','startTurn','contentsBack','AggroControlSystem','okTargetSelectionVisibility','POST-','Override','needsSelectionBattleCore','clamp','activate','setReturnWindow','addState','ShowHide','BattleSystemSTB','drawItem','battleSpriteSkew','battleVoices','forceSelect','svBattlerData','repeatTargets','1060200bpgfCh','ActSeq_ChangeAngle','createEnemies','%1StartBattleJS','_pagedownButton','_tpbChargeTime','Filename','test','isSpinning','getParamBuffAndStateRate','AllActorsText','Window_BattleLog_popupDamage','_targetHomeY','tpDamage','drawItemActorSvBattler','addedBuffs','BattleManager_abort','hitType','moveBattlerHomeToPoint','EasingType','damageCounterWindowRect','VisuMZ_4_BreakShields','SwitchMissEvade','isItemCommandEnabled','updateEventMain','100%','WaitForFloat','actionEffect','isClicked','DistanceY','updateEvent','MeleeDistance','performActionEnd','updateShadow','PRE-','createBattleField','message1','WaitForScale','attack','Game_Action_isForRandom','statusTextAutoBattleStyle','initBattleCore','top','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','isHidden','cameraOffsetDuration','_battlerName','_baseX','VisuMZ_1_MainMenuCore','_motionSpeed','isForAnyoneFocusOpponents','isEscapeCommandEnabled','MIN_SAFE_INTEGER','displayMpDamage','actorCommandAutoBattle','_activeWeaponSlot','meetsSelectFrontviewActorConditions','ExtDisplayedParams','ShowReflect','Game_Action_setSkill','slices','setSkill','createDamageSprite','Game_BattlerBase_param','textBaseline','noise','_skewEasing','applyBattleCoreCriticalHitRateJS','mainSpriteScaleX','_tempActor','HelpEscape','_doubleTouch','focus','custom','MDF','_opacityWholeDuration','Scene_Battle_commandFight','_lastRegenFrameCount','updateLastTarget','AnimationID','requestBalloon','loadCharacter','paintOpacity','%1\x20Aspect','_homeEasing','dead\x20opponents','buffHelpFmt','abs','arPenRate','_deathStateApplied','VisualCutinEffect','BattleManager_startTurn','resize','_colorTone','ForceExploited','addCustomCommands','5387166zVNvSQ','updatePadding','setBattleCameraPoint','_windowLayer','_targetHits','HITTYPE_CERTAIN','ShowAddedDebuff','drawParamData','Sprite_Enemy_setBattler','startBattle','ForceRandom','_commonEventQueue','occasion','BattleManager_onEscapeSuccess','getStypeIdWithName','addNormalStatus','createMultiTargetWindow','displayStartMessages','ActSeq_Mechanics_StbExploit','name','_appeared','processPostBattleCommonEvents','Game_Action_itemEffectAddAttackState','WIDTH','onAllActionsEnd','Immortal','updateMotionCount','_angleEasing','softDamageCapRate','attackMotions','flashColor','openBattleActorWindow','_updateFilterArea','smoothSelect','_actorSprites','CheckSkillCommandShowSwitches','selectAllActors','Sprite_Actor_setActorHome','canInput','ActSeq_Mechanics_EtbAction','Game_Action_setItem','WaitForSpin','encounterList','displayBuffs','_animation','moveBattlerToPoint','isPartyTpbInputtable','changeWeather','formula','BattleManager_onEscapeFailure','NameAlwaysSelectOnly','_floatDuration','mainSprite','_homeY','UNTITLED','StateIconOffsetY','VisuMZ_0_CoreEngine','canGuardBattleCore','DamageDisplay','selectNextCommandTpb','BG_TYPE','createBorderStylePortraitSprite','_battleBalloonSprites','_statesWindow','isAlwaysVisible','setGuard','setActorHome','isAnyoneFloating','WaitForEntrance','updateCancel','_makeCursorAlpha','Scene_Battle_updateStatusWindowPosition','commandAutoBattle','displayBattleCoreTransitionErrorMsg','Scene_Battle_updateCancelButton','onMoveEnd','_battlerContainer','_commonEventIDs','setupBattleCore','onEnemyOk','repositionCancelButtonBorderStyle','_effectType','Sprite_Battleback_adjustPosition','SkillsStatesCore','makeActionList','<CENTER>%1','_customDamageFormula','isLearnedSkill','checkSceneBattleTransitionable','VisuMZ_2_BattleSystemSTB','createAllWindows','textWidth','createEnemyWindow','isAnyoneMoving','MANUAL','adjustPosition','ActSeq_BattleLog_Refresh','Settings','checkAutoCustomActionSequenceNotetagEffect','_baseLineStack','_actorMultiTargetWindow','innerWidth','removeHorrorEffect','createHpGaugeSprite','CriticalHitMultiplier','contents','ActSeq_Grid_AddTriggerToNode','_reflectionTarget','VisuMZ_3_BattleCmdTalk','%1StartActionJS','CombatLogIcon','AnchorX','battleZoom','drawItemBackground','updateStateSpriteBattleCore','_damagePopupArray','LastSelected','deactivate','adjustWeaponSpriteOffset','hitIndex','setupZoomBlurImpactFilter','process_VisuMZ_BattleCore_TraitObject_Notetags','Decreases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','IconIndex','_lastHpDamage','ActSeq_Motion_RefreshMotion','textAlignment','DefaultHardCap','loadSvEnemy','setBattleCameraTargets','isStateResist','ShowCosts','getItemDamageAmountTextOriginal','isDebuffAffected','_endingBattle','ActorCmd','setupIconTextPopup','retrieveBattleBalloon','resetCounter','_active','ActSeq_BattleVoice_PlayCommonLine','padding','BattleManager_inputtingAction','ceil','createMainSprite','Game_Actor_setup','actor','cancelActorInput','boxHeight','lastCommandSymbol','Spriteset_Battle_update','ActSeq_Grid_TeleportToNode','_enemyNameContainer','Game_BattlerBase_canAttack','PopupDuration','NUM','currentValue','skillItemWindowRectMiddle','requestMotion','EFFECT_COMMON_EVENT','_homeWholeDuration','processBattleCoreJS','hitRate','processTurn','setCustomDamageFormula','battleMembers','updateInterpreter','opponentsUnit','Window_BattleLog_performDamage','prepareBorderActor','isQueueOptionsMenu','BindCommonEventKeysForObj','isAnyBattleBalloonPlaying','Game_BattlerBase_die','drawItemStatus','_damages','putActiveBattlerOnTop','itemTargetCandidates','isBorderPortraitSpriteVisible','initVisibility','setupActionSet','dataId','PostApplyJS','Setting','clearWeaponAnimation','CommandAddStatus','MotionAni','Game_Troop_expTotal','isSkillItemWindowsMiddle','battleInjectPrep','gainTp','states','loadOtherActorImages','EnemyOffsetY','_shakeFlinchDuration','DamageFlat','CommandAddOptions','isETB','ShowRemovedState','format','Game_BattlerBase_isStateResist','Game_Action_itemHit','PortraitScaleBorderStyle','updateStaticSvBattlerFrames','ActSeq_Motion_ClearFreezeFrame','CheckVisibleSkillNotetags','skew','endAction','VisuMZ_2_BattleSystemFTB','ACTOR_OFFSET_Y','PreRegenerateJS','Game_Action_isForDeadFriend','setFrame','isAnyoneJumping','gaugeBackColor','stypeId','currentExt','VisuMZ_2_BattleSystemOTB','isAnyoneChangingOpacity','filters','ActSeq_Mechanics_Collapse','PostApplyAsUserJS','_homeDuration','LIGHTBULB','reverse','battleJump','subject','processAbort','opacity','damageFlat','process_VisuMZ_BattleCore_Failsafes','registerCommand','Sprite_Enemy_update','CheckCustomActSeqNotetag','damagePopupPosition','getAttackMotionSlot','Damage','_battleField','width','ActSeq_Mechanics_OnceParallel','ARRAYEVAL','floatBattler','SceneManager_isSceneChanging','createJS','PreApplyJS','_allTargets','SvBattlerMass-%1-%2','ActSeq_Mechanics_BoostPointsStoreData','walk','_targetHomeX','autoBattleStyle','performAction','left','removeImmortal','alterBreakShield','_skewX','_list','onActorOk','placeActorName','BattleManager_processDefeat','hpRate','lineHeight','\x5cHEXCOLOR<%1>','SwitchCritical','Window_BattleLog_performCounter','height','visualCutinPortraitType','setActiveWeaponSet','Window_PartyCommand_initialize','applyVariance','XPActorCommandLines','changeTextColor','HitRate','ActSeq_Grid_MoveTargetsInDirection','surprise','PostEndBattleJS','FlinchDuration','setup','_targetGrowY','setupBattleback','updateBitmap','OffsetX','smoothness','ActSeq_Skew_Reset','performMoveToTargets','ANGLE','statusWindowRectBorderStyle','invokeMagicReflection','_performActionEnd','performRecovery','parseForcedGameTroopSettingsBattleCore','updateBattlebackBitmap','PostEndTurnJS','AutoBattleMsg','makeDeepCopy','VisuMZ_1_ElementStatusCore','WaitCount1','drawBackgroundRect','initBattlePortrait','addSkillTypeCommand','changeInputWindow','isMagical','log','checkShowHideSwitchNotetags','Scene_Battle_createHelpWindow','processDefeat','Sprite_Battler_updatePosition','setHandler','_dimmerSprite','%1▲','processEnemyModeTouchBattleCore','PostApply%1JS','_battleCoreAddedElements','updateEffectsContainer','itemPadding','makeTargetsBattleCoreJS','ActSeq_Camera_Reset','mainSpriteHeight','Shadow','executeMpDamage','refresh','portraitIndex','isBreakStunned','getInputButtonString','_skillIDs','IconSet','ConvertParams','fontSize','FilenameJS','All\x20Enemies','MUSIC','portrait','NewPopupBottom','FlashColor','addCommand','transform','cancelLifeSteal','ShakeFlinchPower','State-%1-%2','Scene_Battle_onActorCancel','removeState','_borderPortraitSprite','Duration','members','FrontViewSelect','Elements','autoSelect','ActSeq_Movement_Spin','PostStartTurnJS','TpGaugeOffsetX','49PWqPRX','Parse_Notetags_TraitObjects','actorCommandCancelTPB','isSelected','updateShakeFlinch','applyAngleChange','Sprite_Battler_isMoving','createInnerPortrait','ParseAllNotetags','_character','flipVisualCutinVert','evalDamageFormula','ActSeq_Motion_FreezeMotionFrame','MaxLines','CmdStyle','Game_Action_isForOpponent','ActSeq_Element_NullElements','NameAlwaysVisible','getBattleMembers','Game_Map_setupBattleback','StepDistanceY','makeTargetSprites','Game_Action_setGuard','ActSeq_Movement_Skew','sliceMax','ActSeq_Grid_PullToTargetNode','isTimeActive','HpGaugeOffsetX','updateOpacity','ParseActorNotetags','ActSeq_Animation_BalloonIconSpecific','JS\x20BATTLE\x20VICTORY','playOkSound','itemHeight','_targetSkewY','addDamageSprite','actionSplicePoint','backColor','BattleManager_startInput','setBlendColor','makeStateName','Weapon-%1-%2','splice','save','onBattleEnd','Actor-%1-%2','_pattern','maxItems','USER-DEFINED\x204','ConvertActionSequenceTarget','CriticalDmgRate','PreDamageAsUserJS','overworldBattleback1Name','_emptyBitmap','createLowerLayer','createEnemySprite','ParseWeaponNotetags','NameFontSize','updatePosition','clearBattleCoreAspects','_targetY','SvMotionIdleSolo-%1-%2','valueColor','updateWaitMode','AsTarget','ActSeq_Animation_AttackAnimation','clearOnceParallelInterpreters','fight','svBattlerName','gaugeRate','power','ActSeq_Mechanics_DamagePopup','symbol','removeOnceParallelInterpreter','globalAlpha','changeCtbCastTime','VisuMZ_4_CombatLog','ActSeq_Mechanics_Multipliers','updateFlip','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','_actionBattlers','onBattleStart','visibilityState','skewDuration','addWindow','extendTroopMembers','becomeSTBExploited','uiMenuStyle','setStateTurns','COMBATLOG','checkSubstitute','_inBattleStatusWindow','FaceDirection','isTurnBased','Window_BattleLog_displayMiss','HalfActions','itemWindowRect','addPartyCommand','jsAccuracy','criticalHitFlat','isAnyoneSkewing','updateCollapse','\x20to\x20%1\x20midbattle.','Text','Game_Action_isForFriend','isForRandom','center','isAlwaysHidden','VisuMZ_3_SideviewBattleUI','_offsetY','BattleManager_cancelActorInput','rec','displayAction','addBattlerStates','_selectionEffectCount','applySoftDamageCap','isStateAffected','_floatWholeDuration','frontview_ui','Param','CalcEscapeRaiseJS','gainCurrentActionsETB','Game_Interpreter_command301','WaitForJump','maxTp','auto','constructor','createCommandNameWindow','FlinchDistanceX','_targetFloatHeight','startActorCommandSelection','_ptbActionCost','BattleManager_processAbort','ShowFacesListStyle','ActSeq_Movement_FaceJsPoint','textColor','onDatabaseLoaded','anchor','TP_Rate','updateFrame','Armor-%1-%2','extraPositionX','ActSeq_Camera_FocusTarget','PreDamageJS','arRedRate','setupFont','displayType','ActSeq_Movement_HomeMoveToPoint','performTpbActiveCheckSwitch','_battleLayoutStyle','onSelectAction','STYPES','_updateDuration','magicReflection','statesWindowRect','filterArea','filter','ActSeq_Movement_MoveToJsPoint','isPhysical','shouldPopupDamage','Window_BattleLog_performSubstitute','floor','isBattleCoreTargetScope','Scene_Battle_createAllWindows','actionsFmt','BravePoints','displayChangedStates','_distortionSprite','Sprite_Damage_createChildSprite','setLetter','_updateClientArea','ConfigManager_makeData','restore','sort','ActSeq_Zoom_WaitForZoom','AllowRandomSpeed','PrioritySortActive','_damageCounterWindow','_growX','Intensity','InBattleStatus','includeState','_back2Sprite','Sprite_Battler_damageOffsetX','ReflectPlayback','ActSeq_Grid_RemoveTriggerFromNode','PopupShiftX','setBattleSkew','playEnemyDamage','battlerHue','_itemWindow','_enemyIDs','drawItemImage','makeActionOrders','isAnyoneInjectAniPrepping','PreEndActionJS','ActSeq_Projectile_Animation','CoreEngine','_opacityEasing','process_VisuMZ_BattleCore_CreateRegExp','ALL_ENEMIES','command301_PreBattleEvent','performCollapse','damageOffsetY','speed','selectSymbol','setupTextPopup','bossCollapse','ActionStart','BattleManager_makeActionOrders','AsUser','jsAccuracyAsTarget','VisuMZ_2_WeaponSwapSystem','gradientFillRect','process_VisuMZ_BattleCore_Notetags','isFightCommandEnabled','setItem','ActorOffsetX','removeBuff','attackAnimationIdSlot','pageButtonY','centerFrontViewSprite','svBattlerAnchorY','isForAll','Game_Action_isForOne','forActor','ActionCenteredName','createInBattleStatusWindow','Window_ItemList_maxCols','HomePosJS','HEART','_offsetX','onEnemyCancel','ShowMpDmg','Buffs','isSideView','VisuMZ_1_MessageCore','bgType','ArRedFlat','isSTB','Direction','startTpbTurn','_buttonKey','performActionMotions','jsOneForOne','makeStateHelpText','pauseInjectAnimation','deathStateId','Game_Battler_onBattleEnd','startHomeMove','getNextDamagePopup','OffsetAdjust','isGuardWaiting','isOpen','FRUSTRATION','Window_Options_addGeneralOptions','Game_Battler_performActionStart','onEscapeFailure','Scene_Battle_createPartyCommandWindow','Game_Action_itemEffectAddNormalState','clearMotion','autoSelectPriority','AS\x20TARGET','_wtypeIDs','ActSeq_Horror_TVRemove','ActSeq_Grid_AddPassiveStatesToNode','VisuMZ_3_ActSeqProjectiles','ACTOR_OFFSET_X','ActSeq_BattleLog_PopBaseLine','isRepeated','disperseDamage','Game_Party_removeActor','checkShowHideBattleNotetags','NameAlwaysHidden','weapons','BattleManager_endBattle','createActionSequenceProjectile','head','CustomFontFace','%1RegenerateJS','isCancelled','isTpbCharged','ActSeq_Mechanics_StateTurnsChangeTo','endAnimation','setEventCallback','mpDamage','MOTIONS','\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','Victory','setTargetBattlerKey','_animationSprites','battleSpin','_weaponImageId','partyCommandWindowRectDefaultStyle','ShowCounter','ComboWindow','ActSeq_Movement_Float','fadeShiftX','totalHealFmt','performMagicEvasion','MAT','onEncounter','BattleManager_onEncounter','swing','state','ActSeq_Camera_Offset','addAnimationSpriteToContainer','dead\x20actors','ShowHpDmg','addText','select','RevertAngle','TPB','dead\x20friends','registerDefeatedEnemy','drawTextEx','ActSeq_Horror_NoiseCreate','ActSeq_Mechanics_EmulateItemEffect','ShowSubstitute','BattleLogRectJS','unchanged','originalName','addChildToUiContainer','minimumHits','rowSpacing','collapseType','setActiveWeaponSlot','_flashColor','wholeActionSet','debuffNameFmt','isAutoBattle','processVictory','ShowRemovedBuff','drawSkillCost','buffNameFmt','_weaponSprite','StyleName','Opacity','face','dead\x20enemies','ActSeq_Mechanics_EmulateSkillCost','Reveal','Scene_Battle_startActorSelection','setHelpWindow','isAttack','parallaxHueEnemyModifier','_commonEventKey','windowPadding','setHue','ActSeq_Mechanics_BoostPointsChange','We\x20recommend\x20removing\x20mechanics\x20from\x20formulas!\x0a\x0a','updateBattleVariables','VisuMZ_2_BattleGridSystem','Window_BattleLog_displayMpDamage','Window_BattleLog_displayActionResults','updateVisibility','effect','StateID','moveBattlerDistance','helpAreaHeight','pushBaseLine','physical','MpGaugeOffsetX','battleCoreResumeLaunchBattle','indexOf','motionType','ActionSequence','TpGaugeOffsetY','BattleManager_setup','pop','isForOpponent','calcWindowHeight','ActSeq_Animation_BalloonAnimation','HITTYPE_PHYSICAL','ActSeq_Mechanics_ArmorPenetration','mainSpriteWidth','ARRAYSTR','updateShadowVisibility','Game_BattlerBase_allIconsIBS','nameColor','actor%1-gauge-%2','ShowPortraits','DualWield','updateTargetValue','ActSeq_Motion_WaitMotionFrame','BattleDefeatJS','isConfused','spell','isAlive','Game_Action_setSubject','Frame','Scene_Battle_skillWindowRect','WaitForAnimation','onOpacityEnd','front\x20center','ActSeq_Grid_AddTriggerToNodeJS','portraitHue','Linear','mainSpriteScaleY','SkillID','setupWeaponAnimation','adjustPosition_ScaleToFit','isBorderStylePortraitShown','skillTypes','okButtonText','applyGuard','Sprite_Actor_initMembers','updateWeather','_methods','Skills','displayActionResults','ActSeq_Movement_FaceTarget','_tpbSceneChangeCacheActor','_actorWindow','Wave','updateUiContainerPosition','endIcon','_autoBattleWindow','ALL_ACTORS','chantStyle','BTestBypass','linkSprite','timeScale','Mechanics','svBattlerAnchorX','createActors','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','loop','refreshStatusWindow','isBattleRefreshRequested','bottom','canGuard','onJumpEnd','initElementStatusCore','ActSeq_Mechanics_FtbAction','ActSeq_Element_Clear','playSystemSound','alive\x20actors\x20not\x20target','setBattleAngle','Game_Action_numRepeats','ActSeq_Horror_GlitchRemove','_forcedBattleLayout','extraPositionY','\x5cC[%1]','enemyStatus','removeActor','TRAIT_PARAM','isCTB','BattleManager_startBattle','Window_BattleLog_refresh','startInBattleStatus','WaitForSkew','isAnyoneGrowing','NextTurn','addedStateObjects','drawItemActorFace','paramValueByName','setImmortal','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','updateStateSprite','setSvBattlerSprite','updateScale','CriticalHitFlat','ActSeq_Movement_FaceDirection','ActSeq_Movement_MoveToTarget','PreEndBattleJS','isActionSelectionValid','moveBattlerHomeDistance','USER-DEFINED\x203','StatusWindowSkinFilename','drawEnemyName','displayEvasion','\x5cI[%2]\x5cC[16]%1\x5cC[0]','isUnderAnimation','isBattlerTargeted','alive\x20enemies\x20not\x20target','removeBuffsAuto','_lastAction','svActorHorzCells','Sprite_Battler_initMembers','battlerShadowScaleX','setEnemyWindowMode','CmdIconAutoBattle','jsCritRateAsTarget','ActSeq_Movement_WaitForJump','testApply','offsetY','isBattlerGrounded','drawStates','_cursorSprite','vertCells','isAutoBattleCommandEnabled','isCommandEnabled','ActSeq_Mechanics_CustomDmgFormula','setupBattleCoreData','isMVAnimation','lifeSteaItem','_targetDamage','refreshBattlerMotions','declareGlobalVariables','_targetX','createEnemyNames','paySkillCost','createShadowSprite','SLEEP','NameLegacy','updateStateIconSprite','battleDisplayText','HITTYPE_MAGICAL','ActSeq_Impact_TimeScale','_enemyWindow','_defeatedEnemies','displayReflection','addTextToCombatLog','Scene_Battle_onActorOk','_battlerHue','Scene_Battle_logWindowRect','Game_BattlerBase_initMembers','ActSeq_Mechanics_PtbConvert','enemyMpGaugeRate','statusWindowRectXPStyle','createSeparateDamagePopups','callUpdateHelp','_updateTargetValue','remove','isDrain','bitmapWidth','ActSeq_Camera_FocusPoint','ActSeq_Mechanics_AnalyzeWeakness','addChildAt','_uiContainer','lifeStealTrait','battleCorePreBattleCommonEvent','enemyHpGaugeRate','sortEnemies','isChanting','startMotion','drawActorLevel','applyHardDamageCap','isDuringNonLoopingMotion','drawItemStyleIcon','updateShadowPosition','right','Game_BattlerBase_eraseState','hue','DisplayAction','Game_Action_itemTargetCandidates','Formula','cancelHpLifeSteal','scope','compatibilityVisible','Game_Battler_performEvasion','\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','addBattleCoreAutoBattleStartupCommand','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','#ffffff','gainFullActionsPTB','svShadow','setupBlueRedInvertImpactFilter','enemyShowParametersIfDefeated','ActSeq_Mechanics_SwapWeapon','ENEMY_OFFSET_Y','battleStatusWindowAnimationContainer','_enemyWindowMode','close','addAutoBattleCommand','autoSelectLastSelected','SceneManager_push','status','\x5cC[6](Actions\x20%2%1\x5cC[6])\x5cC[0]','TextFmt','ActSeq_Set_SetupAction','startGrow','StyleOFF','getSpecificBattlerKeyTarget','ActSeq_Grid_AnimationIDAtNode','Game_Actor_makeActionList','MessageWait','isEffecting','Interrupt','_indent','BattleEndEvent','displayCurrentState','Mirror','LIGHT','maxWidth','MP_Flat','isDTB','-----','AntiTintUiElements','_effectDuration','Sprite_Battler_updateMain','applyTargetFilters','addWeaponSwapCommand','includes','some','Window_BattleLog_performMagicEvasion','HelpStatus','blt','paramBuffRate','onStaticEnemyBitmapLoad','drawingAreaWidth','process_VisuMZ_BattleCore_CommonEventKeys','_inBattleStatusMode','setBattlerFlip','placeTimeGauge','WaitForAngle','addAutoBattleCommands','addedDebuffs','measureTextWidth','Enable','_targets','applyGlobal','createPageButtons','_battleCoreBattleStartEvent','_tempEquipCheck','AttachStateOffsetX','isOpponent','applyForcedGameTroopSettingsBattleCore','aspect','drawDarkRect','pages','_visibleDuration','itemEffectGainTp','_updateCursorArea','create','param','_growEasing','updateHpGaugePosition','drawActorSimpleStatus','startMove','loadBattleback2','message2','maxCommands','getNextSubject','displayChangedBuffs','MaxMP','makeSuccess','PosOffsetY','createRateJS','_battleBalloonQueue','ActSeq_Set_WholeActionSet','initMembersBattleCore','battleCommandName','_partyWindow','updateAttachmentSprites','ANTI_TINT_UI','Game_Temp_requestAnimation','addStateTurns','changeBattlebacks','drawActorBuffTurns','Game_BattlerBase_refresh','pattern','_shadowSprite','setupBattlebackBattleCore','Strength','updateRefresh','updateSkew','ActSeq_Impact_ShockwavePoint','pageOffsetX','parallaxHue','regenerateAll','OffsetY','ActSeq_Mechanics_EmulateGuardEffect','ActSeq_Impact_ShockwaveCenterTargets','currentClass','showHelpWindow','isActor','toLowerCase','battlerSprites','ActSeq_Animation_PlayAtCoordinate','index','drawActorFace','isBattleMember','getTraitSetKeys','Window_BattleStatus_initialize','HP_Rate','updateBattlebackBitmap1','ActSeq_Animation_CastAnimation','battlerName','StateIconOffsetX','_backAttachmentSprite','drawComboText','addBattlerBuffsDebuffs','_growY','processOk','alphabetic','checkCacheKey','resetResultSwitches','_enemySprite','Game_Action_clear','_effectsContainer','isCurrentItemEnabled','findIndex','setBattlePortrait','action','isActiveTpbReady','hpDamageFmt','_opacityDuration','clearTargetBattlerKey','length','isForOne','update','repositionEnemiesByResolution','options','Window_BattleEnemy_hide','lastBattleSkill','ActSeq_Grid_PushFromTargetNode','call','IconStypeNorm','Sprite_Enemy_createStateIconSprite','clear','BattleLog','getSkillIdWithName','hitText','CriticalDuration','EndBattlePopups','debuffHelpFmt','retreat','addSkillCommands','TextAlign','getHalfActionsPTB','commandNameWindowCenter','ActSeq_Mechanics_StbRemoveExcessActions','inBattleStatusWindowRect','isDisarmLifeSteal','updatePhase','Window_BattleLog_displayTpDamage','isPreviousSceneBattleTransitionable','targetObject','_enemyMultiTargetWindow','_commandNameWindow','cancelButtonText','createWeather','SideviewSelect','smooth','needsActorInputCancel','drawItemActorSprite','not\x20focus','WaitForZoom','isAppeared','-%1','BattleManager_initMembers','VisuMZ_3_ActSeqCamera','terminate','command301','lukEffectRate','cancelTargetSelectionVisibility','logActionList','isMagicSkill','displayTpDamage','Scene_Battle_startEnemySelection','criticalDmgRate','_isProjectile','ActSeq_Impact_MotionBlurScreen','cutinExit','placeGauge','OverallFormulaJS','_requestRefresh','hasSvBattler','alive\x20battlers','_phase','pow','criticalDmgFlat','missed','removeDamageSprite','performShakeFlinch','repeats','ActSeq_Mechanics_AddState','Game_Interpreter_updateWaitMode','FvAniCenterScreen','ActSeq_Grid_AnimationTypeAtNode','text','ArRedRate','_colorType','Window_BattleStatus_drawItemImage','PopupPosition','updateStatusWindowPosition','playOnceParallelTroopPage','value1','MultiTarget','ActSeq_Motion_MotionType','isHiddenSkill','all\x20actors','startIcon','Scene_Options','drawItemImagePortraitStyle','States','waitForNewLine','meetsUsableItemConditions','weaponTypes','_currentActor','ActSeqImpact','description','sideview_ui','finishActionSet','CastCertain','requestAnimation','_injectAnimationSprite','\x5cI[%1]\x5cC[%3]%2','isGuardLifeSteal','_shadowScaleX','_tpbState','process_VisuMZ_BattleCore_PreBattleCommonEvent','dead\x20battlers','BattleManager_endAction_ComboWindow','BattleManager_checkBattleEnd','itemEffectAddAttackState','<CUSTOM\x20ACTION\x20SEQUENCE>','Game_BattlerBase_canGuard','changePaintOpacity','PreStartBattleJS','isTpb','weatherPower','mpDamageFmt','critical','autoBattle','ActionEndUpdate','getBattlePortraitOffsetY','value2','setBattler','GetActionSequenceSpecialTarget','Game_BattlerBase_meetsUsableItemConditions','performSubstitute','ActSeq_Cutin_AddVisualCutinEffect','isDisplayEmergedEnemies','addFightCommand','EscapeSuccess','canAttack','updateCallMenu','startOpacity','guardMpLifeSteal','isSpriteVisible','isImmortal','destroy','compareEnemySprite','skillId','onBattleStartBattleCore','Game_Temp_initialize','_motionType','customDamageFormula','Sprite_Actor_updateBitmap','loadBattleback1','battleGrow','createStateSprite','$target','...','battleCommandIcon','isBuffAffected','BattlebackScale','DamageStyles','commandStyle','battlerShadowScaleY','ActSeq_Mechanics_PtbFullHalfAction','redrawForGaugeRate','flashDuration','startAction','\x5cC[5](Turns\x20%2%1\x5cC[5])\x5cC[0]','BattleLayout','VisuMZ_3_FrontviewBattleUI','WaitForOpacity','Skill-%1-%2','traitObjects','AutoNotetag','prev\x20target','_battlerKeyCache','getDefeatedEnemies','ActSeq_Mechanics_CtbOrder','applyEasing','swapEnemyIDs','normalHelp','ShowPopup','SHOW_BUTTON','concat','_totalValue','characterName','thrust','makeDamageValue','ConvertCount','invokeAction','Sprite_StateIcon_updateFrame','_angleWholeDuration','EscapeFailureJS','Window_BattleActor_show','customFontFace','_lastEnemy','shadow','inHomePosition','_text','showEnemyAttackAnimation','uiInputPosition','PostEndActionJS','JS\x20%1END\x20TURN','helpWindowRect','isCharging','growBattler','effects','svAnchorX','PrioritySortActors','turn','updateBorderStyle','USER-DEFINED\x202','Window_Options_statusText','GroupDigits','STATUS','battleMove','WindowWidth','updateStyleOpacity','troop','isOpenAndActive','ActSeq_Animation_WaitForAnimation','expRate','ActionItemMsg','expTotal','removeBattleBalloon','isRightInputMode','_battleCoreBattleResumeAfter','Scene_Battle_terminate','ScaleUp','svAnchorY','_stateSprite','ItemID','FlashDuration','_angleDuration','PreStartTurnJS','isBattleFlipped','ActSeq_ChangeSkew','_duration','createAnimationContainer','_flashDuration','%1Apply%2JS','performMoveToPoint','drawItemStatusListStyle','Game_Enemy_transform','getEnemyIdWithName','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','hpAffected','bind','_onceParallelInterpreters','Parse_Notetags_HelpDescription','ARRAYFUNC','isAtbChargingState','ActSeq_Mechanics_OtbOrder','result','ParseArmorNotetags','649882haquky','battlerSmoothImage','ShuffleArray','isAnyoneSpinning','clearBattleBalloons','ActSeq_Inject_AnimationPauseResume','drawItemStatusXPStyle','SmoothImage','displayItemMessage','hardDamageCap','setHelpWindowItem','Game_Interpreter_command283','normal','_damageContainer','increaseTotal','emulateActionEffect','pause','drawItemImageXPStyle','Window_BattleActor_hide','children','ActorJS','setBattleCameraOffset','getReturnWindow','getBattlePortraitOffsetX','ActSeq_Cutin_EndVisualCutinEffectAll','onEncounterBattleCore','Scene_Battle_createCancelButton','dead','ParseStateNotetags','svbattler','portraitFlipVert','basicGaugesY','onActorCancel','enemyNames','_statusWindow','battleProjectiles','VisuMZ_3_ActiveChainSkills','WaitComplete','PreApply%1JS','alive\x20actors\x20not\x20user','alterChange','in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.','Game_Battler_clearMotion','battler','ParseClassNotetags','actionBattleCoreJS','displayCritical','StatusWindowAttachmentFront','CalcActionSpeedJS','isSpriteVS8dir','createAttachedSprites','ActSeq_Impact_ShockwaveEachTargets','anchorY','_homeX','popupDamage','Window_BattleLog_performActionStart','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','setupShockwaveImpactFilter','STRUCT','all\x20enemies','motionSpeed','makeData','rate','getSkillTypes','adjustFlippedBattlefield','startEnemySelection','_battlePortrait','currentAction','Scene_Battle_partyCommandWindowRect','Sprite_Battler_update','commandNameWindowDrawBackground','WtypeId','requestMotionRefresh','BattleManager_invokeCounterAttack','bitmap','actorCommandEscape','helpAreaBottom','itemHit','parse','playBattleVoice','Game_Action_evalDamageFormula','isInputting','Game_Action_apply','DistanceX','preparePartyRefresh','frontviewSpriteY','performWeaponAnimation','ActSeq_Impact_MotionTrailCreate','Game_Map_battleback2Name','AspectColor','isNextScene','getMenuImage','attachSpritesToDistortionSprite','isSkewing','toUseBoostPoints','ActSeq_Movement_Opacity','ActSeq_Animation_ShowAnimation','ConfigManager_applyData','BindCommonEventKeysForGroup','drawBattlerData','createBattleFieldContainer','addDebuff','isBypassDamageCap','prototype','isSkill','FocusX','updateEffectContainers','visualCutinPortraitIndex','_floatEasing','dragonbonesData','EscapeFail','SETTINGS','BattleVictoryJS','forceWeaponAnimation','playCursor','Debuffs','_updateCursorFilterArea','guardLifeSteal','makeTargetsBattleCore','motionIdle','setValue','_aspectData','partyCommandWindowRect','weaponImageId','charging','JS\x20%1END\x20ACTION','executeHpDamage','Scene_Boot_onDatabaseLoaded','ResetFocus','glitch','_index','makeActions','shouldDisperseDamage','ActSeq_DB_DragonbonesMotionAni','_targetOffsetX','Defeat','Game_Battler_startTpbTurn','_logWindow','VariableHeal','WaitForCamera','MUSIC-NOTE','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','ARRAYNUM','pageButtonPosition','StatusWindowAttachmentBackOffsetX','updateBattleProcess','onEscapeSuccess','Game_Action_needsSelection','ShowFailure','StartTurnMsg','nextActor','TP_Flat','_nameTempVisibleDuration','_actorCommandWindow','Game_Temp_requestBalloon','drawActorIcons','startAttackWeaponAnimation','missile','sleep','autoBattleAtStart','isBattleTest','pointY','isForAnyoneFocusFriends','ActSeq_Impact_MotionBlurTarget','forceMotion','Battle\x20Mechanic\x20found\x20within\x20%1\x20#%2\x20%3!\x0a','ESCAPE','_cursorArea','ActSeq_Impact_BlueRedInvert','_animationCount','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','setHome','isGrowing','updateDuration','makeTurnsText','DistanceAdjust','isAtbCastingState','ActSeq_Animation_ItemAnimation','Targets','_showWeapon','NameOffsetY','processActorCommandCancelTPB','alive\x20battlers\x20not\x20user','return\x200','isNextSceneBattleTransitionable','angle','_bypassCanCounterCheck','stepBack','Radius','invokeCounterAttack','drawActorGraphic','performReflection','maxLines','MotionType','Sprite_Weapon_loadBitmap','getStateDisplay','itemEffectAddNormalState','ActSeq_Mechanics_ActionEffect','makeTargetSelectionMoreVisible','_escapeRatio','visible','numTargets','HelpOptions','setActionState','extraPositionScaledY','VisuMZ_2_BattleSystemCTB','clearActiveWeaponSlot','noSimilarSTypes','addOnceParallelInterpreter','addStatusCommand','_preBattleCommonEvent','stateRate','setupDamagePopup','WaitForProjectile','_autoBattle','Class-%1-%2','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','ActSeq_Grid_RemovePassiveStatesFromNode','StatusGraphic','Enemy','selectLast','isTeamBased','LUK','stopInjectAnimation','needsInputWindowChange','StepDistanceX','StatusWindow_RectJS','makeSpeed','victory','CommandWidth','item','value','Sprite_Actor_createStateSprite','forceEscapeSprite','cancelMpLifeSteal','Game_Map_encounterList','resetTextColor','Scene_Battle_windowAreaHeight','requestRefresh','???','contains','battleCamera','_buffTurns','regionId','BattleManager_isTpbMainPhase','StateOverlayOffsetY','SvBattlerSolo-%1-%2','_hue','isBattlerFlipped','ComboWindow_DrawJS','ShowWeapon','autoBattleUseSkills','startPartyCommandSelection','arRedFlat','updateBorderSprite','deadMembers','_forceAction','getDamageStyle','commandNameWindowDrawText','BattleGridSystem','createStateIconSprite','COBWEB','command283','_growDuration','processRandomizedData','powerDownColor','AutoBattle','%1\x20%2:\x20%3\x20is\x20missing\x20the\x0a','statusDescription','RegExp','drawActorBuffRates','match','_colorFilter','VisuMZ_3_BoostAction','_actor','ApplyImmortal','setBattlerFacePoint','graphicType','Index','findTargetSprite','ActionAnimation','svBattlerShadowVisible','wait','snapForBackground','_buffs','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','EVAL','attackAnimationId1','VisuMZ_4_IconBalloons','DamageType%1','refreshRequest','isOptionsCommandAdded','addActor','createAutoBattleWindow','performFlinch','gainHalfActionsPTB','drawDebuffs','isPartyCommandWindowDisabled','CheckDamageFormulaForMechanics','abnormal','drawEnemyBattler','SkewX','string','normalColor','faceWidth','isDeathStateAffected','628056YwtBev','ActSeq_Mechanics_DeathBreak','Item','removeCurrentAction','_tpbNeedsPartyCommand','actorCommandWindowRect','AutoAddState','DTB','ExtraSettings','inBattle','Height','getAttackMotion','drawSingleSkillCost','_skewDuration','CastPhysical','ActSeq_Mechanics_PtbAlterCost','ActSeq_Animation_BalloonIconRange','positionOffsetX','hitsDmgFmt','ActSeq_Movement_MoveBy','makeCommandList','resetFontSettings','autoRemovalTiming','processAnimationRequests','ActionCount','Scene_Battle_start','isSubjectValidForAnyoneSelect','jump','Equipment\x20Prediction,\x20Action\x20Comparisons,\x20and\x20more.','ForceDeath','battleLayoutStyle','+%1','tone','clearFreezeMotion','buffAdd','random','Parse_Notetags_Targets','evalDamageFormulaBattleCore','changeAtbChargeTime','getDualWieldTimes','IconStypeMagic','time','_jumpMaxHeight','_inputting','exit','targetsForFriends','currentSymbol','setSTBExploited','StatusWindowSkinHide','PreStartActionJS','canAttackBattleCore','Spriteset_Battle_createLowerLayer','maxBattleMembers','+%1\x20MP','svActor','ActSeq_DB_DragonbonesTimeScale','randomTargets','%1EndTurnJS','FlinchDistanceY','setFullActionsPTB','ScaleY','\x5cI[%1]%2','counterAttack','ActSeq_Impact_ZoomBlurTargetCenter','Sprite_SvEnemy','ShowAddedState','jsScaleUp','Scene_Battle_createAllWindowsIBS','updateBossCollapse','createActorCommandWindow','_flinched','isJumping','Targets1','Window_ActorCommand_initialize','setWaitMode','FocusY','removedStateObjects','Scene_Battle_stop','VisuMZ_3_BattleVoices','softDamageCap','targetActionSet','BattleSystemCTB','check_VisuMZ_BattleCore_DmgFormulaMechanics','obj','equips','parent','turnOrderChangeOTB','push','lastFilename','setupDesaturateImpactFilter','enemy','removedBuffs','Game_System_initialize','CmdTextAlign','265FiMZOf','ArPenFlat','itemRect','getBattlerKeyTargets','bitmapHeight','ActionSkillMsg2','QUESTION','parseLocalizedText','Sprite_Actor_updateFrame','abort','stepFlinch','addCombatLogCommand','autoMeleeMultiTargetActionSet','GUARD','_states','process_VisuMZ_BattleCore_BaseTroops','Scene_Battle_update','isPlaytest','Scene_Battle_createAllWindows_ComboWindow','DefaultStyle','_scene','isTpbMainPhase','open','_targetSkewX','_targetBattlerKey','Sprite_Enemy_updateStateSprite','finalizeScale','ComboWindow_RectJS','processBattleBalloonRequests','isShownOnBattlePortrait','Window_BattleLog_displayCurrentState','PortraitScale','resetBreakShield','AspectNameFmt','_executedValue','Exploiter','VoiceLine','displaySubstitute','gainStoredBoostPoints','_updateColorFilter','_visualHpGauge_JustDied','Angle','Scene_ItemBase_applyItem','battlelog','CriticalHitRate','FvAniEachTarget','_attackAnimationId','skill','setStateTooltipBattler','Window_BattleLog_performAction','▼%1','CriticalColor','_forcedHomeY','_shake','VisuMZ_2_BattleSystemBTB','commandName','split','Game_Battler_onTurnEnd','BattleStartEvent','updateShadowBattleCore','%1\x20%2','CheckFormulaMechanics','selectNextCommand','command236','findSymbolExt','pageButtons','ActSeq_Impact_Oversaturate','isTriggered','setBackgroundType','previousActor','gainHp','slice','callOptions','_displayBattleCoreTransitionErrorMsg','_mainSprite','isForOpponentBattleCore','destroyDamageSprite','changeBattlerOpacity','command3011','hasBeenDefeatedBefore','_performDamageMotion','drawGauge','VisuMZ_3_VisualCutinEffect','setupMotionBlurImpactFilter','partyCommandWindowRectXPStyle','escape','currentMaxValue','_statusType','setTroopPage','_handlers','Window_BattleLog_performRecovery','_borderPortraitTargetX','makeAutoBattleActions','loadWindowskin','_dragonbonesSpriteContainer','stop','passive','_lines','makeBattleCommand','getAspectData','_canLose','_createDamageContainer','isBattleSys','_shakeFlinchPower','updateBattlebackBitmap2','isBigCharacter','ActSeq_Mechanics_EnemyEscape','itemLineRect','jumpBattler','setHalfActionsPTB','isAnimationShownOnBattlePortrait','special','JS\x20%1END\x20BATTLE','ActSeq_Mechanics_StateTurnsChangeBy','canMove','removeChild','canUse','allBattleMembers','moveToStartPosition','_targetIndex','windowAreaHeight','applyDamageCaps','_subject','36256GKDbRz','Scene_Battle_updateBattleProcess','onSkewEnd','PreApplyAsUserJS','isValid','disarmMpLifeSteal','turnCount','animationId','BattleManager_processVictory','ActSeq_Animation_SkillAnimation','Status\x20is\x20currently\x20normal.','inputtingAction','_returnWindow','onBattleStartOnceParallels','createChildSprite','QoL','_spriteset','disarmLifeSteal','hpDamage','PartyCmd','StatusWindowAttachmentFrontOffsetY','parallaxScrollXinvertEnemy','_enemy','command119','_motionCount','casting','trueRandomTarget','jsScaleDown','updateCommandNameWindow','Turns','initialize','none','comboWindowOffsetX','_skillWindow','join','_createClientArea','WeaponTypeID','performDamage','startSpin','_interpreter','addItemCommand','_totalHits','usePremadeActionSequence','isForDeadFriend','turns','multiTargetWindowRect','VisuMZ_2_BattleSystemPTB','playCancel','createHelpWindowBattleCore','dimColor1','Scene_Battle_createPartyCommandWindowIBS','ActSeq_Mechanics_AddBuffDebuff','_multipliers','setupCriticalEffect','_stypeIDs','ARRAYSTRUCT','deselect','WaitForEffect','\x5cC[0]','isSceneBattle','_jumpWholeDuration','refreshCursor','EmergeText','drawBuffs','revertTpbCachedActor','skills','StatusWindowAttachmentBackOffsetY','battleCameraData','ActSeq_Mechanics_EmulateAttackEffect','ActSeq_Target_PrevTarget','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','SkillItemBorderCols','Scene_Map_updateCallMenu','JS\x20%1REGENERATE','\x5cI[%1]\x5cHEXCOLOR<%3>%2','performLifeSteal','processDrawEnemyBattler','allIcons','WaitForMovement','applyImmortal','toUpperCase','jsAccuracyAsUser','ActSeq_Animation_AttackAnimation2','canSingleOrMultipleSelect','anchorX','iconText','Spriteset_Battle_updateActors','isTpbReady','pha','skillItemWindowRectBorderStyle','textAlign','pageup','fillRect','AutoBattleRect','alterPriority','AddHpGaugeOption','canAlterActionCostPTB','ActSeq_Horror_NoiseRemove','_jumpDuration','requestFauxAnimation','alignBattleCoreDamageSprite','DamageStyleList','opacitySpeed','startDamagePopup','updatePositionBattleCore','ForceExploiter','ENEMY_OFFSET_X','Scene_Map_initializeAfter','Skill','CheckActSeqProjectileVersion','Increases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','ActSeq_Mechanics_BtbGain','CheckVisibleSwitchNotetags','drawLineText','ActSeq_Element_AddElements','USER-DEFINED\x201','updateCancelButton','map','ChantStyle','itemLifeStealRate','isIncludedInEnemyWindow','CurrentTurn','horzCells','CheckMapBattleEventValid','PostDamageJS','MaxHP','battleOpacity','_preemptive','playReflection','ActSeq_Element_ForceElements','angleDuration','All\x20Allies','loadPicture','onTurnEnd','Window_BattleActor_processTouch','silentHomeMove','createDamageCounterWindow','shift','Game_BattlerBase_addNewState','MAXHP','addAttackCommand','onRegeneratePlayStateAnimation','_pageupButton','_regionBattleback2','apply','user','Game_Action_setAttack','command357','friendsUnit','executeDamage','moveToStartPositionBattleCore','Window_BattleLog_displayCritical','updateMain','battleAnimation','clearAllVisualCutins','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','iterateBattler','skewBattler','Game_Action_updateLastTarget','isDying','updateJump','stbGainInstant','addSingleSkillCommands','isCertainHit','WaitForExit','list','applyBattleCoreHitRateJS','isPTB','PostRegenerateJS','ActSeq_Mechanics_HpMpTp','Game_Party_addActor','_bypass_applyBattleCoreHitRateJS','Scene_Battle_helpWindowRect','updateBattlerContainer','ShowCritical','damageText','ActSeq_Angle_Reset','temporaryVisibile','portraitType','undecided','_cancelButton','initMembers','addImmortal','ActSeq_Cutin_WaitForExit','ActionEffect','performCounter','alterType','isUndecided','enemyHiddenParameter','MUSICNOTE','Game_Action_isForAliveFriend','_actionInputIndex','VisuMZ_2_HorrorEffects','updatePageButtonVisibility','_tempBattler','skillWindowRect','getColor','PostDamageAsUserJS','balloonId','showAnimation','JS\x20%1START\x20TURN','ActSeq_Cutin_EndVisualCutinEffectType','move','buffIconIndex','%1-%2','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','_shadowScaleY','_skewWholeDuration','isEnemy','updateCustomActionSequence','_waitMode','stateColor','createPartyCommandWindow','ActSeq_Mechanics_VariablePopup','damageOffsetX','updateHelp','drawTextTopAligned','battleCommands','fontFace','Game_Action_isForAll','preemptive','ext','checkTpbInputOpen','commandSymbol','updateShadowScale','DamageRate','startActorSelection','setupHpGaugeSprite','wtypeId','compareBattlerSprites','context','battleback2Name','helpWindowRectBorderStyle','applyResultSwitches','sortDamageSprites','Sprite_Animation_targetSpritePosition','isForAliveFriend','buffColor','processTouch','tpbActorSwitchConditionsMet','createEffectActionSet','_item','_lastMpDamage','battleCoreTpbMainPhase','showNormalAnimation','LifeStealRegExp','createStatesWindow','getItemDamageAmountLabelBattleCore','applyItem','buff','updateLink','BattleManager_endAction','createHelpWindow','cutinEnter','_frontAttachmentSprite','StartName','waitForOpacity','inputting','traitSet','extraHeight','MAXMP','waitForJump','createDistortionSprite','isBusy','createKeyJS','isPlaying','scale','spinBattler','_additionalSprites','enemyShowParametersAlways','VisuMZ_3_StateTooltips','ActSeq_Mechanics_StbExtraAction','ActSeq_Weapon_ClearActiveWeapon','changeCtbChargeTime','Sprite_Battler_startMove','ShowCurrentState','updateBattleBalloons','2xIuzNI','ColorManager_mpColor','updateActors','equipSlots','battleback1Name','VariableDmg','evade','sliceMin','drawItemImageListStyle','alive\x20battlers\x20not\x20target','createString','Window_BattleLog_popBaseLine','setMoveEasingType','guard','EnableSoftCap','CmdIconStatus','isFTB','ActSeq_Set_TargetActionSet','BgType','setBalloonPose','▲%1','ActSeq_Movement_Jump','PopupOffsetY','processHandling','isActiveTpb','isGuard','createTroopNote','ShowMissEvasion','AddOption','_partyCommandWindow','isOverworld','singleSkill','Variable','NameOffsetX','iconWidth','_lastPluginCommandInterpreter','touchUI','#%1','processExtendTroopMembers','processRefresh','animationWait','makeTargets','getNextSubjectFromPool','_padding','stepForward','Game_Battler_performMiss','makeBuffHelpText','AutoBattleBgType','stateMotionIndex','damageContainer','ActSeq_Impact_Negative','performEvasion','adjustPosition_ScaleDown','hitsHealFmt','_target','getBattlerKeyTargetReplacement','addMeleeReturnActionSet','EscapeSuccessJS','addChildToBack','loadSvActor','ScaleDown','_baseY','JS\x20%1START\x20BATTLE','finishActorInput','CriticalDmgFlat','updateStart','addExtendedTroopMembers','GRID\x20MOVE','revealNewWeaknesses','max','getDragonbones','_hpGaugeSprite','Enemy-%1-%2','_growWholeDuration','isChangingOpacity','makeUniqueNames','BreakShields','isNameTemporarilyVisible','commandStyleCheck','removeAnimationFromContainer','chant','Scene_Battle_selectNextCommand','performActionStart','_executeHpDamage','_stateIconSprite','SkillItemStandardCols','visualCutinPortraitHue','AGI','_enemies','ArPenRate','CreateActionSequenceTargets','evaded','clearResult','targetObjects','isForOneBattleCore','hidden','VisuMZ_2_DragonbonesUnion','_enemyID','gainMp','drain','jsCritRateAsUser','ARRAYJSON','_currentAngle','contentsOpacity','mpColor','overworldBattleback2Name','isFloating','applyData','_actions','setCommonEvent','actions','ParseEnemyNotetags','clearForcedGameTroopSettingsBattleCore','isItem','GetActionSequenceSpecialTargetWithFlags','_action','clearGlobalVariables','active','AttackAnimation','Window_BattleLog_performMiss','processCancel','⚠⚠⚠\x20Warning!\x20⚠⚠⚠\x0a\x0a','createPartyCommandWindowBattleCore','Window_BattleLog_performReflection','svActorVertCells','WaitCount','border','isPreviousScene','_makeFontNameText','isActing','regenerateAllBattleCore','addShowHpGaugeCommand','clearDamagePopup','current\x20target','_hideAllIcons','alterCost','setVisibleUI','AlphaFilter','iconIndex','isForAnyone','commandOptions','damagePopupOffsetY','process_VisuMZ_BattleCore_PluginParams','nameY','isAnyProjectilePresent','FaceAway','Sprite_Battler_setBattler','loadEnemy','pagedown','icons','battleSys','isBTB','default','Rate','min','getItemDamageAmountTextBattleCore','Game_Action_executeMpDamage','ShakeFlinch','Window_BattleLog_displayEvasion','_namesCount','Scene_Battle_createActorCommandWindow','createAnimationSprite','ActSeq_Motion_PerformAction','Window_BattleLog_update','Actions','_endBattle','base','addSingleSkillCommand','makeBuffName','AS\x20USER','traits','Amp','isNegativeLifeSteal','HpGaugeOffsetY','attackAnimationId2','getHardDamageCap','process_VisuMZ_BattleCore_DamageStyles','BattleManager_startAction','LOVE','SkipPartyCmd','version','normalIcon','addGuardCommand','resizeWindowXPStyle','unshift','CreateCutinSettings','hide','selectNextActor','AniDuration','CommandAddAutoBattle','ATTACK','pageButtonX','setupNegativeImpactFilter','displayedParams','Normal','%1EndBattleJS','message4','ActSeq_Movement_WaitForSpin','performAttack','_motion','battleEffect','VisuMZ_3_ActSeqImpact','PostDamageAsTargetJS','AspectIcon','passiveText','priority','Window_BattleEnemy_show','isStatusAffected','die','loadBitmap','animationBaseDelay','drawItemStyleIconText','ReflectAnimation','ActSeq_Mechanics_WaitForEffect','Scene_Options_maxCommands','fadeShiftY','addBattleCoreAutoBattleStyleCommand','StatusWindowAttachmentBack','StatusWindowSelectableBackHide','getBattlePortrait','ActSeq_Movement_WaitForOpacity','createCommandVisibleJS','ActSeq_Movement_WaitForMovement','HitFlat','SILENCE','isCommonEventReserved','_callSceneOptions','Game_Action_executeHpDamage_ComboWindow','performMiss','canEscape','_waitCount','BattleManager_selectNextCommand','_freezeMotionData','textSizeEx','isForRandomBattleCore','MpGaugeOffsetY','waitForFloat','isDead','Exploited','ActSeq_BattleLog_WaitForNewLine','setAttack','NO\x20ACTOR\x20FOUND!','BattleManager_updatePhase','Item-%1-%2','_underAnimationContainer','Game_Battler_regenerateAll','callOkHandler','changeTurnOrderByCTB','setupMotion','icon','validTargets','JSON','aliveMembers','StatusWindowAttachmentFrontOffsetX','statusWindowRectDefaultStyle','endInBattleStatus','waitForAnimation','addBattlerAspect','ParseItemNotetags','allowCollapse','process_VisuMZ_BattleCore_Action_Notetags','trim','_surprise','StartTurnWait','isNonSubmenuCancel','updateNameTempVisibility','displayReflectionPlayBack','autoMeleeSingleTargetActionSet','_weather','Scene_Battle_itemWindowRect','refreshActorPortrait','_enemySprites','ActSeq_Zoom_Reset','Scene_Battle_needsInputWindowChangeIBS','damagePopupOffsetX','_lineHeight','reduce','flipVisualCutinHorz','Auto-Battle,\x20Battle\x20AI,\x20Damage\x20Prediction,\x20Damage\x20Multiplier\x20Display\x0a','NameAsTarget','isForAliveFriendBattleCore','requestBattleBalloon','createBattleUIOffsetX','selectPreviousCommand','clearFreezeMotionForWeapons','createAttachmentSprites','Sprite_Battler_setHome','commandEscape','Slot','jsScaleToFit','isForFriend','isCustomBattleScope','drawActorName','clearActiveWeaponSet','next\x20target','offsetX','hasStaticSvBattler','lineRect','_battler','TimeScale','enemyId','playOnceParallelInterpreter','alive\x20opponents','useDigitGrouping','setBattleImpactTimeScale','reserveCommonEvent','clearBattleRefreshRequest','negativeLifeSteal','createBattleUIOffsetY','Parse_Notetags_Action','ActorOffsetY','partyCommandWindowRectBorderStyle','LIGHT-BULB','redraw','Window_BattleLog_pushBaseLine','round','MotionSpeed','target','refreshMotion','ActSeqProjectiles','start','missle','itemTextAlign','launchBattle','Balloon','placeStateIcon','setHorrorEffectSettings','createEnemyNameContainer','updateSpin','_stateTurns','ButtonAssist','Game_Map_battleback1Name','Actor','canUseItemCommand','opacityStart','notFocusValid','_targetAngle','BattleCore','replace','updateHomeMove','updateForceAction','XPActorDefaultHeight','_armorPenetration','ActSeq_Target_RandTarget','tpbCommandFight','ActSeq_Skew_WaitForSkew','SkewY','addGeneralOptions','gainBravePoints','changeAtbCastTime','_lastTpDamage','isAutoBattleCommandAdded','faceHeight','Scene_Battle_startActorCommandSelection','addChild','displayFailure','updateKeyboardKeys','Sprite_Actor_setBattler','requestDragonbonesAnimation','battleAngle','FollowTurn','_jumpHeight','atbInterrupt','getBattlePortraitFilename','HelpAutoBattle','Sprite_Battler_damageOffsetY','isForFriendBattleCore','weatherType','_back1Sprite','isOTB','setCursorRect','freezeTime','ActSeq_Grid_TraverseToNode','ShowAddedBuff','_forcedHomeX','selectedBattlers','startVisualCutin','iconHeight','excludeListing','EnemyOffsetX','isSideButtonLayout','statusText','performSTBExploiter','_totalDamage','_targetOpacity','Scale','canAddSkillCommand','Game_Battler_onBattleStart','createMultiTargetWindows','type','battleSkew','adjustPosition_ScaleUp','buffRemove','clearBattleCoreData','emulateAction','_svBattlerSprite','ActSeq_Movement_FacePoint','CriticalHitRateJS','addEscapeCommand','_battleCoreNoElement','frameCount','SkillItemMiddleLayout','performAttackSlot','isFrameVisible','show','_immortal','createUIContainer','battleUIOffsetY','drawText','alive\x20enemies\x20not\x20user','VisuMZ_1_SkillsStatesCore','isOnCurrentMap','minimumStayDuration','JumpToLabel','CastAnimation','commandRemember','onBattleEndBattleCore','lifeStealRate','hpHealingFmt','optDisplayTp','updateTargetPosition','ActSeq_Grid_AnimationJsAtNode','checkBattleEnd','damage','closeBattleActorWindow','NameAttachStateIcon','Game_Action_makeTargets','_drawTextBody','movement','dying','DefeatEvent','onHomeMoveEnd','faceRect','addOptionsCommand','ITEM','shouldHideBattleEndPopups','setupRgbSplitImpactFilter','adjustPosition_1for1','StartTurnShow','TpbGaugeOffsetX','createInnerSprite','CreateCommonEventKeys','MUSIC\x20NOTE','_targetGrowX','ChargeRate','performActionEndMembers','DEF','startFloat','_lastActor','-%1\x20MP','Sprite_Enemy_updateBossCollapse','allowRandomSpeed','_borderPortraitDuration','innerHeight','statusWindowRect','CmdIconEscape','buffValueFmt','loadSystem','WaitCount2','ActSeq_BattleLog_Clear','TpbGaugeOffsetY','performJump','Name','setLastBattleSkill','checkTpbInputClose','Window_SkillList_maxCols','ActSeq_Target_NextTarget','targetSpritePosition','SlotID','PostStartBattleJS','applyBattleCoreJS','Sprite_Gauge_smoothness','randomInt','isFlipped','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','PosOffsetX','Game_Interpreter_terminate','waitForMovement','startJump','createActorCommandWindowBattleCore','note','MotionFrameWait','StepDuration','targetDistortionSpritePosition','canBattlerMove','float','BaseTroopIDs','_angleRevertOnFinish','playEnemyAttack','Scene_Battle_startPartyCommandSelection','commandFight','CmdIconItem','ShowActorGauge','mmp','ActSeq_Horror_Clear','battlerKey','boxWidth','portraitFlipHorz','ActSeq_Movement_WaitForSkew','attackSkillId','TargetLocation','StyleON','enemyShowParametersIfBattleTest','Sprite_Actor_updateShadow','FUNC','createBattleBalloon','itemCri','PreDamage%1JS','1:1','toString','ParseSkillNotetags','Mute','_createCursorSprite','enemyTpGaugeRate','totalDmgFmt','selectAllEnemies','code','Window_BattleLog_performActionEnd','guardSkillId','normalText','isForNotUser','_targetOffsetY','targetBattlerContainerOpacity','attackTimesAdd','createBattleFieldBattleCore','isTickBased','_forcedBattlers','Game_Battler_performDamage','_baseTexture','updatePointAnimations','eraseState','removeStatesAuto','statusHelpDesc','autoBattleWindowRect','updateAngleCalculations','TextColor','getConfigValue','ActSeq_Mechanics_EmulateSkillEffect','AutoMeleeAoE','ChangeOrderBy','visualHpGauge','FvAniCenterAll','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','Window_BattleLog_displayFailure','Game_Action_makeDamageValueDisperse','_floatHeight','%1EndActionJS','makeHpDamageText','Window_BattleEnemy_initialize','Scene_Battle_onEnemyCancel','waitForEffect','Game_Troop_setup','process_VisuMZ_BattleCore_jsFunctions','ActSeq_BattleLog_WaitForBattleLog','applyGlobalCommonEventNotetags','Window_BattleLog_performEvasion','drawTurnsRemaining','doesPageHaveOnceParallelStart','startWeaponAnimation','SvMotionIdleMass-%1-%2','CalcEscapeRatioJS','setupChild','ShowPortraitsBorderStyle','isDamagePopupRequested','getWtypeIdWithName','ActSeq_Movement_MoveToPoint','isMoving','gainCurrentActionsFTB','ActSeq_BattleLog_AddText','13667600Nvxmkx','getLastPluginCommandInterpreter','setupBattleCoreAspects','autoBattleStart','Scene_Battle_isTimeActiveIBS','Window_BattleLog_clear','_svBattlerData','Sprite_Actor_update','_cacheTextWidth','VisuMZ_2_BattleSystemATB','showPortraits','ActSeq_Movement_HomeReset','Scene_Battle_onEnemyOk','updateGrow','PostApplyAsTargetJS','updateAttachedSprites','forceAction','collapse','Scene_Map_initialize','isFriendly','alive\x20friends','Game_Interpreter_PluginCommand','cameraDuration','isSceneChanging','displayAffectedStatus','_forActor','animationShouldMirror','AllowCollapse','ATK','EnableDamageCap','checkExtendTroopCompatibility','clearHorrorEffects','addLoadListener','setText','getAttackWeaponAnimationId','updateFloat','MP_Rate','430880IsnJRZ','CommandVisible','hitFlat','waitCount','SyncBuffExpire','_flipScaleX','gaugeLineHeight','Game_Action_executeDamage','displayMiss','_animationContainer','Scene_Battle_commandEscape','clearNameTempVisibility','createContents','EXCLAMATION','battleUIOffsetX','isAffectedByBreakShield','parameters','battleBalloon','createTargetsJS','_linkedSprite','\x5cC[4](Passive)','Spriteset_Battle_createBattleField','ShowSubstituteWait','Point','freezeFrame','isCancelTriggered','ActSeq_Grid_ActionAnimationAtNode','Pre','resetNameTempVisibility','attackStates','damageStyle'];_0x5220=function(){return _0x4d98ba;};return _0x5220();}const _0x46c6a8=_0x2a7f;(function(_0x27f402,_0x130876){const _0x523463=_0x2a7f,_0x291c03=_0x27f402();while(!![]){try{const _0x360274=-parseInt(_0x523463(0x602))/0x1*(-parseInt(_0x523463(0x923))/0x2)+parseInt(_0x523463(0xc02))/0x3+parseInt(_0x523463(0x80e))/0x4*(-parseInt(_0x523463(0x793))/0x5)+parseInt(_0x523463(0xc62))/0x6+parseInt(_0x523463(0x251))/0x7*(parseInt(_0x523463(0xb81))/0x8)+parseInt(_0x523463(0x735))/0x9+-parseInt(_0x523463(0xb5c))/0xa;if(_0x360274===_0x130876)break;else _0x291c03['push'](_0x291c03['shift']());}catch(_0x2d427c){_0x291c03['push'](_0x291c03['shift']());}}}(_0x5220,0x7a43b));var label=_0x46c6a8(0xa74),tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x2b0a56){const _0x1dc3f6=_0x46c6a8;return _0x2b0a56[_0x1dc3f6(0x489)]&&_0x2b0a56[_0x1dc3f6(0x56a)][_0x1dc3f6(0x4a3)]('['+label+']');})[0x0];VisuMZ[label][_0x46c6a8(0x154)]=VisuMZ[label][_0x46c6a8(0x154)]||{},VisuMZ[_0x46c6a8(0x239)]=function(_0x4e0056,_0x107319){const _0x3702da=_0x46c6a8;for(const _0x2e1240 in _0x107319){if(_0x2e1240[_0x3702da(0x712)](/(.*):(.*)/i)){const _0x2aed89=String(RegExp['$1']),_0x49d916=String(RegExp['$2'])[_0x3702da(0x85e)]()['trim']();let _0x9eec4d,_0x21402b,_0x31ffbd;switch(_0x49d916){case _0x3702da(0x18e):_0x9eec4d=_0x107319[_0x2e1240]!==''?Number(_0x107319[_0x2e1240]):0x0;break;case _0x3702da(0x691):_0x21402b=_0x107319[_0x2e1240]!==''?JSON[_0x3702da(0x650)](_0x107319[_0x2e1240]):[],_0x9eec4d=_0x21402b[_0x3702da(0x883)](_0x23d002=>Number(_0x23d002));break;case _0x3702da(0x721):_0x9eec4d=_0x107319[_0x2e1240]!==''?eval(_0x107319[_0x2e1240]):null;break;case _0x3702da(0x1e3):_0x21402b=_0x107319[_0x2e1240]!==''?JSON[_0x3702da(0x650)](_0x107319[_0x2e1240]):[],_0x9eec4d=_0x21402b['map'](_0xc749fa=>eval(_0xc749fa));break;case _0x3702da(0xa1e):_0x9eec4d=_0x107319[_0x2e1240]!==''?JSON[_0x3702da(0x650)](_0x107319[_0x2e1240]):'';break;case _0x3702da(0x988):_0x21402b=_0x107319[_0x2e1240]!==''?JSON[_0x3702da(0x650)](_0x107319[_0x2e1240]):[],_0x9eec4d=_0x21402b[_0x3702da(0x883)](_0x44943a=>JSON[_0x3702da(0x650)](_0x44943a));break;case _0x3702da(0xb1b):_0x9eec4d=_0x107319[_0x2e1240]!==''?new Function(JSON['parse'](_0x107319[_0x2e1240])):new Function(_0x3702da(0x6ba));break;case _0x3702da(0x5fd):_0x21402b=_0x107319[_0x2e1240]!==''?JSON['parse'](_0x107319[_0x2e1240]):[],_0x9eec4d=_0x21402b[_0x3702da(0x883)](_0x43be45=>new Function(JSON[_0x3702da(0x650)](_0x43be45)));break;case'STR':_0x9eec4d=_0x107319[_0x2e1240]!==''?String(_0x107319[_0x2e1240]):'';break;case _0x3702da(0x3c9):_0x21402b=_0x107319[_0x2e1240]!==''?JSON[_0x3702da(0x650)](_0x107319[_0x2e1240]):[],_0x9eec4d=_0x21402b[_0x3702da(0x883)](_0x33ea64=>String(_0x33ea64));break;case _0x3702da(0x63c):_0x31ffbd=_0x107319[_0x2e1240]!==''?JSON[_0x3702da(0x650)](_0x107319[_0x2e1240]):{},_0x4e0056[_0x2aed89]={},VisuMZ['ConvertParams'](_0x4e0056[_0x2aed89],_0x31ffbd);continue;case _0x3702da(0x845):_0x21402b=_0x107319[_0x2e1240]!==''?JSON[_0x3702da(0x650)](_0x107319[_0x2e1240]):[],_0x9eec4d=_0x21402b['map'](_0x1e8f06=>VisuMZ[_0x3702da(0x239)]({},JSON[_0x3702da(0x650)](_0x1e8f06)));break;default:continue;}_0x4e0056[_0x2aed89]=_0x9eec4d;}}return _0x4e0056;},(_0x513350=>{const _0x5bc665=_0x46c6a8,_0xc158be=_0x513350[_0x5bc665(0x106)];for(const _0x59fe6a of dependencies){if(!Imported[_0x59fe6a]){alert(_0x5bc665(0x63a)['format'](_0xc158be,_0x59fe6a)),SceneManager['exit']();break;}}const _0x21f03d=_0x513350[_0x5bc665(0x56a)];if(_0x21f03d[_0x5bc665(0x712)](/\[Version[ ](.*?)\]/i)){const _0x3c504b=Number(RegExp['$1']);_0x3c504b!==VisuMZ[label][_0x5bc665(0x9d7)]&&(alert(_0x5bc665(0x854)[_0x5bc665(0x1ba)](_0xc158be,_0x3c504b)),SceneManager[_0x5bc665(0x761)]());}if(_0x21f03d[_0x5bc665(0x712)](/\[Tier[ ](\d+)\]/i)){const _0x253fa0=Number(RegExp['$1']);_0x253fa0<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x5bc665(0x1ba)](_0xc158be,_0x253fa0,tier)),SceneManager[_0x5bc665(0x761)]()):tier=Math[_0x5bc665(0x968)](_0x253fa0,tier);}VisuMZ[_0x5bc665(0x239)](VisuMZ[label]['Settings'],_0x513350[_0x5bc665(0xb91)]);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x234410){const _0x1d4c7d=_0x46c6a8;let _0x4159da=[];for(const _0x38564c of _0x234410){_0x4159da=_0x4159da['concat'](VisuMZ[_0x1d4c7d(0x282)](_0x38564c));}return _0x4159da[_0x1d4c7d(0x2ed)](_0x387ced=>_0x387ced);},VisuMZ['ConvertActionSequenceTarget']=function(_0x1bd8aa){const _0x12e1b2=_0x46c6a8,_0x42d5a3=BattleManager[_0x12e1b2(0x808)]()['filter'](_0x2dd37e=>_0x2dd37e&&_0x2dd37e[_0x12e1b2(0x535)]()),_0xd95bf7=BattleManager[_0x12e1b2(0x80d)],_0x100271=BattleManager[_0x12e1b2(0x959)],_0x1f5b82=BattleManager['_allTargets']?BattleManager[_0x12e1b2(0x1e8)][_0x12e1b2(0x7da)](0x0):_0x42d5a3;_0x1bd8aa=_0x1bd8aa[_0x12e1b2(0x4ed)]()[_0x12e1b2(0xa28)]();if(_0x1bd8aa===_0x12e1b2(0x89f))return[_0xd95bf7];else{if(_0x1bd8aa===_0x12e1b2(0x9a8))return[_0x100271];else{if(_0x1bd8aa===_0x12e1b2(0x5b1)){if(_0x100271){const _0x145671=_0x1f5b82[_0x12e1b2(0x3bd)](_0x100271);return _0x145671>=0x0?[_0x1f5b82[_0x145671-0x1]||_0x100271]:[_0x100271];}}else{if(_0x1bd8aa===_0x12e1b2(0xa49)){if(_0x100271){const _0x317236=_0x1f5b82['indexOf'](_0x100271);return _0x317236>=0x0?[_0x1f5b82[_0x317236+0x1]||_0x100271]:[_0x100271];}}else{if(_0x1bd8aa==='all\x20targets')return _0x1f5b82;else{if(_0x1bd8aa===_0x12e1b2(0xc4a))return[_0xd95bf7][_0x12e1b2(0x5ba)](_0x1f5b82);else{if(_0x1bd8aa===_0x12e1b2(0x533))return _0x42d5a3['filter'](_0x498f69=>_0x498f69!==_0xd95bf7&&!_0x1f5b82[_0x12e1b2(0x4a3)](_0x498f69)&&_0x498f69[_0x12e1b2(0xa72)]());else{if(_0x1bd8aa===_0x12e1b2(0x802))return[VisuMZ[_0x12e1b2(0x586)]()];else{if(_0x1bd8aa[_0x12e1b2(0x712)](/SPECIAL (.*)>/i)){const _0x3b55f9=String(RegExp['$1'])[_0x12e1b2(0x7cb)](',')[_0x12e1b2(0x883)](_0x421482=>_0x421482[_0x12e1b2(0xa28)]());return[VisuMZ['GetActionSequenceSpecialTargetWithFlags'](_0x3b55f9)];}}}}}}}}}if(_0xd95bf7){if(_0x1bd8aa===_0x12e1b2(0xb70))return _0xd95bf7['friendsUnit']()[_0x12e1b2(0xa1f)]();else{if(_0x1bd8aa==='alive\x20friends\x20not\x20user')return _0xd95bf7[_0x12e1b2(0x8a2)]()[_0x12e1b2(0xa1f)]()[_0x12e1b2(0x2ed)](_0x180a83=>_0x180a83!==_0xd95bf7);else{if(_0x1bd8aa==='alive\x20friends\x20not\x20target')return _0xd95bf7[_0x12e1b2(0x8a2)]()[_0x12e1b2(0xa1f)]()[_0x12e1b2(0x2ed)](_0x2a361a=>_0x2a361a!==_0x100271);else{if(_0x1bd8aa===_0x12e1b2(0x38a))return _0xd95bf7[_0x12e1b2(0x8a2)]()[_0x12e1b2(0x702)]();else{if(_0x1bd8aa['match'](/FRIEND INDEX (\d+)/i)){const _0x1723e0=Number(RegExp['$1']);return[_0xd95bf7[_0x12e1b2(0x8a2)]()['members']()[_0x1723e0]];}}}}}if(_0x1bd8aa===_0x12e1b2(0xa51))return _0xd95bf7[_0x12e1b2(0x19a)]()['aliveMembers']();else{if(_0x1bd8aa==='alive\x20opponents\x20not\x20target')return _0xd95bf7[_0x12e1b2(0x19a)]()[_0x12e1b2(0xa1f)]()[_0x12e1b2(0x2ed)](_0x41f180=>_0x41f180!==_0x100271);else{if(_0x1bd8aa===_0x12e1b2(0xc57))return _0xd95bf7['opponentsUnit']()['deadMembers']();else{if(_0x1bd8aa['match'](/OPPONENT INDEX (\d+)/i)){const _0x2cd7d7=Number(RegExp['$1']);return[_0xd95bf7['opponentsUnit']()[_0x12e1b2(0x24a)]()[_0x2cd7d7]];}}}}}if(_0x1bd8aa==='alive\x20actors')return $gameParty[_0x12e1b2(0xa1f)]();else{if(_0x1bd8aa===_0x12e1b2(0x629))return $gameParty['aliveMembers']()['filter'](_0x4fc467=>_0x4fc467!==_0xd95bf7);else{if(_0x1bd8aa===_0x12e1b2(0x406))return $gameParty[_0x12e1b2(0xa1f)]()[_0x12e1b2(0x2ed)](_0x2de5e0=>_0x2de5e0!==_0x100271);else{if(_0x1bd8aa===_0x12e1b2(0x384))return $gameParty[_0x12e1b2(0x702)]();else{if(_0x1bd8aa[_0x12e1b2(0x712)](/ACTOR INDEX (\d+)/i)){const _0xd7bbd9=Number(RegExp['$1']);return[$gameParty[_0x12e1b2(0x24a)]()[_0xd7bbd9]];}else{if(_0x1bd8aa[_0x12e1b2(0x712)](/ACTOR ID (\d+)/i)){const _0x40299f=Number(RegExp['$1']);return[$gameActors[_0x12e1b2(0x185)](_0x40299f)];}}}}}}if(_0x1bd8aa==='alive\x20enemies')return $gameTroop[_0x12e1b2(0xa1f)]();else{if(_0x1bd8aa===_0x12e1b2(0xabc))return $gameTroop[_0x12e1b2(0xa1f)]()[_0x12e1b2(0x2ed)](_0x1dd514=>_0x1dd514!==_0xd95bf7);else{if(_0x1bd8aa===_0x12e1b2(0x42c))return $gameTroop[_0x12e1b2(0xa1f)]()['filter'](_0xf3c848=>_0xf3c848!==_0x100271);else{if(_0x1bd8aa===_0x12e1b2(0x3a4))return $gameTroop[_0x12e1b2(0x702)]();else{if(_0x1bd8aa['match'](/ENEMY INDEX (\d+)/i)){const _0x7d5ad1=Number(RegExp['$1']);return[$gameTroop['members']()[_0x7d5ad1]];}else{if(_0x1bd8aa[_0x12e1b2(0x712)](/ENEMY ID (\d+)/i)){const _0x1a31fb=Number(RegExp['$1']);return $gameTroop[_0x12e1b2(0xa1f)]()['filter'](_0x3b24bd=>_0x3b24bd[_0x12e1b2(0xa4f)]()===_0x1a31fb);}}}}}}if(_0x1bd8aa===_0x12e1b2(0x549))return _0x42d5a3[_0x12e1b2(0x2ed)](_0x1b0cd7=>_0x1b0cd7[_0x12e1b2(0x3d5)]());else{if(_0x1bd8aa===_0x12e1b2(0x6b9))return _0x42d5a3[_0x12e1b2(0x2ed)](_0x2a9db7=>_0x2a9db7[_0x12e1b2(0x3d5)]()&&_0x2a9db7!==_0xd95bf7);else{if(_0x1bd8aa===_0x12e1b2(0x92c))return _0x42d5a3['filter'](_0x462e95=>_0x462e95['isAlive']()&&_0x462e95!==_0x100271);else{if(_0x1bd8aa===_0x12e1b2(0x575))return _0x42d5a3[_0x12e1b2(0x2ed)](_0x31ae50=>_0x31ae50['isDead']());}}}return[];},VisuMZ[_0x46c6a8(0x586)]=function(){return BattleManager['_target'];},VisuMZ[_0x46c6a8(0x995)]=function(_0x32a57f){const _0x3c502a=_0x46c6a8;return BattleManager[_0x3c502a(0x959)];},VisuMZ['BattleCore'][_0x46c6a8(0x1dc)]=function(_0x3e638e){const _0x46eebc=_0x46c6a8;if(!VisuMZ[_0x46eebc(0xa74)]['Settings'][_0x46eebc(0x3bf)][_0x46eebc(0x5b0)]&&_0x3e638e[_0x46eebc(0x6e9)]()){const _0x413f37=/<CUSTOM ACTION SEQUENCE>/i;if(!_0x3e638e['item']()['note'][_0x46eebc(0x712)](_0x413f37)){const _0xb9bc54=_0x3e638e[_0x46eebc(0x6e9)]();let _0xe057e4=_0x46eebc(0x99c);_0xe057e4+=_0x46eebc(0x70e),_0xe057e4+='<Custom\x20Action\x20Sequence>\x20notetag';const _0x21d92c=$dataItems[_0x46eebc(0x4a3)](_0xb9bc54)?_0x46eebc(0x737):_0x46eebc(0x87a),_0x21dd80=_0xe057e4[_0x46eebc(0x1ba)](_0x21d92c,_0xb9bc54['id'],_0xb9bc54[_0x46eebc(0x106)]);return alert(_0x21dd80),![];}}},PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x48c),_0x126ee5=>{const _0x4a6d7b=_0x46c6a8;if(!SceneManager[_0x4a6d7b(0x849)]())return;VisuMZ['ConvertParams'](_0x126ee5,_0x126ee5);const _0xa3c5e1=$gameTemp[_0x4a6d7b(0xb5d)](),_0x51a760=BattleManager[_0x4a6d7b(0x996)],_0x176df0=BattleManager['_subject'],_0x477c21=BattleManager[_0x4a6d7b(0x1e8)]?BattleManager[_0x4a6d7b(0x1e8)]['slice'](0x0):[],_0x112136=BattleManager[_0x4a6d7b(0x68b)];VisuMZ[_0x4a6d7b(0xa74)][_0x4a6d7b(0x1dc)](_0x51a760);if(!_0xa3c5e1||!_0x51a760||!_0x176df0)return;if(!_0x51a760['item']())return;if(_0x126ee5[_0x4a6d7b(0x472)])_0x112136[_0x4a6d7b(0x2c1)](_0x176df0,_0x51a760['item']());_0x126ee5[_0x4a6d7b(0x716)]&&_0x112136['push'](_0x4a6d7b(0x85d),_0x176df0,_0x477c21,!![]);if(_0x126ee5[_0x4a6d7b(0x321)])_0x112136[_0x4a6d7b(0x78c)](_0x4a6d7b(0x975),_0x176df0,_0x51a760);if(_0x126ee5['WaitForMovement'])_0x112136[_0x4a6d7b(0x78c)]('waitForMovement');if(_0x126ee5[_0x4a6d7b(0xac1)])_0x112136['push'](_0x4a6d7b(0xbc4),_0x176df0,_0x51a760);if(_0x126ee5[_0x4a6d7b(0x3d9)])_0x112136[_0x4a6d7b(0x78c)]('waitForAnimation');_0xa3c5e1['setWaitMode'](_0x4a6d7b(0x7be));}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x4d2),_0x35b643=>{const _0x49dfe6=_0x46c6a8;if(!SceneManager[_0x49dfe6(0x849)]())return;VisuMZ[_0x49dfe6(0x239)](_0x35b643,_0x35b643);const _0x34c399=$gameTemp[_0x49dfe6(0xb5d)](),_0x90825f=BattleManager['_action'],_0x5bce85=BattleManager[_0x49dfe6(0x80d)],_0x3951a7=BattleManager[_0x49dfe6(0x1e8)]?BattleManager['_allTargets'][_0x49dfe6(0x7da)](0x0):[],_0x16ae4c=BattleManager[_0x49dfe6(0x68b)],_0x38a445=_0x35b643[_0x49dfe6(0x3cf)]??![];VisuMZ['BattleCore'][_0x49dfe6(0x1dc)](_0x90825f);if(!_0x34c399||!_0x90825f||!_0x5bce85)return;if(!_0x90825f['item']())return;let _0xb3d6d5=_0x38a445?_0x16ae4c['getDualWieldTimes'](_0x5bce85):0x1;for(let _0x41aad1=0x0;_0x41aad1<_0xb3d6d5;_0x41aad1++){_0x38a445&&_0x5bce85[_0x49dfe6(0x4ec)]()&&_0x16ae4c[_0x49dfe6(0x78c)](_0x49dfe6(0x1fe),_0x5bce85,_0x41aad1);if(_0x35b643['PerformAction'])_0x16ae4c[_0x49dfe6(0x78c)](_0x49dfe6(0x1ee),_0x5bce85,_0x90825f);if(_0x35b643[_0x49dfe6(0x9a0)]>0x0)_0x16ae4c[_0x49dfe6(0x78c)](_0x49dfe6(0xb84),_0x35b643['WaitCount']);if(_0x35b643[_0x49dfe6(0x71b)])_0x16ae4c['push'](_0x49dfe6(0x8d5),_0x5bce85,_0x3951a7,_0x90825f['item']()[_0x49dfe6(0x815)]);if(_0x35b643[_0x49dfe6(0x3d9)])_0x16ae4c[_0x49dfe6(0x78c)](_0x49dfe6(0xa23));for(const _0x21318e of _0x3951a7){if(!_0x21318e)continue;if(_0x35b643[_0x49dfe6(0x8c6)])_0x16ae4c[_0x49dfe6(0x78c)]('actionEffect',_0x5bce85,_0x21318e);}}_0x38a445&&_0x5bce85[_0x49dfe6(0x4ec)]()&&_0x16ae4c['push'](_0x49dfe6(0xa48),_0x5bce85);if(_0x35b643[_0x49dfe6(0x716)])_0x16ae4c[_0x49dfe6(0x78c)](_0x49dfe6(0x85d),_0x5bce85,_0x3951a7,![]);_0x34c399['setWaitMode']('battlelog');}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x934),_0x222842=>{const _0x504ac2=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x222842,_0x222842);const _0x340e69=$gameTemp[_0x504ac2(0xb5d)](),_0x4322be=BattleManager[_0x504ac2(0x996)],_0x1c94d7=BattleManager[_0x504ac2(0x80d)],_0x22e6b6=BattleManager[_0x504ac2(0x1e8)]?BattleManager['_allTargets'][_0x504ac2(0x7da)](0x0):[],_0x5273f8=BattleManager[_0x504ac2(0x68b)],_0x128b5f=_0x222842[_0x504ac2(0x3cf)]??![];VisuMZ[_0x504ac2(0xa74)]['CheckCustomActSeqNotetag'](_0x4322be);if(!_0x340e69||!_0x4322be||!_0x1c94d7)return;if(!_0x4322be['item']())return;let _0x1f00ce=_0x128b5f?_0x5273f8[_0x504ac2(0x75c)](_0x1c94d7):0x1;for(let _0xef4e52=0x0;_0xef4e52<_0x1f00ce;_0xef4e52++){for(const _0x1616e6 of _0x22e6b6){if(!_0x1616e6)continue;_0x128b5f&&_0x1c94d7['isActor']()&&_0x5273f8[_0x504ac2(0x78c)](_0x504ac2(0x1fe),_0x1c94d7,_0xef4e52);if(_0x222842['PerformAction'])_0x5273f8[_0x504ac2(0x78c)](_0x504ac2(0x1ee),_0x1c94d7,_0x4322be);if(_0x222842['WaitCount1']>0x0)_0x5273f8[_0x504ac2(0x78c)](_0x504ac2(0xb84),_0x222842[_0x504ac2(0x21b)]);if(_0x222842[_0x504ac2(0x71b)])_0x5273f8[_0x504ac2(0x78c)](_0x504ac2(0x8d5),_0x1c94d7,[_0x1616e6],_0x4322be[_0x504ac2(0x6e9)]()['animationId']);if(_0x222842[_0x504ac2(0xaed)]>0x0)_0x5273f8['push']('waitCount',_0x222842[_0x504ac2(0xaed)]);if(_0x222842[_0x504ac2(0x8c6)])_0x5273f8['push'](_0x504ac2(0xc1d),_0x1c94d7,_0x1616e6);}}_0x128b5f&&_0x1c94d7[_0x504ac2(0x4ec)]()&&_0x5273f8[_0x504ac2(0x78c)](_0x504ac2(0xa48),_0x1c94d7);if(_0x222842[_0x504ac2(0x716)])_0x5273f8[_0x504ac2(0x78c)](_0x504ac2(0x85d),_0x1c94d7,_0x22e6b6,![]);_0x340e69[_0x504ac2(0x77f)](_0x504ac2(0x7be));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Set_FinishAction',_0x11e1c2=>{const _0x52fd54=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x52fd54(0x239)](_0x11e1c2,_0x11e1c2);const _0x5390c8=$gameTemp[_0x52fd54(0xb5d)](),_0x516feb=BattleManager['_action'],_0x318584=BattleManager[_0x52fd54(0x80d)],_0x22a5f5=BattleManager[_0x52fd54(0x1e8)]?BattleManager[_0x52fd54(0x1e8)][_0x52fd54(0x7da)](0x0):[],_0x27fa19=BattleManager[_0x52fd54(0x68b)];VisuMZ[_0x52fd54(0xa74)]['CheckCustomActSeqNotetag'](_0x516feb);if(!_0x5390c8||!_0x516feb||!_0x318584)return;if(!_0x516feb[_0x52fd54(0x6e9)]())return;if(_0x11e1c2[_0x52fd54(0x716)])_0x27fa19[_0x52fd54(0x78c)](_0x52fd54(0x85d),_0x318584,_0x22a5f5,![]);if(_0x11e1c2['WaitForNewLine'])_0x27fa19[_0x52fd54(0x78c)](_0x52fd54(0x565));if(_0x11e1c2[_0x52fd54(0x847)])_0x27fa19[_0x52fd54(0x78c)](_0x52fd54(0xb49));if(_0x11e1c2['ClearBattleLog'])_0x27fa19['push'](_0x52fd54(0x518));if(_0x11e1c2['ActionEnd'])_0x27fa19[_0x52fd54(0x78c)](_0x52fd54(0xc22),_0x318584);if(_0x11e1c2[_0x52fd54(0x85c)])_0x27fa19[_0x52fd54(0x78c)](_0x52fd54(0xb00));_0x5390c8[_0x52fd54(0x77f)](_0x52fd54(0x7be));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xc03),_0x4f34b6=>{const _0x4b702d=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4b702d(0x538)])return;VisuMZ[_0x4b702d(0x239)](_0x4f34b6,_0x4f34b6);const _0x1eb939=$gameTemp[_0x4b702d(0xb5d)](),_0xfcdb7=_0x4f34b6[_0x4b702d(0x4af)];if(!_0x1eb939)return;$gameScreen[_0x4b702d(0x407)](_0x4f34b6[_0x4b702d(0x7bc)],_0x4f34b6[_0x4b702d(0x249)],_0x4f34b6[_0x4b702d(0xc15)]);if(_0xfcdb7)_0x1eb939['setWaitMode']('battleAngle');}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x8be),_0x20cf83=>{const _0x3acf82=_0x46c6a8;if(!SceneManager[_0x3acf82(0x849)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x3acf82(0x239)](_0x20cf83,_0x20cf83);const _0x26dd46=$gameTemp[_0x3acf82(0xb5d)](),_0x11a9cf=_0x20cf83[_0x3acf82(0x4af)];if(!_0x26dd46)return;$gameScreen['setBattleAngle'](0x0,_0x20cf83['Duration'],_0x20cf83['EasingType']);if(_0x11a9cf)_0x26dd46[_0x3acf82(0x77f)](_0x3acf82(0xa8a));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Angle_WaitForAngle',_0x9b0ca4=>{const _0x23a6da=_0x46c6a8;if(!SceneManager[_0x23a6da(0x849)]())return;if(!Imported[_0x23a6da(0x538)])return;const _0x353f24=$gameTemp[_0x23a6da(0xb5d)]();if(!_0x353f24)return;_0x353f24[_0x23a6da(0x77f)](_0x23a6da(0xa8a));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Animation_ActionAnimation',_0x3026b6=>{const _0x9fbfdf=_0x46c6a8;if(!SceneManager[_0x9fbfdf(0x849)]())return;VisuMZ['ConvertParams'](_0x3026b6,_0x3026b6);const _0xddff1b=$gameTemp[_0x9fbfdf(0xb5d)](),_0x517017=BattleManager[_0x9fbfdf(0x996)],_0x2c4a62=BattleManager[_0x9fbfdf(0x80d)],_0x5dc650=VisuMZ[_0x9fbfdf(0x97d)](_0x3026b6[_0x9fbfdf(0x6b5)]),_0xf5fd68=_0x3026b6[_0x9fbfdf(0x498)],_0x20df6a=BattleManager[_0x9fbfdf(0x68b)];if(!_0xddff1b||!_0x517017||!_0x2c4a62)return;if(!_0x517017['item']())return;let _0xb5b46=_0x517017[_0x9fbfdf(0x6e9)]()[_0x9fbfdf(0x815)];if(_0xb5b46<0x0)_0xb5b46=_0x2c4a62[_0x9fbfdf(0x722)]();$gameTemp['requestAnimation'](_0x5dc650,_0xb5b46,_0xf5fd68),_0x3026b6[_0x9fbfdf(0x3d9)]&&_0xddff1b[_0x9fbfdf(0x77f)](_0x9fbfdf(0x8a7));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x292),_0x4b93cd=>{const _0x5e9494=_0x46c6a8;if(!SceneManager[_0x5e9494(0x849)]())return;VisuMZ['ConvertParams'](_0x4b93cd,_0x4b93cd);const _0x29de48=$gameTemp[_0x5e9494(0xb5d)](),_0x25f54f=BattleManager['_subject'],_0x926e5d=VisuMZ[_0x5e9494(0x97d)](_0x4b93cd['Targets']),_0x5558fc=_0x4b93cd[_0x5e9494(0x498)],_0x485e41=BattleManager[_0x5e9494(0x68b)];if(!_0x29de48||!_0x25f54f)return;const _0x32a08a=_0x25f54f[_0x5e9494(0x722)]();$gameTemp[_0x5e9494(0x56e)](_0x926e5d,_0x32a08a,_0x5558fc),_0x4b93cd[_0x5e9494(0x3d9)]&&_0x29de48[_0x5e9494(0x77f)](_0x5e9494(0x8a7));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x860),_0x27fe76=>{const _0x3080aa=_0x46c6a8;if(!SceneManager[_0x3080aa(0x849)]())return;VisuMZ[_0x3080aa(0x239)](_0x27fe76,_0x27fe76);const _0x145bba=_0x2961dd[_0x3080aa(0x32c)](_0x27fe76[_0x3080aa(0xa43)]);if(_0x145bba<=0x0)return;const _0x5bdf9c=$gameTemp[_0x3080aa(0xb5d)](),_0x2961dd=BattleManager[_0x3080aa(0x80d)],_0x1964d5=VisuMZ[_0x3080aa(0x97d)](_0x27fe76[_0x3080aa(0x6b5)]),_0x5e179f=_0x27fe76['Mirror'],_0x26c751=BattleManager[_0x3080aa(0x68b)];if(!_0x5bdf9c||!_0x2961dd)return;$gameTemp[_0x3080aa(0x56e)](_0x1964d5,_0x145bba,_0x5e179f),_0x27fe76[_0x3080aa(0x3d9)]&&_0x5bdf9c[_0x3080aa(0x77f)](_0x3080aa(0x8a7));}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x3c5),_0x2abba8=>{const _0x47cd82=_0x46c6a8;if(!SceneManager[_0x47cd82(0x849)]())return;VisuMZ['ConvertParams'](_0x2abba8,_0x2abba8);const _0x538b75=$gameTemp[_0x47cd82(0xb5d)](),_0x4fd3a6=VisuMZ['CreateActionSequenceTargets'](_0x2abba8[_0x47cd82(0x6b5)]),_0x3f1f1a=_0x2abba8[_0x47cd82(0xa67)];let _0x181c67=0x0;switch(_0x3f1f1a[_0x47cd82(0x85e)]()['trim']()){case'!':case _0x47cd82(0xb8e):_0x181c67=0x1;break;case'?':case _0x47cd82(0x799):_0x181c67=0x2;break;case _0x47cd82(0x23d):case _0x47cd82(0xbbe):case _0x47cd82(0xadd):case _0x47cd82(0x68e):case _0x47cd82(0x8cb):_0x181c67=0x3;break;case _0x47cd82(0x337):case _0x47cd82(0x9d5):_0x181c67=0x4;break;case _0x47cd82(0x210):case'ANGER':_0x181c67=0x5;break;case'SWEAT':_0x181c67=0x6;break;case _0x47cd82(0x708):case _0x47cd82(0xbb0):case _0x47cd82(0x34f):_0x181c67=0x7;break;case _0x47cd82(0xa03):case _0x47cd82(0x59f):_0x181c67=0x8;break;case _0x47cd82(0x499):case'BULB':case'LIGHT\x20BULB':case _0x47cd82(0xa5b):case _0x47cd82(0x1d2):_0x181c67=0x9;break;case'Z':case'ZZ':case'ZZZ':case _0x47cd82(0x449):_0x181c67=0xa;break;case _0x47cd82(0x881):_0x181c67=0xb;break;case _0x47cd82(0x5d6):_0x181c67=0xc;break;case _0x47cd82(0x425):_0x181c67=0xd;break;case _0x47cd82(0x281):_0x181c67=0xe;break;case _0x47cd82(0xbe5):_0x181c67=0xf;break;}for(const _0x5e9be9 of _0x4fd3a6){if(!_0x5e9be9)continue;$gameTemp[_0x47cd82(0xa3c)](_0x5e9be9,_0x181c67);}_0x2abba8[_0x47cd82(0x627)]&&_0x538b75&&(_0x538b75['wait'](0x1),_0x538b75['setWaitMode']('battleBalloon'));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Animation_BalloonIcon',_0x183265=>{const _0x228853=_0x46c6a8;if(!SceneManager[_0x228853(0x849)]())return;if(!Imported[_0x228853(0x723)])return;VisuMZ['ConvertParams'](_0x183265,_0x183265);const _0x261b0c=$gameTemp[_0x228853(0xb5d)](),_0x46223c=VisuMZ[_0x228853(0x97d)](_0x183265['Targets']),_0x1206ca=_0x183265[_0x228853(0x16e)];for(const _0x356586 of _0x46223c){if(!_0x356586)continue;$gameTemp[_0x228853(0xa3c)](_0x356586,[_0x1206ca]);}_0x183265[_0x228853(0x627)]&&_0x261b0c&&(_0x261b0c[_0x228853(0x71d)](0x1),_0x261b0c[_0x228853(0x77f)](_0x228853(0xb92)));}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x745),_0x3b6ee=>{const _0x3599c0=_0x46c6a8;if(!SceneManager[_0x3599c0(0x849)]())return;if(!Imported[_0x3599c0(0x723)])return;VisuMZ['ConvertParams'](_0x3b6ee,_0x3b6ee);const _0x59b954=$gameTemp[_0x3599c0(0xb5d)](),_0x343b57=VisuMZ[_0x3599c0(0x97d)](_0x3b6ee['Targets']),_0x5b0134=Math['min'](Number(_0x3b6ee['startIcon']||0x0),Number(_0x3b6ee['endIcon']||0x0)),_0xd36ad3=Math[_0x3599c0(0x968)](Number(_0x3b6ee[_0x3599c0(0x561)]||0x0),Number(_0x3b6ee[_0x3599c0(0x3f1)]||0x0)),_0x4a23ae=[];for(let _0x48fe5b=_0x5b0134;_0x48fe5b<=_0xd36ad3;_0x48fe5b++){_0x4a23ae['push'](_0x48fe5b);}for(const _0x3f2c21 of _0x343b57){if(!_0x3f2c21)continue;$gameTemp[_0x3599c0(0xa3c)](_0x3f2c21,_0x4a23ae);}_0x3b6ee['WaitComplete']&&_0x59b954&&(_0x59b954['wait'](0x1),_0x59b954[_0x3599c0(0x77f)]('battleBalloon'));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x26f),_0x370c17=>{const _0x404852=_0x46c6a8;if(!SceneManager[_0x404852(0x849)]())return;if(!Imported[_0x404852(0x723)])return;VisuMZ[_0x404852(0x239)](_0x370c17,_0x370c17);const _0x8c506d=$gameTemp[_0x404852(0xb5d)](),_0x436826=VisuMZ['CreateActionSequenceTargets'](_0x370c17['Targets']),_0x195f51=_0x370c17[_0x404852(0x9b8)];for(const _0x540d40 of _0x436826){if(!_0x540d40)continue;$gameTemp[_0x404852(0xa3c)](_0x540d40,_0x195f51);}_0x370c17[_0x404852(0x627)]&&_0x8c506d&&(_0x8c506d[_0x404852(0x71d)](0x1),_0x8c506d['setWaitMode']('battleBalloon'));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x4f7),_0x2cc14f=>{const _0x11977e=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x11977e(0x239)](_0x2cc14f,_0x2cc14f);const _0x1cbc6f=$gameTemp[_0x11977e(0xb5d)](),_0x478b4b=BattleManager[_0x11977e(0x996)],_0x35e567=_0x2cc14f['Mirror'],_0x213db9=VisuMZ['CreateActionSequenceTargets'](_0x2cc14f[_0x11977e(0x6b5)]);if(!_0x1cbc6f||!_0x478b4b)return;if(!_0x478b4b['item']())return;for(const _0x383877 of _0x213db9){if(!_0x383877)continue;_0x383877[_0x11977e(0xbc4)](_0x478b4b,_0x35e567);}if(_0x2cc14f[_0x11977e(0x3d9)])_0x1cbc6f[_0x11977e(0x77f)](_0x11977e(0x8a7));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Animation_ChangeBattlePortrait',_0xb52c48=>{const _0x4aff68=_0x46c6a8;VisuMZ[_0x4aff68(0x239)](_0xb52c48,_0xb52c48);const _0x3fa727=$gameTemp[_0x4aff68(0xb5d)](),_0x17dd4a=VisuMZ[_0x4aff68(0x97d)](_0xb52c48[_0x4aff68(0x6b5)]),_0x2dede3=_0xb52c48[_0x4aff68(0xc08)];if(!_0x2dede3)return;for(const _0x4bd06c of _0x17dd4a){if(!_0x4bd06c)continue;if(!_0x4bd06c[_0x4aff68(0x4ec)]())continue;_0x4bd06c[_0x4aff68(0x507)](_0x2dede3);}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Animation_ChangeBattlePortrait_JS',_0x5213cb=>{const _0x3d565d=_0x46c6a8;VisuMZ[_0x3d565d(0x239)](_0x5213cb,_0x5213cb);const _0x1ba53a=_0x5213cb[_0x3d565d(0x616)](),_0x2610d6=$gameActors[_0x3d565d(0x185)](_0x1ba53a)||null;if(!_0x2610d6){console[_0x3d565d(0x221)](_0x3d565d(0xa14));return;}const _0x11cfa9=_0x5213cb[_0x3d565d(0x23b)]();_0x2610d6['setBattlePortrait'](_0x11cfa9);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Animation_GuardAnimation',_0x131436=>{const _0x4e58d3=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x131436,_0x131436);const _0x29e7fe=$gameTemp[_0x4e58d3(0xb5d)](),_0xeb37d9=BattleManager['_subject'],_0x4a6d94=VisuMZ[_0x4e58d3(0x97d)](_0x131436['Targets']),_0x58270c=_0x131436[_0x4e58d3(0x498)];if(!_0x29e7fe||!_0xeb37d9)return;const _0xc44f2c=$dataSkills[_0xeb37d9[_0x4e58d3(0xb29)]()],_0x1f02ed=_0xc44f2c[_0x4e58d3(0x815)];$gameTemp[_0x4e58d3(0x56e)](_0x4a6d94,_0x1f02ed,_0x58270c),_0x131436[_0x4e58d3(0x3d9)]&&_0x29e7fe[_0x4e58d3(0x77f)](_0x4e58d3(0x8a7));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x6b4),_0x5b540d=>{const _0x538bee=_0x46c6a8;if(!SceneManager[_0x538bee(0x849)]())return;VisuMZ[_0x538bee(0x239)](_0x5b540d,_0x5b540d);const _0x2aa88c=$gameTemp[_0x538bee(0xb5d)](),_0x222711=VisuMZ[_0x538bee(0x97d)](_0x5b540d['Targets']),_0x186120=Number(_0x5b540d[_0x538bee(0x5ea)]||0x1),_0x3ff218=$dataItems[_0x186120],_0x1bdb71=_0x5b540d[_0x538bee(0x498)];if(!_0x2aa88c)return;if(!_0x3ff218)return;let _0x300c23=_0x3ff218[_0x538bee(0x815)];$gameTemp[_0x538bee(0x56e)](_0x222711,_0x300c23,_0x1bdb71),_0x5b540d['WaitForAnimation']&&_0x2aa88c[_0x538bee(0x77f)](_0x538bee(0x8a7));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x4ef),_0xcb1e20=>{const _0x190c9e=_0x46c6a8;if(!SceneManager[_0x190c9e(0x7a7)])return;if(!SceneManager[_0x190c9e(0x7a7)][_0x190c9e(0x81e)])return;if(!Imported[_0x190c9e(0x12b)])return;VisuMZ['ConvertParams'](_0xcb1e20,_0xcb1e20);const _0x4739bc=$gameTemp[_0x190c9e(0xb5d)](),_0x6d7a05=Math[_0x190c9e(0xa5e)](_0xcb1e20['pointX']),_0x4f239f=Math[_0x190c9e(0xa5e)](_0xcb1e20[_0x190c9e(0x6a4)]);$gameTemp['requestPointAnimation'](_0x6d7a05,_0x4f239f,_0xcb1e20[_0x190c9e(0xc51)],_0xcb1e20['Mirror'],_0xcb1e20[_0x190c9e(0xb22)]),_0xcb1e20[_0x190c9e(0x627)]&&_0x4739bc&&(SceneManager[_0x190c9e(0x7a7)][_0x190c9e(0x81e)][_0x190c9e(0xb34)](),_0x4739bc[_0x190c9e(0x77f)](_0x190c9e(0x8a7)));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x662),_0x3ff4ad=>{const _0x41a5e1=_0x46c6a8;if(!SceneManager[_0x41a5e1(0x849)]())return;VisuMZ[_0x41a5e1(0x239)](_0x3ff4ad,_0x3ff4ad);const _0xcf2b11=$gameTemp[_0x41a5e1(0xb5d)](),_0x13b943=VisuMZ['CreateActionSequenceTargets'](_0x3ff4ad['Targets']),_0x321be5=_0x3ff4ad[_0x41a5e1(0xc51)],_0x539bbe=_0x3ff4ad['Mirror'];if(!_0xcf2b11)return;$gameTemp[_0x41a5e1(0x56e)](_0x13b943,_0x321be5,_0x539bbe);if(_0x3ff4ad[_0x41a5e1(0x3d9)])_0xcf2b11[_0x41a5e1(0x77f)](_0x41a5e1(0x8a7));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Animation_ShowAnimationJS',_0x490bb6=>{const _0x3abd9b=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x490bb6,_0x490bb6);const _0x4fcce2=$gameTemp['getLastPluginCommandInterpreter'](),_0x16867b=VisuMZ['CreateActionSequenceTargets'](_0x490bb6[_0x3abd9b(0x6b5)]),_0x1a12a2=Number(_0x490bb6[_0x3abd9b(0xc51)])||0x1,_0x2a6a3c=_0x490bb6[_0x3abd9b(0x498)];if(!_0x4fcce2)return;$gameTemp[_0x3abd9b(0x56e)](_0x16867b,_0x1a12a2,_0x2a6a3c);if(_0x490bb6['WaitForAnimation'])_0x4fcce2['setWaitMode'](_0x3abd9b(0x8a7));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x817),_0x273dd6=>{const _0x53b451=_0x46c6a8;if(!SceneManager[_0x53b451(0x849)]())return;VisuMZ[_0x53b451(0x239)](_0x273dd6,_0x273dd6);const _0x4a365b=$gameTemp[_0x53b451(0xb5d)](),_0x4eee9c=VisuMZ[_0x53b451(0x97d)](_0x273dd6[_0x53b451(0x6b5)]),_0x5f0690=Number(_0x273dd6[_0x53b451(0x3e0)]||0x1),_0x487183=$dataSkills[_0x5f0690],_0x12af34=_0x273dd6[_0x53b451(0x498)];if(!_0x4a365b)return;if(!_0x487183)return;let _0x546918=_0x487183[_0x53b451(0x815)];$gameTemp[_0x53b451(0x56e)](_0x4eee9c,_0x546918,_0x12af34),_0x273dd6['WaitForAnimation']&&_0x4a365b[_0x53b451(0x77f)](_0x53b451(0x8a7));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x5df),_0x38320f=>{const _0x17d6b9=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;const _0x51ce2c=$gameTemp[_0x17d6b9(0xb5d)]();if(!_0x51ce2c)return;_0x51ce2c[_0x17d6b9(0x77f)](_0x17d6b9(0x8a7));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xb5b),_0x59756e=>{const _0x8d4eab=_0x46c6a8;if(!SceneManager[_0x8d4eab(0x849)]())return;VisuMZ['ConvertParams'](_0x59756e,_0x59756e);const _0xd020b1=BattleManager[_0x8d4eab(0x68b)],_0x234337=_0x59756e['CopyCombatLog']&&Imported[_0x8d4eab(0x29d)];_0xd020b1['addText'](_0x59756e[_0x8d4eab(0x2b8)]),_0x234337&&Imported[_0x8d4eab(0x29d)]&&$gameSystem[_0x8d4eab(0x452)](_0x59756e[_0x8d4eab(0x2b8)]||'',_0x59756e[_0x8d4eab(0x161)]||0x0);}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xaee),_0x40345d=>{const _0x75fa2a=_0x46c6a8;if(!SceneManager[_0x75fa2a(0x849)]())return;const _0x340b4a=BattleManager[_0x75fa2a(0x68b)];_0x340b4a['clear']();}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],'ActSeq_BattleLog_DisplayAction',_0xa2d6ff=>{const _0x4422d8=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;const _0x9f080b=$gameTemp[_0x4422d8(0xb5d)](),_0x2c3c6d=BattleManager[_0x4422d8(0x996)],_0x262bc7=BattleManager['_subject'],_0x331355=BattleManager[_0x4422d8(0x68b)];if(!_0x9f080b||!_0x2c3c6d||!_0x262bc7)return;if(!_0x2c3c6d[_0x4422d8(0x6e9)]())return;_0x331355[_0x4422d8(0x2c1)](_0x262bc7,_0x2c3c6d[_0x4422d8(0x6e9)]()),_0x9f080b[_0x4422d8(0x77f)](_0x4422d8(0x7be));}),PluginManager['registerCommand'](pluginData['name'],_0x46c6a8(0x35d),_0x53e9ea=>{const _0x3c06f1=_0x46c6a8;if(!SceneManager[_0x3c06f1(0x849)]())return;const _0x4d8b97=BattleManager[_0x3c06f1(0x68b)];_0x4d8b97[_0x3c06f1(0xbe0)]();}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xbc3),_0x174c8d=>{if(!SceneManager['isSceneBattle']())return;const _0x4661dc=BattleManager['_logWindow'];_0x4661dc['pushBaseLine']();}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x153),_0xb36591=>{const _0x3cef4d=_0x46c6a8;if(!SceneManager[_0x3cef4d(0x849)]())return;const _0x8ffbdf=BattleManager[_0x3cef4d(0x68b)];_0x8ffbdf[_0x3cef4d(0x233)]();}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xbc2),_0x2fe36b=>{const _0x415cd4=_0x46c6a8;if(!SceneManager[_0x415cd4(0x849)]())return;VisuMZ[_0x415cd4(0x239)](_0x2fe36b,_0x2fe36b),SceneManager[_0x415cd4(0x7a7)][_0x415cd4(0x9ab)](_0x2fe36b[_0x415cd4(0xbfa)]);}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xb4c),_0x29e84d=>{const _0x4fbed9=_0x46c6a8;if(!SceneManager[_0x4fbed9(0x849)]())return;const _0x39fc77=$gameTemp[_0x4fbed9(0xb5d)]();_0x39fc77[_0x4fbed9(0x77f)](_0x4fbed9(0x7be));}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0xa12),_0x52901a=>{const _0x2fadce=_0x46c6a8;if(!SceneManager[_0x2fadce(0x849)]())return;const _0x1bcbb0=$gameTemp['getLastPluginCommandInterpreter'](),_0x471e01=BattleManager[_0x2fadce(0x68b)];_0x471e01[_0x2fadce(0x565)](),_0x1bcbb0[_0x2fadce(0x77f)](_0x2fadce(0x7be));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Camera_Clamp',_0x222bea=>{const _0x2c35d6=_0x46c6a8;if(!SceneManager[_0x2c35d6(0x849)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x222bea,_0x222bea);const _0x410664=$gameScreen['battleCameraData']();_0x410664['cameraClamp']=_0x222bea[_0x2c35d6(0x1aa)];}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x460),_0x502bfb=>{const _0x45e67d=_0x46c6a8;if(!SceneManager[_0x45e67d(0x849)]())return;if(!Imported[_0x45e67d(0x538)])return;VisuMZ[_0x45e67d(0x239)](_0x502bfb,_0x502bfb);const _0x344b48=$gameTemp[_0x45e67d(0xb5d)](),_0x3707ad=_0x502bfb['WaitForCamera'];$gameScreen[_0x45e67d(0xc64)](_0x502bfb[_0x45e67d(0x66b)],_0x502bfb[_0x45e67d(0x780)],_0x502bfb[_0x45e67d(0x249)],_0x502bfb[_0x45e67d(0xc15)]);if(_0x3707ad)_0x344b48[_0x45e67d(0x77f)]('battleCamera');}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x2df),_0x13d338=>{const _0x1d34e2=_0x46c6a8;if(!SceneManager[_0x1d34e2(0x849)]())return;if(!Imported[_0x1d34e2(0x538)])return;VisuMZ[_0x1d34e2(0x239)](_0x13d338,_0x13d338);const _0x40922c=$gameTemp['getLastPluginCommandInterpreter'](),_0x4a9afd=VisuMZ['CreateActionSequenceTargets'](_0x13d338['Targets']),_0x55c03a=_0x13d338[_0x1d34e2(0x68d)];$gameScreen[_0x1d34e2(0x174)](_0x4a9afd,_0x13d338[_0x1d34e2(0x249)],_0x13d338[_0x1d34e2(0xc15)]);if(_0x55c03a)_0x40922c[_0x1d34e2(0x77f)](_0x1d34e2(0x6f4));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x382),_0x4d680a=>{const _0x40cdfa=_0x46c6a8;if(!SceneManager[_0x40cdfa(0x849)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x40cdfa(0x239)](_0x4d680a,_0x4d680a);const _0xb4155e=$gameTemp[_0x40cdfa(0xb5d)](),_0x2ed1ad=_0x4d680a[_0x40cdfa(0x68d)];$gameScreen['setBattleCameraOffset'](_0x4d680a['OffsetX'],_0x4d680a[_0x40cdfa(0x4e7)],_0x4d680a['Duration'],_0x4d680a[_0x40cdfa(0xc15)]);if(_0x2ed1ad)_0xb4155e[_0x40cdfa(0x77f)](_0x40cdfa(0x6f4));}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x22f),_0x232665=>{const _0x13a137=_0x46c6a8;if(!SceneManager[_0x13a137(0x849)]())return;if(!Imported[_0x13a137(0x538)])return;VisuMZ[_0x13a137(0x239)](_0x232665,_0x232665);const _0x230af2=$gameTemp['getLastPluginCommandInterpreter'](),_0x4fbdd7=_0x232665[_0x13a137(0x682)],_0x4d282d=_0x232665['ResetOffset'],_0x6d3a22=_0x232665[_0x13a137(0x68d)];if(_0x4fbdd7){const _0x18f1d5=Math[_0x13a137(0xa5e)](Graphics[_0x13a137(0x1e1)]/0x2),_0x199d43=Math[_0x13a137(0xa5e)](Graphics[_0x13a137(0x1fc)]/0x2);$gameScreen[_0x13a137(0xc64)](_0x18f1d5,_0x199d43,_0x232665[_0x13a137(0x249)],_0x232665[_0x13a137(0xc15)]);}_0x4d282d&&$gameScreen[_0x13a137(0x617)](0x0,0x0,_0x232665['Duration'],_0x232665[_0x13a137(0xc15)]);if(_0x6d3a22)_0x230af2[_0x13a137(0x77f)]('battleCamera');}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],'ActSeq_Camera_WaitForCamera',_0x1b1100=>{const _0xa52650=_0x46c6a8;if(!SceneManager[_0xa52650(0x849)]())return;if(!Imported[_0xa52650(0x538)])return;const _0x314ddd=$gameTemp[_0xa52650(0xb5d)]();if(!_0x314ddd)return;_0x314ddd[_0xa52650(0x77f)](_0xa52650(0x6f4));}),VisuMZ['BattleCore'][_0x46c6a8(0x9dc)]=function(_0x29252b){const _0x97bb6c=_0x46c6a8;_0x29252b['portraitFilename']='';const _0x5a1f16=VisuMZ[_0x97bb6c(0xc5c)][_0x97bb6c(0x9dc)](_0x29252b),_0x5ec274=VisuMZ[_0x97bb6c(0x97d)](_0x29252b['Targets'])[0x0]||null;return _0x5ec274&&(_0x5a1f16['portraitFilename']=_0x5ec274['visualCutinPortraitFilename'](),_0x5a1f16[_0x97bb6c(0x234)]=_0x5ec274[_0x97bb6c(0x66d)](),_0x5a1f16[_0x97bb6c(0x3dd)]=_0x5ec274[_0x97bb6c(0x979)](),_0x5a1f16[_0x97bb6c(0x8c0)]=_0x5ec274[_0x97bb6c(0x1fd)](),_0x5ec274['isEnemy']()&&(_0x5ec274[_0x97bb6c(0xa38)]()&&(_0x5a1f16[_0x97bb6c(0xb14)]=!_0x5a1f16[_0x97bb6c(0xb14)]),_0x5ec274[_0x97bb6c(0x25b)]()&&(_0x5a1f16[_0x97bb6c(0x620)]=!_0x5a1f16[_0x97bb6c(0x620)]),_0x5a1f16[_0x97bb6c(0x8c0)]===_0x97bb6c(0x76b)&&(_0x5a1f16['portraitFlipHorz']=!_0x5a1f16[_0x97bb6c(0xb14)]),_0x29252b[_0x97bb6c(0x73d)][_0x97bb6c(0x823)]&&(_0x5a1f16['parallaxScrollX']*=-0x1),_0x29252b[_0x97bb6c(0x73d)]['parallaxScrollYinvertEnemy']&&(_0x5a1f16['parallaxScrollY']*=-0x1),_0x5a1f16[_0x97bb6c(0x4e5)]+=_0x29252b[_0x97bb6c(0x73d)][_0x97bb6c(0x3aa)]??0x0)),_0x5a1f16;},PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x589),_0x5cb915=>{const _0x121c62=_0x46c6a8;if(!SceneManager[_0x121c62(0x849)]())return;if(!Imported[_0x121c62(0x7e5)])return;VisuMZ[_0x121c62(0x239)](_0x5cb915,_0x5cb915);const _0x28a346=VisuMZ[_0x121c62(0xa74)][_0x121c62(0x9dc)](_0x5cb915);SceneManager['_scene'][_0x121c62(0xa9b)](_0x28a346);const _0x315217=$gameTemp[_0x121c62(0xb5d)]();_0x315217&&_0x5cb915[_0x121c62(0x137)]&&_0x315217[_0x121c62(0x77f)]('cutinEnter');}),PluginManager['registerCommand'](pluginData['name'],_0x46c6a8(0x61a),_0x1941d5=>{const _0x20cd4f=_0x46c6a8;if(!SceneManager[_0x20cd4f(0x849)]())return;if(!Imported[_0x20cd4f(0x7e5)])return;VisuMZ[_0x20cd4f(0x239)](_0x1941d5,_0x1941d5),SceneManager[_0x20cd4f(0x7a7)][_0x20cd4f(0x8a8)]();const _0x5e26aa=$gameTemp[_0x20cd4f(0xb5d)]();_0x5e26aa&&_0x1941d5[_0x20cd4f(0x8b2)]&&_0x5e26aa[_0x20cd4f(0x77f)]('cutinExit');}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x8d7),_0x628081=>{const _0x3057ce=_0x46c6a8;if(!SceneManager[_0x3057ce(0x849)]())return;if(!Imported[_0x3057ce(0x7e5)])return;VisuMZ[_0x3057ce(0x239)](_0x628081,_0x628081);const _0x4daf20=_0x628081[_0x3057ce(0xaa8)][_0x3057ce(0x4ed)]()[_0x3057ce(0xa28)]();SceneManager[_0x3057ce(0x7a7)]['endVisualCutin'](_0x4daf20);const _0x2835db=$gameTemp[_0x3057ce(0xb5d)]();_0x2835db&&_0x628081[_0x3057ce(0x8b2)]&&_0x2835db['setWaitMode']('cutinExit');}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xbb6),_0x22bf56=>{const _0x2fad0f=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2fad0f(0x7e5)])return;const _0x42e230=$gameTemp[_0x2fad0f(0xb5d)]();_0x42e230[_0x2fad0f(0x77f)](_0x2fad0f(0x90b));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x8c5),_0x4c7261=>{const _0x1de2b5=_0x46c6a8;if(!SceneManager[_0x1de2b5(0x849)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;const _0x6d8d02=$gameTemp[_0x1de2b5(0xb5d)]();_0x6d8d02['setWaitMode'](_0x1de2b5(0x544));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x687),_0x2a2018=>{const _0x5150d8=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5150d8(0x983)])return;VisuMZ[_0x5150d8(0x239)](_0x2a2018,_0x2a2018);const _0x2891c0=VisuMZ[_0x5150d8(0x97d)](_0x2a2018['Targets']),_0x11982a=_0x2a2018[_0x5150d8(0x1ad)]['toLowerCase']()['trim']();for(const _0x1f7f6b of _0x2891c0){if(!_0x1f7f6b)continue;_0x1f7f6b[_0x5150d8(0xa89)](_0x11982a);}}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x76c),_0x15bbfa=>{const _0x3f9bf2=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x3f9bf2(0x239)](_0x15bbfa,_0x15bbfa);const _0x2c8455=VisuMZ[_0x3f9bf2(0x97d)](_0x15bbfa[_0x3f9bf2(0x6b5)]),_0x242f25=_0x15bbfa[_0x3f9bf2(0xa4e)];for(const _0x3ee119 of _0x2c8455){if(!_0x3ee119)continue;_0x3ee119[_0x3f9bf2(0x66f)]()[_0x3f9bf2(0x3f7)]=_0x242f25;}}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x880),_0x419da3=>{const _0x3afb8c=_0x46c6a8;if(!SceneManager[_0x3afb8c(0x849)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x3afb8c(0x239)](_0x419da3,_0x419da3);const _0x2b8f18=BattleManager[_0x3afb8c(0x996)],_0x3e6ec6=_0x419da3[_0x3afb8c(0x24c)];if(!_0x2b8f18)return;_0x2b8f18[_0x3afb8c(0x22b)]=_0x3e6ec6;}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x404),_0x1b9b3b=>{const _0x369da3=_0x46c6a8;if(!SceneManager[_0x369da3(0x849)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x335904=BattleManager[_0x369da3(0x996)];if(!_0x335904)return;_0x335904[_0x369da3(0xbed)]();}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x88f),_0x31c305=>{const _0x20c2de=_0x46c6a8;if(!SceneManager[_0x20c2de(0x849)]())return;if(!Imported[_0x20c2de(0x21a)])return;VisuMZ['ConvertParams'](_0x31c305,_0x31c305);const _0x4318c2=BattleManager['_action'],_0x50ac74=_0x31c305[_0x20c2de(0x24c)];if(!_0x4318c2)return;_0x4318c2['_battleCoreForcedElements']=_0x50ac74;}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x261),_0x111577=>{const _0x297c56=_0x46c6a8;if(!SceneManager[_0x297c56(0x849)]())return;if(!Imported[_0x297c56(0x21a)])return;const _0x4b09d9=BattleManager[_0x297c56(0x996)];if(!_0x4b09d9)return;_0x4b09d9[_0x297c56(0xab2)]=!![];}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xb9b),_0x19bb7c=>{const _0x42f70f=_0x46c6a8;VisuMZ[_0x42f70f(0x706)]['ActSeq_Grid_ActionAnimationAtNode'](_0x19bb7c);}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x35a),_0x33aa46=>{const _0x1826cd=_0x46c6a8;VisuMZ[_0x1826cd(0x706)][_0x1826cd(0x35a)](_0x33aa46);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Grid_AddTriggerToNode',_0x23b429=>{const _0x23af83=_0x46c6a8;VisuMZ[_0x23af83(0x706)][_0x23af83(0x15d)](_0x23b429);}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x3dc),_0x4f0462=>{const _0x2c1534=_0x46c6a8;VisuMZ[_0x2c1534(0x706)][_0x2c1534(0x15d)](_0x4f0462);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Grid_AnimationIDAtNode',_0x132db5=>{const _0x2fdb61=_0x46c6a8;VisuMZ[_0x2fdb61(0x706)][_0x2fdb61(0x490)](_0x132db5);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xac8),_0x1a47a3=>{const _0x3dd535=_0x46c6a8;VisuMZ[_0x3dd535(0x706)][_0x3dd535(0xac8)](_0x1a47a3);}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],'ActSeq_Grid_AnimationTypeAtNode',_0x4ca91c=>{const _0x418bce=_0x46c6a8;VisuMZ['BattleGridSystem'][_0x418bce(0x554)](_0x4ca91c);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Grid_ClearPassiveStatesFromNode',_0x54833e=>{const _0x373b49=_0x46c6a8;VisuMZ[_0x373b49(0x706)]['ActSeq_Grid_ClearPassiveStatesFromNode'](_0x54833e);}),PluginManager['registerCommand'](pluginData['name'],_0x46c6a8(0x204),_0x493e52=>{const _0xd85ebb=_0x46c6a8;VisuMZ[_0xd85ebb(0x706)][_0xd85ebb(0x204)](_0x493e52);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x26a),_0xf4078b=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_PullToTargetNode'](_0xf4078b);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x514),_0x3ba213=>{const _0x368280=_0x46c6a8;VisuMZ[_0x368280(0x706)][_0x368280(0x514)](_0x3ba213);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x6dc),_0x5ca46a=>{const _0x4f7c10=_0x46c6a8;VisuMZ['BattleGridSystem'][_0x4f7c10(0x6dc)](_0x5ca46a);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x30a),_0x39a7d8=>{const _0x28d11e=_0x46c6a8;VisuMZ[_0x28d11e(0x706)]['ActSeq_Grid_RemoveTriggerFromNode'](_0x39a7d8);}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x18a),_0x2060ad=>{const _0x5b5649=_0x46c6a8;VisuMZ[_0x5b5649(0x706)]['ActSeq_Grid_TeleportToNode'](_0x2060ad);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xa97),_0x697b8a=>{const _0x502c65=_0x46c6a8;VisuMZ['BattleGridSystem'][_0x502c65(0xa97)](_0x697b8a);}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xb11),_0x394984=>{const _0x5d646a=_0x46c6a8;if(!Imported[_0x5d646a(0x8ce)])return;if(!SceneManager[_0x5d646a(0x849)]())return;VisuMZ[_0x5d646a(0x239)](_0x394984,_0x394984);const _0x3d2981=VisuMZ[_0x5d646a(0x97d)](_0x394984['Targets']);for(const _0xb7639d of _0x3d2981){if(!_0xb7639d)continue;_0xb7639d[_0x5d646a(0x159)](_0x5d646a(0xc43)),_0xb7639d['removeHorrorEffect']('glitch'),_0xb7639d['removeHorrorEffect']('tv'),_0xb7639d[_0x5d646a(0xb7b)]();}$gamePlayer[_0x5d646a(0x233)]();}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Horror_GlitchCreate',_0x27a935=>{const _0x25bfaf=_0x46c6a8;if(!Imported[_0x25bfaf(0x8ce)])return;if(!SceneManager[_0x25bfaf(0x849)]())return;VisuMZ[_0x25bfaf(0x239)](_0x27a935,_0x27a935);const _0x372cd7=VisuMZ[_0x25bfaf(0x97d)](_0x27a935['Targets']),_0x599460=_0x25bfaf(0x683);_0x27a935[_0x25bfaf(0x92a)]=Math[_0x25bfaf(0x182)](_0x27a935[_0x25bfaf(0xc3e)]/0x2),_0x27a935[_0x25bfaf(0x269)]=_0x27a935[_0x25bfaf(0xc3e)],_0x27a935[_0x25bfaf(0x725)]=!![];for(const _0x5c3969 of _0x372cd7){if(!_0x5c3969)continue;_0x5c3969['setHorrorEffectSettings'](_0x599460,_0x27a935);}$gamePlayer[_0x25bfaf(0x233)]();}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x409),_0x6ea9a3=>{const _0x1320cd=_0x46c6a8;if(!Imported[_0x1320cd(0x8ce)])return;if(!SceneManager[_0x1320cd(0x849)]())return;VisuMZ[_0x1320cd(0x239)](_0x6ea9a3,_0x6ea9a3);const _0x21cfa8=VisuMZ['CreateActionSequenceTargets'](_0x6ea9a3[_0x1320cd(0x6b5)]);for(const _0x16f85a of _0x21cfa8){if(!_0x16f85a)continue;_0x16f85a[_0x1320cd(0x159)](_0x1320cd(0x683));}$gamePlayer[_0x1320cd(0x233)]();}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x38d),_0x315299=>{const _0x30b76a=_0x46c6a8;if(!Imported[_0x30b76a(0x8ce)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x315299,_0x315299);const _0xae8f49=VisuMZ[_0x30b76a(0x97d)](_0x315299['Targets']),_0x35d3a2=_0x30b76a(0xc43);for(const _0x253693 of _0xae8f49){if(!_0x253693)continue;_0x253693[_0x30b76a(0xa69)](_0x35d3a2,_0x315299);}$gamePlayer[_0x30b76a(0x233)]();}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x86f),_0x251d45=>{const _0x11ebe4=_0x46c6a8;if(!Imported[_0x11ebe4(0x8ce)])return;if(!SceneManager[_0x11ebe4(0x849)]())return;VisuMZ[_0x11ebe4(0x239)](_0x251d45,_0x251d45);const _0x443209=VisuMZ['CreateActionSequenceTargets'](_0x251d45[_0x11ebe4(0x6b5)]);for(const _0x31e176 of _0x443209){if(!_0x31e176)continue;_0x31e176[_0x11ebe4(0x159)](_0x11ebe4(0xc43));}$gamePlayer[_0x11ebe4(0x233)]();}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Horror_TVCreate',_0x14ff9e=>{const _0x3a218d=_0x46c6a8;if(!Imported[_0x3a218d(0x8ce)])return;if(!SceneManager[_0x3a218d(0x849)]())return;VisuMZ[_0x3a218d(0x239)](_0x14ff9e,_0x14ff9e);const _0xce9e89=VisuMZ[_0x3a218d(0x97d)](_0x14ff9e[_0x3a218d(0x6b5)]),_0x3f4186='tv';for(const _0x25df8c of _0xce9e89){if(!_0x25df8c)continue;_0x25df8c[_0x3a218d(0xa69)](_0x3f4186,_0x14ff9e);}$gamePlayer['refresh']();}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x359),_0xf3bedd=>{const _0x365ff7=_0x46c6a8;if(!Imported[_0x365ff7(0x8ce)])return;if(!SceneManager[_0x365ff7(0x849)]())return;VisuMZ[_0x365ff7(0x239)](_0xf3bedd,_0xf3bedd);const _0x15d54b=VisuMZ[_0x365ff7(0x97d)](_0xf3bedd[_0x365ff7(0x6b5)]);for(const _0xd03a6f of _0x15d54b){if(!_0xd03a6f)continue;_0xd03a6f[_0x365ff7(0x159)]('tv');}$gamePlayer[_0x365ff7(0x233)]();}),PluginManager['registerCommand'](pluginData['name'],_0x46c6a8(0x6ab),_0x47a24d=>{const _0x32f8ca=_0x46c6a8;if(!Imported[_0x32f8ca(0x9ec)])return;const _0x382f3f=SceneManager[_0x32f8ca(0x7a7)][_0x32f8ca(0x81e)];if(!_0x382f3f)return;if(VisuMZ[_0x32f8ca(0x569)][_0x32f8ca(0x9d7)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x32f8ca(0x761)]();return;}VisuMZ['ConvertParams'](_0x47a24d,_0x47a24d);const _0x2b51c0=_0x47a24d[_0x32f8ca(0x4b3)];_0x382f3f[_0x32f8ca(0x47f)](_0x2b51c0);}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],'ActSeq_Impact_ColorBreak',_0xfaa84c=>{const _0x324399=_0x46c6a8;if(!SceneManager[_0x324399(0x849)]())return;if(!Imported[_0x324399(0x9ec)])return;const _0x48a618=SceneManager[_0x324399(0x7a7)]['_spriteset'];if(!_0x48a618)return;VisuMZ['ConvertParams'](_0xfaa84c,_0xfaa84c);const _0x44a6e4=_0xfaa84c[_0x324399(0x304)]||0x1,_0x11fa7c=_0xfaa84c[_0x324399(0x249)]||0x1,_0x328dd5=_0xfaa84c['EasingType']||_0x324399(0x3de);_0x48a618[_0x324399(0xad7)](_0x44a6e4,_0x11fa7c,_0x328dd5);}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],'ActSeq_Impact_Desaturate',_0x4ca816=>{const _0x3ab704=_0x46c6a8;if(!Imported[_0x3ab704(0x9ec)])return;const _0x1ad6b4=SceneManager[_0x3ab704(0x7a7)][_0x3ab704(0x81e)];if(!_0x1ad6b4)return;if(VisuMZ[_0x3ab704(0x569)][_0x3ab704(0x9d7)]<=1.04){alert(_0x3ab704(0x5f8)),SceneManager[_0x3ab704(0x761)]();return;}VisuMZ[_0x3ab704(0x239)](_0x4ca816,_0x4ca816);const _0x4a36ba=_0x4ca816[_0x3ab704(0x4b3)];_0x1ad6b4[_0x3ab704(0x78e)](_0x4a36ba);}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x543),_0x29f2b0=>{const _0x3b4ad8=_0x46c6a8;if(!SceneManager[_0x3b4ad8(0x849)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0xdaf6fd=SceneManager['_scene']['_spriteset'];if(!_0xdaf6fd)return;VisuMZ[_0x3b4ad8(0x239)](_0x29f2b0,_0x29f2b0);const _0x2f0eb0=Number(_0x29f2b0[_0x3b4ad8(0x7bc)])||0x0,_0x525c9f=Number(_0x29f2b0[_0x3b4ad8(0x9bc)]),_0x411146=_0x29f2b0[_0x3b4ad8(0x249)]||0x1,_0x54e6ea=_0x29f2b0['EasingType']||_0x3b4ad8(0x3de);_0xdaf6fd[_0x3b4ad8(0x7e6)](_0x2f0eb0,_0x525c9f,_0x411146,_0x54e6ea);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x6a6),_0x375e6f=>{const _0x47e498=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x5019bf=SceneManager[_0x47e498(0x7a7)][_0x47e498(0x81e)];if(!_0x5019bf)return;VisuMZ[_0x47e498(0x239)](_0x375e6f,_0x375e6f);const _0x377004=Number(_0x375e6f['Angle'])||0x0,_0xd4b650=Number(_0x375e6f[_0x47e498(0x9bc)]),_0x4f2bfa=_0x375e6f[_0x47e498(0x249)]||0x1,_0x386c51=_0x375e6f['EasingType']||_0x47e498(0x3de),_0x17b9c8=VisuMZ[_0x47e498(0x97d)](_0x375e6f[_0x47e498(0x6b5)]);for(const _0xf2a016 of _0x17b9c8){if(!_0xf2a016)continue;if(!_0xf2a016[_0x47e498(0x62d)]())continue;_0xf2a016[_0x47e498(0x62d)]()[_0x47e498(0x7e6)](_0x377004,_0xd4b650,_0x4f2bfa,_0x386c51);}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x659),_0x42e2b0=>{const _0x51957e=_0x46c6a8;if(!SceneManager[_0x51957e(0x849)]())return;if(!Imported[_0x51957e(0x9ec)])return;VisuMZ[_0x51957e(0x239)](_0x42e2b0,_0x42e2b0);const _0x5b6128={'delay':_0x42e2b0['delay'],'duration':_0x42e2b0[_0x51957e(0xbec)],'hue':_0x42e2b0[_0x51957e(0x471)],'opacityStart':_0x42e2b0[_0x51957e(0xa71)],'tone':_0x42e2b0[_0x51957e(0x755)],'visible':!![]},_0x15697f=VisuMZ[_0x51957e(0x97d)](_0x42e2b0[_0x51957e(0x6b5)]);for(const _0x4ff800 of _0x15697f){if(!_0x4ff800)continue;_0x4ff800[_0x51957e(0xbac)](_0x5b6128);}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Impact_MotionTrailRemove',_0x3f33e4=>{const _0x1b5a2a=_0x46c6a8;if(!SceneManager[_0x1b5a2a(0x849)]())return;if(!Imported[_0x1b5a2a(0x9ec)])return;VisuMZ[_0x1b5a2a(0x239)](_0x3f33e4,_0x3f33e4);const _0x2c5015=VisuMZ['CreateActionSequenceTargets'](_0x3f33e4[_0x1b5a2a(0x6b5)]);for(const _0x24409f of _0x2c5015){if(!_0x24409f)continue;_0x24409f['clearBattlerMotionTrailData']();}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x955),_0x4fccf8=>{const _0x3c8d9d=_0x46c6a8;if(!Imported[_0x3c8d9d(0x9ec)])return;const _0x3c1c8a=SceneManager['_scene']['_spriteset'];if(!_0x3c1c8a)return;if(VisuMZ[_0x3c8d9d(0x569)][_0x3c8d9d(0x9d7)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x3c8d9d(0x761)]();return;}VisuMZ['ConvertParams'](_0x4fccf8,_0x4fccf8);const _0x1f1677=_0x4fccf8['Enable'];_0x3c1c8a[_0x3c8d9d(0x9e3)](_0x1f1677);}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x7d5),_0xa310de=>{const _0x382d1d=_0x46c6a8;if(!Imported[_0x382d1d(0x9ec)])return;const _0x39b6ec=SceneManager[_0x382d1d(0x7a7)][_0x382d1d(0x81e)];if(!_0x39b6ec)return;if(VisuMZ[_0x382d1d(0x569)][_0x382d1d(0x9d7)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x382d1d(0x239)](_0xa310de,_0xa310de);const _0x1389e2=_0xa310de['Enable'];_0x39b6ec['setupOversaturateImpactFilter'](_0x1389e2);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x4e3),_0x386f01=>{const _0x5ba7d1=_0x46c6a8;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2d993f=SceneManager['_scene'][_0x5ba7d1(0x81e)];if(!_0x2d993f)return;VisuMZ[_0x5ba7d1(0x239)](_0x386f01,_0x386f01);const _0x45894d=_0x386f01['X']||0x0,_0x4d2199=_0x386f01['Y']||0x0,_0x4098cb=_0x386f01[_0x5ba7d1(0x9ce)]||0x0,_0x52e8da=_0x386f01['Wave']||0x0,_0x9f5ee3=_0x386f01[_0x5ba7d1(0x249)]||0x1;_0x2d993f[_0x5ba7d1(0x63b)](_0x45894d,_0x4d2199,_0x4098cb,_0x52e8da,_0x9f5ee3);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x635),_0x5906cf=>{const _0x4fb03a=_0x46c6a8;if(!SceneManager[_0x4fb03a(0x849)]())return;if(!Imported[_0x4fb03a(0x9ec)])return;const _0x562052=SceneManager[_0x4fb03a(0x7a7)][_0x4fb03a(0x81e)];if(!_0x562052)return;VisuMZ[_0x4fb03a(0x239)](_0x5906cf,_0x5906cf);const _0x257eb9=VisuMZ['CreateActionSequenceTargets'](_0x5906cf[_0x4fb03a(0x6b5)]),_0x3a3252=_0x5906cf[_0x4fb03a(0xb17)],_0x26b387=_0x5906cf['OffsetX']||0x0,_0xb1acd4=_0x5906cf[_0x4fb03a(0x4e7)]||0x0,_0x101d73=_0x5906cf[_0x4fb03a(0x9ce)]||0x0,_0x5b18f9=_0x5906cf[_0x4fb03a(0x3ef)]||0x0,_0xd8924f=_0x5906cf[_0x4fb03a(0x249)]||0x1;for(const _0x5ae3f5 of _0x257eb9){if(!_0x5ae3f5)continue;if(!_0x5ae3f5['battler']())continue;const _0x139dca=_0x5ae3f5['battler']();let _0xb91f65=_0x139dca['_baseX'],_0x322daf=_0x139dca[_0x4fb03a(0x960)];_0xb91f65+=(Graphics['width']-Graphics['boxWidth'])/0x2,_0x322daf+=(Graphics[_0x4fb03a(0x1fc)]-Graphics[_0x4fb03a(0x187)])/0x2;if(_0x3a3252[_0x4fb03a(0x712)](/front/i))_0xb91f65+=(_0x5ae3f5['isEnemy']()?0x1:-0x1)*_0x139dca['mainSpriteWidth']()/0x2;else _0x3a3252[_0x4fb03a(0x712)](/back/i)&&(_0xb91f65+=(_0x5ae3f5[_0x4fb03a(0x8de)]()?-0x1:0x1)*_0x139dca[_0x4fb03a(0x3c8)]()/0x2);if(_0x3a3252[_0x4fb03a(0x712)](/head/i))_0x322daf-=_0x139dca[_0x4fb03a(0x230)]();else _0x3a3252['match'](/center/i)&&(_0x322daf-=_0x139dca[_0x4fb03a(0x230)]()/0x2);_0xb91f65+=_0x26b387,_0x322daf+=_0xb1acd4,_0x562052[_0x4fb03a(0x63b)](_0xb91f65,_0x322daf,_0x101d73,_0x5b18f9,_0xd8924f);}}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x4e9),_0x297024=>{const _0x20c6e0=_0x46c6a8;if(!SceneManager[_0x20c6e0(0x849)]())return;if(!Imported[_0x20c6e0(0x9ec)])return;const _0x304801=SceneManager[_0x20c6e0(0x7a7)][_0x20c6e0(0x81e)];if(!_0x304801)return;VisuMZ[_0x20c6e0(0x239)](_0x297024,_0x297024);const _0x55bfd5=VisuMZ['CreateActionSequenceTargets'](_0x297024['Targets']),_0x4bb3af=_0x297024[_0x20c6e0(0xb17)],_0x3c6ba2=_0x297024['OffsetX']||0x0,_0x39b8d3=_0x297024[_0x20c6e0(0x4e7)]||0x0,_0x34cc04=_0x297024[_0x20c6e0(0x9ce)]||0x0,_0x197abd=_0x297024[_0x20c6e0(0x3ef)]||0x0,_0x5b397c=_0x297024[_0x20c6e0(0x249)]||0x1,_0x605ce0=Math[_0x20c6e0(0x9bd)](..._0x55bfd5['map'](_0x590739=>_0x590739[_0x20c6e0(0x62d)]()[_0x20c6e0(0xc31)]-_0x590739[_0x20c6e0(0x62d)]()['mainSpriteWidth']()/0x2)),_0x5ca654=Math['max'](..._0x55bfd5[_0x20c6e0(0x883)](_0x3a360b=>_0x3a360b[_0x20c6e0(0x62d)]()[_0x20c6e0(0xc31)]+_0x3a360b[_0x20c6e0(0x62d)]()[_0x20c6e0(0x3c8)]()/0x2)),_0x317833=Math[_0x20c6e0(0x9bd)](..._0x55bfd5[_0x20c6e0(0x883)](_0x1fa681=>_0x1fa681[_0x20c6e0(0x62d)]()['_baseY']-_0x1fa681['battler']()[_0x20c6e0(0x230)]())),_0x38823a=Math['max'](..._0x55bfd5[_0x20c6e0(0x883)](_0x3a7683=>_0x3a7683[_0x20c6e0(0x62d)]()['_baseY'])),_0x3f486d=_0x55bfd5[_0x20c6e0(0x2ed)](_0xea42cb=>_0xea42cb[_0x20c6e0(0x4ec)]())[_0x20c6e0(0x50d)],_0x7b254=_0x55bfd5[_0x20c6e0(0x2ed)](_0xd57625=>_0xd57625[_0x20c6e0(0x8de)]())[_0x20c6e0(0x50d)];let _0x4fa621=0x0,_0x5eaafe=0x0;if(_0x4bb3af[_0x20c6e0(0x712)](/front/i))_0x4fa621=_0x3f486d>=_0x7b254?_0x605ce0:_0x5ca654;else{if(_0x4bb3af['match'](/middle/i))_0x4fa621=(_0x605ce0+_0x5ca654)/0x2,melee=-0x1;else _0x4bb3af['match'](/back/i)&&(_0x4fa621=_0x3f486d>=_0x7b254?_0x5ca654:_0x605ce0);}if(_0x4bb3af['match'](/head/i))_0x5eaafe=_0x317833;else{if(_0x4bb3af[_0x20c6e0(0x712)](/center/i))_0x5eaafe=(_0x317833+_0x38823a)/0x2;else _0x4bb3af[_0x20c6e0(0x712)](/base/i)&&(_0x5eaafe=_0x38823a);}_0x4fa621+=(Graphics[_0x20c6e0(0x1e1)]-Graphics[_0x20c6e0(0xb13)])/0x2,_0x5eaafe+=(Graphics['height']-Graphics[_0x20c6e0(0x187)])/0x2,_0x4fa621+=_0x3c6ba2,_0x5eaafe+=_0x39b8d3,_0x304801[_0x20c6e0(0x63b)](_0x4fa621,_0x5eaafe,_0x34cc04,_0x197abd,_0x5b397c);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x44e),_0x4d322d=>{const _0x1a7bf6=_0x46c6a8;if(!Imported[_0x1a7bf6(0x9ec)])return;const _0x3dc4fb=SceneManager[_0x1a7bf6(0x7a7)][_0x1a7bf6(0x81e)];if(!_0x3dc4fb)return;if(VisuMZ[_0x1a7bf6(0x569)][_0x1a7bf6(0x9d7)]<=1.04){alert(_0x1a7bf6(0x5f8)),SceneManager[_0x1a7bf6(0x761)]();return;}VisuMZ['ConvertParams'](_0x4d322d,_0x4d322d);const _0x1a39b5=$gameTemp[_0x1a7bf6(0xb5d)](),_0x535338=Math['max'](0.01,_0x4d322d[_0x1a7bf6(0xaa4)]);$gameTemp[_0x1a7bf6(0xa53)](_0x535338,_0x1a39b5);}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xbab),_0x991b7f=>{const _0x3ea691=_0x46c6a8;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x516b13=SceneManager[_0x3ea691(0x7a7)]['_spriteset'];if(!_0x516b13)return;if(VisuMZ[_0x3ea691(0x569)][_0x3ea691(0x9d7)]<=1.04){alert(_0x3ea691(0x5f8)),SceneManager['exit']();return;}VisuMZ[_0x3ea691(0x239)](_0x991b7f,_0x991b7f);const _0x53da16=$gameTemp[_0x3ea691(0xb5d)](),_0x33363f=_0x991b7f['ms']||0x1;VisuMZ[_0x3ea691(0x569)][_0x3ea691(0xa96)](_0x33363f,_0x53da16);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Impact_ZoomBlurPoint',_0x1b9d32=>{const _0x2253ab=_0x46c6a8;if(!Imported[_0x2253ab(0x9ec)])return;const _0x379f67=SceneManager[_0x2253ab(0x7a7)][_0x2253ab(0x81e)];if(!_0x379f67)return;VisuMZ[_0x2253ab(0x239)](_0x1b9d32,_0x1b9d32);const _0x1a2181=_0x1b9d32['X']||0x0,_0x5d84ed=_0x1b9d32['Y']||0x0,_0x54f27c=_0x1b9d32[_0x2253ab(0x4e0)]||0x0,_0xe8b914=_0x1b9d32['Radius']||0x0,_0x41d07b=_0x1b9d32['Duration']||0x1,_0x228e6e=_0x1b9d32[_0x2253ab(0xc15)]||'Linear';_0x379f67[_0x2253ab(0x16b)](_0x54f27c,_0x1a2181,_0x5d84ed,_0xe8b914,_0x41d07b,_0x228e6e);}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x774),_0x50c71d=>{const _0x9a02d8=_0x46c6a8;if(!Imported[_0x9a02d8(0x9ec)])return;const _0x2356d6=SceneManager[_0x9a02d8(0x7a7)][_0x9a02d8(0x81e)];if(!_0x2356d6)return;VisuMZ[_0x9a02d8(0x239)](_0x50c71d,_0x50c71d);const _0x5c450b=VisuMZ['CreateActionSequenceTargets'](_0x50c71d['Targets']),_0x3c2876=_0x50c71d[_0x9a02d8(0xb17)],_0x49a864=_0x50c71d['OffsetX']||0x0,_0x409796=_0x50c71d[_0x9a02d8(0x4e7)]||0x0,_0x1d30d2=_0x50c71d[_0x9a02d8(0x4e0)]||0x0,_0x4fc1d7=_0x50c71d[_0x9a02d8(0x6bf)]||0x0,_0x57eb34=_0x50c71d['Duration']||0x1,_0x49a0bf=_0x50c71d[_0x9a02d8(0xc15)]||_0x9a02d8(0x3de),_0x57da43=Math[_0x9a02d8(0x9bd)](..._0x5c450b[_0x9a02d8(0x883)](_0x3cb6b6=>_0x3cb6b6[_0x9a02d8(0x62d)]()[_0x9a02d8(0xc31)]-_0x3cb6b6['battler']()[_0x9a02d8(0x3c8)]()/0x2)),_0x5118ff=Math[_0x9a02d8(0x968)](..._0x5c450b[_0x9a02d8(0x883)](_0x2483e8=>_0x2483e8['battler']()[_0x9a02d8(0xc31)]+_0x2483e8[_0x9a02d8(0x62d)]()[_0x9a02d8(0x3c8)]()/0x2)),_0x11f2c4=Math[_0x9a02d8(0x9bd)](..._0x5c450b[_0x9a02d8(0x883)](_0x1c909b=>_0x1c909b[_0x9a02d8(0x62d)]()[_0x9a02d8(0x960)]-_0x1c909b[_0x9a02d8(0x62d)]()[_0x9a02d8(0x230)]())),_0x50c9e0=Math[_0x9a02d8(0x968)](..._0x5c450b[_0x9a02d8(0x883)](_0xbd6a18=>_0xbd6a18[_0x9a02d8(0x62d)]()[_0x9a02d8(0x960)])),_0x5721c6=_0x5c450b[_0x9a02d8(0x2ed)](_0x28afd4=>_0x28afd4['isActor']())['length'],_0x5990ff=_0x5c450b[_0x9a02d8(0x2ed)](_0x1ea764=>_0x1ea764[_0x9a02d8(0x8de)]())[_0x9a02d8(0x50d)];let _0x54aa1b=0x0,_0x2d136e=0x0;if(_0x3c2876[_0x9a02d8(0x712)](/front/i))_0x54aa1b=_0x5721c6>=_0x5990ff?_0x57da43:_0x5118ff;else{if(_0x3c2876['match'](/middle/i))_0x54aa1b=(_0x57da43+_0x5118ff)/0x2,melee=-0x1;else _0x3c2876[_0x9a02d8(0x712)](/back/i)&&(_0x54aa1b=_0x5721c6>=_0x5990ff?_0x5118ff:_0x57da43);}if(_0x3c2876[_0x9a02d8(0x712)](/head/i))_0x2d136e=_0x11f2c4;else{if(_0x3c2876['match'](/center/i))_0x2d136e=(_0x11f2c4+_0x50c9e0)/0x2;else _0x3c2876['match'](/base/i)&&(_0x2d136e=_0x50c9e0);}_0x54aa1b+=(Graphics['width']-Graphics[_0x9a02d8(0xb13)])/0x2,_0x2d136e+=(Graphics[_0x9a02d8(0x1fc)]-Graphics[_0x9a02d8(0x187)])/0x2,_0x54aa1b+=_0x49a864,_0x2d136e+=_0x409796,_0x2356d6['setupZoomBlurImpactFilter'](_0x1d30d2,_0x54aa1b,_0x2d136e,_0x4fc1d7,_0x57eb34,_0x49a0bf);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Inject_AnimationStart',_0x4d930d=>{const _0x360f7a=_0x46c6a8;if(!Imported[_0x360f7a(0x9ec)])return;const _0x24070f=SceneManager[_0x360f7a(0x7a7)]['_spriteset'];if(!_0x24070f)return;if(VisuMZ['ActSeqImpact'][_0x360f7a(0x9d7)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x360f7a(0x761)]();return;}VisuMZ[_0x360f7a(0x239)](_0x4d930d,_0x4d930d);const _0x593705=VisuMZ[_0x360f7a(0x97d)](_0x4d930d['Targets']),_0x1247b0={'filename':_0x4d930d['Filename'],'horzCells':_0x4d930d[_0x360f7a(0x888)]||0x1,'vertCells':_0x4d930d[_0x360f7a(0x43b)]||0x1,'frameDelay':_0x4d930d['frameDelay']||0x1,'smooth':_0x4d930d['smooth']||![],'anchorX':_0x4d930d[_0x360f7a(0x862)]||0x0,'anchorY':_0x4d930d[_0x360f7a(0x636)]||0x0,'offsetX':_0x4d930d[_0x360f7a(0xa4a)]||0x0,'offsetY':_0x4d930d[_0x360f7a(0x437)]||0x0};for(const _0x34a91a of _0x593705){if(!_0x34a91a)continue;if(!_0x34a91a['battler']())continue;_0x34a91a[_0x360f7a(0x62d)]()['startInjectAnimation'](_0x1247b0);}const _0x5efb42=$gameTemp[_0x360f7a(0xb5d)]();_0x5efb42&&_0x5efb42[_0x360f7a(0x77f)](_0x360f7a(0x1b0));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Inject_AnimationEnd',_0x31e351=>{const _0x276972=_0x46c6a8;if(!Imported[_0x276972(0x9ec)])return;const _0x2e146b=SceneManager[_0x276972(0x7a7)][_0x276972(0x81e)];if(!_0x2e146b)return;if(VisuMZ[_0x276972(0x569)]['version']<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x276972(0x761)]();return;}VisuMZ[_0x276972(0x239)](_0x31e351,_0x31e351);const _0x36b241=VisuMZ['CreateActionSequenceTargets'](_0x31e351['Targets']);for(const _0x54a97a of _0x36b241){if(!_0x54a97a)continue;if(!_0x54a97a['battler']())continue;_0x54a97a[_0x276972(0x62d)]()[_0x276972(0x6e2)]();}}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x607),_0x269936=>{const _0x4eb467=_0x46c6a8;if(!Imported[_0x4eb467(0x9ec)])return;const _0x34e40c=SceneManager[_0x4eb467(0x7a7)][_0x4eb467(0x81e)];if(!_0x34e40c)return;if(VisuMZ[_0x4eb467(0x569)][_0x4eb467(0x9d7)]<=1.05){alert(_0x4eb467(0x5f8)),SceneManager[_0x4eb467(0x761)]();return;}VisuMZ[_0x4eb467(0x239)](_0x269936,_0x269936);const _0x311720=VisuMZ[_0x4eb467(0x97d)](_0x269936[_0x4eb467(0x6b5)]),_0x3a4cc0=_0x269936[_0x4eb467(0x612)];for(const _0x1bf032 of _0x311720){if(!_0x1bf032)continue;if(!_0x1bf032[_0x4eb467(0x62d)]())continue;_0x1bf032[_0x4eb467(0x62d)]()[_0x4eb467(0x347)](_0x3a4cc0);}}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],'ActSeq_Inject_WaitForInjectAni',_0x4834fe=>{const _0x364d33=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;const _0xb9efe4=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xb9efe4)return;_0xb9efe4[_0x364d33(0x77f)](_0x364d33(0xbd0));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x6c8),_0x18bac8=>{const _0x4c507e=_0x46c6a8;if(!SceneManager[_0x4c507e(0x849)]())return;VisuMZ['ConvertParams'](_0x18bac8,_0x18bac8);const _0xd91d78=$gameTemp[_0x4c507e(0xb5d)](),_0x474d02=BattleManager[_0x4c507e(0x996)],_0x4dc710=BattleManager[_0x4c507e(0x80d)],_0x280cd1=BattleManager[_0x4c507e(0x68b)];if(!_0xd91d78||!_0x474d02||!_0x4dc710)return;if(!_0x474d02['item']())return;const _0x5eb815=VisuMZ['CreateActionSequenceTargets'](_0x18bac8['Targets']);for(const _0x2329a7 of _0x5eb815){if(!_0x2329a7)continue;_0x280cd1[_0x4c507e(0x78c)](_0x4c507e(0xc1d),_0x4dc710,_0x2329a7);}_0xd91d78[_0x4c507e(0x77f)](_0x4c507e(0x7be));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_ActiveChainInputDisable',_0x155a44=>{const _0x3d0c86=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3d0c86(0x626)])return;$gameTemp[_0x3d0c86(0x213)]=!![];}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x841),_0x19b282=>{const _0x160df2=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x19b282,_0x19b282);const _0x15bb62=[_0x160df2(0x899),'MAXMP',_0x160df2(0xb78),_0x160df2(0xae1),'MAT',_0x160df2(0xc4c),_0x160df2(0x97a),_0x160df2(0x6e1)],_0x16ab18=_0x19b282[_0x160df2(0x33b)],_0x39016a=_0x19b282[_0x160df2(0x675)],_0x159f0b=_0x19b282[_0x160df2(0x82b)],_0x500ff9=VisuMZ['CreateActionSequenceTargets'](_0x19b282[_0x160df2(0x6b5)]);for(const _0x5ac5c4 of _0x500ff9){if(!_0x5ac5c4)continue;for(const _0xa3c3af of _0x16ab18){const _0x1f11a5=_0x15bb62[_0x160df2(0x3bd)](_0xa3c3af[_0x160df2(0x85e)]()['trim']());_0x1f11a5>=0x0&&_0x1f11a5<=0x7&&_0x5ac5c4['addBuff'](_0x1f11a5,_0x159f0b);}for(const _0x3e2ce8 of _0x39016a){const _0x15b221=_0x15bb62[_0x160df2(0x3bd)](_0x3e2ce8[_0x160df2(0x85e)]()[_0x160df2(0xa28)]());_0x15b221>=0x0&&_0x15b221<=0x7&&_0x5ac5c4[_0x160df2(0x667)](_0x15b221,_0x159f0b);}}}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x551),_0x232ff7=>{const _0x278530=_0x46c6a8;if(!SceneManager[_0x278530(0x849)]())return;VisuMZ[_0x278530(0x239)](_0x232ff7,_0x232ff7);const _0x2861a9=_0x232ff7[_0x278530(0x564)],_0x5c5411=VisuMZ['CreateActionSequenceTargets'](_0x232ff7['Targets']);for(const _0x672fc3 of _0x5c5411){if(!_0x672fc3)continue;for(const _0x5ec902 of _0x2861a9){_0x672fc3[_0x278530(0xbf9)](_0x5ec902);}}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x3c7),_0x5c4e2b=>{const _0x175988=_0x46c6a8;if(!SceneManager[_0x175988(0x849)]())return;VisuMZ[_0x175988(0x239)](_0x5c4e2b,_0x5c4e2b);const _0x2e3bb5=BattleManager['_action'],_0x3af1cc={'arPenRate':_0x5c4e2b[_0x175988(0x97c)],'arPenFlat':_0x5c4e2b[_0x175988(0x794)],'arRedRate':_0x5c4e2b[_0x175988(0x556)],'arRedFlat':_0x5c4e2b[_0x175988(0x33f)]};_0x2e3bb5['_armorPenetration']=_0x3af1cc;}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x461),_0x4bec72=>{const _0x4d0038=_0x46c6a8;if(!SceneManager[_0x4d0038(0x849)]())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ[_0x4d0038(0x239)](_0x4bec72,_0x4bec72);const _0x4c9eb6=VisuMZ[_0x4d0038(0x97d)](_0x4bec72[_0x4d0038(0x6b5)]),_0x2ba5ea=_0x4bec72[_0x4d0038(0x3a6)]||0x1;for(const _0x24173a of _0x4c9eb6){if(!_0x24173a)continue;if(!_0x24173a['isEnemy']())continue;_0x24173a[_0x4d0038(0x967)](_0x2ba5ea);}}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],'ActSeq_Mechanics_AtbGauge',_0x39acd0=>{const _0x12b706=_0x46c6a8;if(!SceneManager[_0x12b706(0x849)]())return;if(!Imported[_0x12b706(0xb65)])return;if(!BattleManager['isATB']())return;VisuMZ[_0x12b706(0x239)](_0x39acd0,_0x39acd0);const _0x3ed92b=VisuMZ[_0x12b706(0x97d)](_0x39acd0[_0x12b706(0x6b5)]),_0x438c3f=_0x39acd0[_0x12b706(0xadf)],_0xb07c3e=_0x39acd0[_0x12b706(0xadf)],_0x7605b=_0x39acd0[_0x12b706(0x494)];for(const _0x39ca14 of _0x3ed92b){if(!_0x39ca14)continue;if(_0x39ca14[_0x12b706(0x5fe)]())_0x39ca14[_0x12b706(0x75b)](_0x438c3f);else{if(_0x39ca14[_0x12b706(0x6b3)]()){_0x39ca14[_0x12b706(0xa80)](_0xb07c3e);if(_0x7605b)_0x39ca14[_0x12b706(0xa8d)]();}}}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x3ae),_0x1c55b8=>{const _0x3c8334=_0x46c6a8;if(!SceneManager[_0x3c8334(0x849)]())return;if(!Imported[_0x3c8334(0x714)])return;VisuMZ[_0x3c8334(0x239)](_0x1c55b8,_0x1c55b8);const _0x6949e1=VisuMZ[_0x3c8334(0x97d)](_0x1c55b8[_0x3c8334(0x6b5)]),_0x8086ea=_0x1c55b8['BoostPoints'];for(const _0x596c35 of _0x6949e1){if(!_0x596c35)continue;_0x596c35[_0x3c8334(0x7b9)](_0x8086ea);}}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x1ea),_0x5878ed=>{const _0x8580e=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x8580e(0x714)])return;if(!BattleManager[_0x8580e(0x80d)])return;VisuMZ[_0x8580e(0x239)](_0x5878ed,_0x5878ed);const _0x5836f0=_0x5878ed['VariableID'];$gameVariables[_0x8580e(0x67a)](_0x5836f0,BattleManager[_0x8580e(0x80d)][_0x8580e(0x660)]());}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Mechanics_BreakShieldChange',_0x387e86=>{const _0x2fccec=_0x46c6a8;if(!SceneManager[_0x2fccec(0x849)]())return;if(!Imported[_0x2fccec(0xc17)])return;VisuMZ[_0x2fccec(0x239)](_0x387e86,_0x387e86);const _0x511072=VisuMZ['CreateActionSequenceTargets'](_0x387e86['Targets']),_0x12a9e4=_0x387e86[_0x2fccec(0x96f)];for(const _0x2f0493 of _0x511072){if(!_0x2f0493)continue;if(_0x2f0493[_0x2fccec(0x235)]())continue;if(!_0x2f0493[_0x2fccec(0xb90)]())continue;_0x2f0493[_0x2fccec(0x1f1)](_0x12a9e4);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_BreakShieldReset',_0x3dd984=>{const _0x4f3b06=_0x46c6a8;if(!SceneManager[_0x4f3b06(0x849)]())return;if(!Imported[_0x4f3b06(0xc17)])return;VisuMZ[_0x4f3b06(0x239)](_0x3dd984,_0x3dd984);const _0x3d9827=VisuMZ[_0x4f3b06(0x97d)](_0x3dd984[_0x4f3b06(0x6b5)]);for(const _0x18650c of _0x3d9827){if(!_0x18650c)continue;if(_0x18650c[_0x4f3b06(0x235)]())continue;if(!_0x18650c[_0x4f3b06(0xb90)]())continue;_0x18650c[_0x4f3b06(0x7b3)]();}}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x87d),_0x55313c=>{const _0x4ab3f0=_0x46c6a8;if(!SceneManager[_0x4ab3f0(0x849)]())return;if(!Imported[_0x4ab3f0(0x7c9)])return;if(!BattleManager[_0x4ab3f0(0x9ba)]())return;VisuMZ[_0x4ab3f0(0x239)](_0x55313c,_0x55313c);const _0x42f877=VisuMZ[_0x4ab3f0(0x97d)](_0x55313c[_0x4ab3f0(0x6b5)]),_0x4308ef=_0x55313c[_0x4ab3f0(0x2f6)];for(const _0x206dd2 of _0x42f877){if(!_0x206dd2)continue;_0x206dd2[_0x4ab3f0(0xa7f)](_0x4308ef);}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x1cf),_0x158916=>{const _0x27e859=_0x46c6a8;if(!SceneManager[_0x27e859(0x849)]())return;VisuMZ['ConvertParams'](_0x158916,_0x158916);const _0xdc6bfa=$gameTemp[_0x27e859(0xb5d)](),_0x326036=BattleManager[_0x27e859(0x996)],_0x291597=BattleManager['_subject'];if(!_0xdc6bfa||!_0x326036||!_0x291597)return;if(!_0x326036[_0x27e859(0x6e9)]())return;const _0x16c8cb=VisuMZ[_0x27e859(0x97d)](_0x158916[_0x27e859(0x6b5)]);for(const _0x45bed3 of _0x16c8cb){if(!_0x45bed3)continue;_0x158916[_0x27e859(0x752)]&&(_0x45bed3['removeImmortal'](),_0x45bed3[_0x27e859(0xbf9)](_0x45bed3[_0x27e859(0x348)]())),_0x45bed3[_0x27e859(0x734)]()&&_0x45bed3[_0x27e859(0x31b)]();}_0xdc6bfa[_0x27e859(0x77f)](_0x27e859(0x9eb));}),PluginManager['registerCommand'](pluginData['name'],_0x46c6a8(0x5b4),_0x2af2fc=>{const _0x46e5b7=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x46e5b7(0x6d0)])return;if(!BattleManager[_0x46e5b7(0x410)]())return;VisuMZ['ConvertParams'](_0x2af2fc,_0x2af2fc);const _0x3f1d70=VisuMZ[_0x46e5b7(0x97d)](_0x2af2fc['Targets']),_0x21e096=_0x2af2fc[_0x46e5b7(0xb3e)];for(const _0x21e562 of _0x3f1d70){if(!_0x21e562)continue;_0x21e562[_0x46e5b7(0xa1a)](_0x21e096);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_CtbSpeed',_0x5f0bbe=>{const _0x30dd23=_0x46c6a8;if(!SceneManager[_0x30dd23(0x849)]())return;if(!Imported[_0x30dd23(0x6d0)])return;if(!BattleManager[_0x30dd23(0x410)]())return;VisuMZ[_0x30dd23(0x239)](_0x5f0bbe,_0x5f0bbe);const _0x206145=VisuMZ[_0x30dd23(0x97d)](_0x5f0bbe[_0x30dd23(0x6b5)]),_0x26f556=_0x5f0bbe[_0x30dd23(0xadf)],_0x26f4f3=_0x5f0bbe[_0x30dd23(0xadf)];for(const _0x5346a8 of _0x206145){if(!_0x5346a8)continue;if(_0x5346a8[_0x30dd23(0x573)]===_0x30dd23(0x67e))_0x5346a8[_0x30dd23(0x91f)](_0x26f556);else _0x5346a8[_0x30dd23(0x573)]==='casting'&&_0x5346a8[_0x30dd23(0x29c)](_0x26f4f3);}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x43e),_0x32489d=>{const _0x2a5e5c=_0x46c6a8;if(!SceneManager[_0x2a5e5c(0x849)]())return;VisuMZ[_0x2a5e5c(0x239)](_0x32489d,_0x32489d);const _0x11048d=BattleManager[_0x2a5e5c(0x996)];if(!_0x11048d)return;let _0x296989=_0x32489d[_0x2a5e5c(0x474)];_0x11048d[_0x2a5e5c(0x197)](_0x296989);}),PluginManager['registerCommand'](pluginData['name'],_0x46c6a8(0x298),_0x304b7d=>{const _0x56dcad=_0x46c6a8;if(!SceneManager[_0x56dcad(0x849)]())return;VisuMZ[_0x56dcad(0x239)](_0x304b7d,_0x304b7d);const _0x3705ef=VisuMZ[_0x56dcad(0x97d)](_0x304b7d['Targets']);for(const _0x5461be of _0x3705ef){if(!_0x5461be)continue;if(_0x5461be[_0x56dcad(0x2f0)]())_0x5461be[_0x56dcad(0x875)]();}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x736),_0x2c55c5=>{const _0x2cdc8f=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2cdc8f(0x239)](_0x2c55c5,_0x2c55c5);const _0x15d194=$gameTemp[_0x2cdc8f(0xb5d)](),_0x210bea=BattleManager['_subject'],_0x4b8e58=_0x2c55c5[_0x2cdc8f(0xac0)];if(!_0x15d194)return;if(!_0x210bea)return;_0x210bea&&_0x210bea[_0x2cdc8f(0xa10)]()&&_0x4b8e58[_0x2cdc8f(0x85e)]()['trim']()!=='UNTITLED'&&_0x15d194[_0x2cdc8f(0x825)]([_0x4b8e58]);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x852),_0x13f15c=>{const _0x17304d=_0x46c6a8;if(!SceneManager[_0x17304d(0x849)]())return;VisuMZ[_0x17304d(0x239)](_0x13f15c,_0x13f15c);const _0x4243f2=$gameTemp['getLastPluginCommandInterpreter'](),_0x2b68fb=BattleManager[_0x17304d(0x68b)];if(!_0x4243f2)return;const _0x33d995=VisuMZ[_0x17304d(0x97d)](_0x13f15c[_0x17304d(0xbc9)]),_0x480797=VisuMZ[_0x17304d(0x97d)](_0x13f15c[_0x17304d(0x6b5)]);for(const _0x1ca349 of _0x33d995){for(const _0x5d395c of _0x480797){if(!_0x5d395c)continue;const _0x1c32bd=$dataSkills[_0x1ca349[_0x17304d(0xb16)]()];_0x2b68fb[_0x17304d(0x78c)](_0x17304d(0x611),_0x1ca349,_0x5d395c,_0x1c32bd);}}_0x4243f2[_0x17304d(0x77f)](_0x17304d(0x7be));}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x4e8),_0x3d2a45=>{const _0x22bd7a=_0x46c6a8;if(!SceneManager[_0x22bd7a(0x849)]())return;VisuMZ[_0x22bd7a(0x239)](_0x3d2a45,_0x3d2a45);const _0x5359dc=$gameTemp['getLastPluginCommandInterpreter'](),_0x1c40e8=BattleManager[_0x22bd7a(0x68b)];if(!_0x5359dc)return;const _0x545b54=VisuMZ['CreateActionSequenceTargets'](_0x3d2a45[_0x22bd7a(0xbc9)]),_0x333124=VisuMZ[_0x22bd7a(0x97d)](_0x3d2a45[_0x22bd7a(0x6b5)]);for(const _0x47af1a of _0x545b54){for(const _0x492f52 of _0x333124){if(!_0x492f52)continue;const _0x165106=$dataSkills[_0x47af1a['guardSkillId']()];_0x1c40e8[_0x22bd7a(0x78c)]('emulateActionEffect',_0x47af1a,_0x492f52,_0x165106);}}_0x5359dc['setWaitMode']('battlelog');}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x38e),_0x23f28d=>{const _0x24f9d9=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x24f9d9(0x239)](_0x23f28d,_0x23f28d);const _0x202697=$gameTemp['getLastPluginCommandInterpreter'](),_0x6ee54f=BattleManager[_0x24f9d9(0x68b)],_0x3d6da6=Number(_0x23f28d[_0x24f9d9(0x5ea)]||0x1),_0x2fe187=$dataItems[_0x3d6da6];if(!_0x202697)return;if(!_0x2fe187)return;const _0x36af17=VisuMZ[_0x24f9d9(0x97d)](_0x23f28d[_0x24f9d9(0xbc9)]),_0x4ddd04=VisuMZ[_0x24f9d9(0x97d)](_0x23f28d[_0x24f9d9(0x6b5)]);for(const _0x16f426 of _0x36af17){for(const _0x416bf1 of _0x4ddd04){if(!_0x416bf1)continue;_0x6ee54f['push'](_0x24f9d9(0x611),_0x16f426,_0x416bf1,_0x2fe187);}}_0x202697[_0x24f9d9(0x77f)](_0x24f9d9(0x7be));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x3a5),_0x94ccf=>{const _0x3ff8e2=_0x46c6a8;if(!SceneManager[_0x3ff8e2(0x849)]())return;VisuMZ[_0x3ff8e2(0x239)](_0x94ccf,_0x94ccf);let _0x398e40=Number(_0x94ccf[_0x3ff8e2(0x3e0)]||0x0);if(_0x398e40<=0x0){const _0x64ad3b=BattleManager[_0x3ff8e2(0x996)];if(_0x64ad3b&&_0x64ad3b[_0x3ff8e2(0x66a)]())_0x398e40=_0x64ad3b['item']()['id'];else return;}const _0x35626d=$dataSkills[_0x398e40];if(!_0x35626d)return;const _0x13bedf=VisuMZ[_0x3ff8e2(0x97d)](_0x94ccf['Users']);for(const _0xb924e of _0x13bedf){_0xb924e[_0x3ff8e2(0x447)](_0x35626d);}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xb3c),_0x3841e9=>{const _0x4b03b4=_0x46c6a8;if(!SceneManager[_0x4b03b4(0x849)]())return;VisuMZ[_0x4b03b4(0x239)](_0x3841e9,_0x3841e9);const _0x20ba08=$gameTemp[_0x4b03b4(0xb5d)](),_0x31b943=BattleManager[_0x4b03b4(0x68b)],_0x262971=Number(_0x3841e9[_0x4b03b4(0x3e0)]||0x1),_0x54c2b9=$dataSkills[_0x262971];if(!_0x20ba08)return;if(!_0x54c2b9)return;const _0x4f15e1=VisuMZ[_0x4b03b4(0x97d)](_0x3841e9['Users']),_0x136c45=VisuMZ[_0x4b03b4(0x97d)](_0x3841e9[_0x4b03b4(0x6b5)]);for(const _0x44e58c of _0x4f15e1){for(const _0x491b13 of _0x136c45){if(!_0x491b13)continue;_0x31b943[_0x4b03b4(0x78c)]('emulateActionEffect',_0x44e58c,_0x491b13,_0x54c2b9);}}_0x20ba08[_0x4b03b4(0x77f)](_0x4b03b4(0x7be));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x7fd),_0x2e0fb7=>{const _0x53fa05=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x53fa05(0x239)](_0x2e0fb7,_0x2e0fb7);const _0x26d876=VisuMZ[_0x53fa05(0x97d)](_0x2e0fb7[_0x53fa05(0x6b5)]);for(const _0x4afc59 of _0x26d876){if(!_0x4afc59)continue;if(!_0x4afc59['isEnemy']())continue;_0x4afc59['escape']();}}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x11a),_0x11a29f=>{const _0x438ebd=_0x46c6a8;if(!SceneManager[_0x438ebd(0x849)]())return;if(!Imported['VisuMZ_2_BattleSystemETB'])return;if(!BattleManager[_0x438ebd(0x1b8)]())return;VisuMZ[_0x438ebd(0x239)](_0x11a29f,_0x11a29f);const _0x20e9a9=_0x11a29f['ActionCount'];BattleManager[_0x438ebd(0x80d)]&&BattleManager[_0x438ebd(0x80d)]['friendsUnit']()[_0x438ebd(0x2ca)](_0x20e9a9);}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x403),_0x1c5933=>{const _0x5eb111=_0x46c6a8;if(!SceneManager[_0x5eb111(0x849)]())return;if(!Imported[_0x5eb111(0x1c3)])return;if(!BattleManager[_0x5eb111(0x933)]())return;VisuMZ[_0x5eb111(0x239)](_0x1c5933,_0x1c5933);const _0x367e57=_0x1c5933[_0x5eb111(0x74d)];BattleManager[_0x5eb111(0x80d)]&&BattleManager[_0x5eb111(0x80d)][_0x5eb111(0x8a2)]()[_0x5eb111(0xb5a)](_0x367e57);}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x8b7),_0x2c5eb4=>{const _0x44bc59=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2c5eb4,_0x2c5eb4);const _0x561370=VisuMZ['CreateActionSequenceTargets'](_0x2c5eb4['Targets']),_0xe63669=_0x2c5eb4[_0x44bc59(0x4f5)],_0x3161e8=_0x2c5eb4['HP_Flat'],_0x560d04=_0x2c5eb4[_0x44bc59(0xb80)],_0x3c6534=_0x2c5eb4[_0x44bc59(0x49b)],_0x103ea6=_0x2c5eb4[_0x44bc59(0x2db)],_0x42de44=_0x2c5eb4[_0x44bc59(0x69a)],_0x6229dc=_0x2c5eb4[_0x44bc59(0x5b8)];for(const _0x3be9ea of _0x561370){if(!_0x3be9ea)continue;const _0x1cf149=_0x3be9ea['isAlive'](),_0x5ad786=Math[_0x44bc59(0xa5e)](_0xe63669*_0x3be9ea[_0x44bc59(0xba0)]+_0x3161e8),_0x127c3e=Math[_0x44bc59(0xa5e)](_0x560d04*_0x3be9ea[_0x44bc59(0xb10)]+_0x3c6534),_0x48de06=Math[_0x44bc59(0xa5e)](_0x103ea6*_0x3be9ea[_0x44bc59(0x2cd)]()+_0x42de44);if(_0x5ad786!==0x0)_0x3be9ea[_0x44bc59(0x7d9)](_0x5ad786);if(_0x127c3e!==0x0)_0x3be9ea[_0x44bc59(0x985)](_0x127c3e);if(_0x48de06!==0x0)_0x3be9ea[_0x44bc59(0x1b1)](_0x48de06);if(_0x6229dc)_0x3be9ea['startDamagePopup']();_0x1cf149&&_0x3be9ea[_0x44bc59(0xa10)]()&&_0x3be9ea[_0x44bc59(0x31b)]();}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_Immortal',_0x314640=>{const _0x3e7d02=_0x46c6a8;if(!SceneManager[_0x3e7d02(0x849)]())return;VisuMZ[_0x3e7d02(0x239)](_0x314640,_0x314640);const _0x4e1f43=VisuMZ[_0x3e7d02(0x97d)](_0x314640[_0x3e7d02(0x6b5)]);for(const _0x99ffc4 of _0x4e1f43){if(!_0x99ffc4)continue;_0x99ffc4[_0x3e7d02(0x41a)](_0x314640[_0x3e7d02(0x10c)]);}}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x29e),_0x233d7b=>{const _0x4effbc=_0x46c6a8;if(!SceneManager[_0x4effbc(0x849)]())return;VisuMZ[_0x4effbc(0x239)](_0x233d7b,_0x233d7b);const _0x3a10e1=BattleManager['_action'],_0x203f4b={'criticalHitRate':_0x233d7b[_0x4effbc(0x7bf)],'criticalHitFlat':_0x233d7b[_0x4effbc(0x41f)],'criticalDmgRate':_0x233d7b[_0x4effbc(0x283)],'criticalDmgFlat':_0x233d7b[_0x4effbc(0x963)],'damageRate':_0x233d7b[_0x4effbc(0x8ef)],'damageFlat':_0x233d7b[_0x4effbc(0x1b6)],'hitRate':_0x233d7b[_0x4effbc(0x203)],'hitFlat':_0x233d7b[_0x4effbc(0xa02)]};_0x3a10e1[_0x4effbc(0x842)]=_0x203f4b;}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x1e2),_0x2fd0b6=>{const _0x46f3b0=_0x46c6a8;if(!SceneManager[_0x46f3b0(0x849)]())return;VisuMZ[_0x46f3b0(0x239)](_0x2fd0b6,_0x2fd0b6);const _0x2deb29=_0x2fd0b6['CommonEventID'];SceneManager['_scene'][_0x46f3b0(0xa50)](_0x2deb29);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x5ff),_0x35763e=>{const _0x6e02c0=_0x46c6a8;if(!SceneManager[_0x6e02c0(0x849)]())return;if(!Imported[_0x6e02c0(0x1cc)])return;if(!BattleManager[_0x6e02c0(0xa94)]())return;VisuMZ['ConvertParams'](_0x35763e,_0x35763e);const _0x181990=VisuMZ['CreateActionSequenceTargets'](_0x35763e[_0x6e02c0(0x6b5)]);for(const _0x7d2c49 of _0x181990){if(!_0x7d2c49)continue;let _0x560b76=_0x35763e[_0x6e02c0(0x887)],_0x3687c6=_0x35763e[_0x6e02c0(0x416)],_0x2a7e6c=_0x35763e[_0x6e02c0(0xa8b)];BattleManager[_0x6e02c0(0x2a1)][_0x6e02c0(0x4a3)](_0x7d2c49)?_0x560b76+=_0x2a7e6c:_0x3687c6+=_0x2a7e6c,BattleManager[_0x6e02c0(0x78b)](_0x7d2c49,-_0x560b76,![]),BattleManager['turnOrderChangeOTB'](_0x7d2c49,-_0x3687c6,!![]);}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x744),_0x1b3b02=>{const _0x1e787a=_0x46c6a8;if(!SceneManager[_0x1e787a(0x849)]())return;if(!Imported[_0x1e787a(0x83c)])return;if(!BattleManager[_0x1e787a(0x8b5)]())return;VisuMZ[_0x1e787a(0x239)](_0x1b3b02,_0x1b3b02);const _0x149d5b=BattleManager[_0x1e787a(0x80d)][_0x1e787a(0x8a2)](),_0x2d6ba6=_0x1b3b02[_0x1e787a(0xbf4)],_0x1b4019=_0x1b3b02[_0x1e787a(0x62a)]||_0x1e787a(0x391),_0x5ae89e=_0x1b3b02[_0x1e787a(0x8c8)]||_0x1e787a(0x391),_0x5ae50b=_0x1b3b02[_0x1e787a(0x9aa)]||0x0,_0x1666be=_0x1b3b02[_0x1e787a(0x86c)]||0x0;(_0x149d5b[_0x1e787a(0x86e)]()||_0x2d6ba6)&&(_0x2d6ba6&&(_0x149d5b[_0x1e787a(0x2d4)]=_0x149d5b['_ptbActionCost']||{},_0x149d5b[_0x1e787a(0x2d4)][_0x1e787a(0x9f0)]=0x0),_0x149d5b['alterActionCostPTB'](_0x1b4019,_0x5ae89e,_0x5ae50b,_0x1666be));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x457),_0x4723e6=>{const _0x1c3d2a=_0x46c6a8;if(!SceneManager[_0x1c3d2a(0x849)]())return;if(!Imported[_0x1c3d2a(0x83c)])return;if(!BattleManager[_0x1c3d2a(0x8b5)]())return;VisuMZ[_0x1c3d2a(0x239)](_0x4723e6,_0x4723e6);const _0x4ee755=BattleManager[_0x1c3d2a(0x80d)][_0x1c3d2a(0x8a2)]();let _0x58e5f1=Math['max'](_0x4723e6[_0x1c3d2a(0x5bf)],0x0),_0x5caea7=_0x4ee755['getFullActionsPTB'](),_0x5667a7=_0x4ee755[_0x1c3d2a(0x522)]();while(_0x58e5f1--){if(_0x5caea7<=0x0&&_0x5667a7<=0x0)break;else _0x5caea7>0x0?(_0x5caea7--,_0x5667a7++):_0x5667a7--;}_0x4ee755[_0x1c3d2a(0x770)](_0x5caea7),_0x4ee755[_0x1c3d2a(0x800)](_0x5667a7);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x5a6),_0x4dc89b=>{const _0xf7c364=_0x46c6a8;if(!SceneManager[_0xf7c364(0x849)]())return;if(!Imported[_0xf7c364(0x83c)])return;if(!BattleManager[_0xf7c364(0x8b5)]())return;VisuMZ['ConvertParams'](_0x4dc89b,_0x4dc89b);const _0x5b1145=BattleManager[_0xf7c364(0x80d)]['friendsUnit']();let _0x52a1c3=_0x4dc89b['FullActions'],_0x35401d=_0x4dc89b[_0xf7c364(0x2b0)];_0x5b1145[_0xf7c364(0x47d)](_0x52a1c3),_0x5b1145[_0xf7c364(0x72a)](_0x35401d);}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],'ActSeq_Mechanics_RemoveBuffDebuff',_0x1d378c=>{const _0x15821=_0x46c6a8;if(!SceneManager[_0x15821(0x849)]())return;VisuMZ[_0x15821(0x239)](_0x1d378c,_0x1d378c);const _0x48ec08=['MAXHP',_0x15821(0x912),_0x15821(0xb78),'DEF',_0x15821(0x37d),_0x15821(0xc4c),_0x15821(0x97a),_0x15821(0x6e1)],_0x4fdd5c=_0x1d378c[_0x15821(0x33b)],_0x4695a7=_0x1d378c[_0x15821(0x675)],_0x1a1593=VisuMZ[_0x15821(0x97d)](_0x1d378c[_0x15821(0x6b5)]);for(const _0x93b3d3 of _0x1a1593){if(!_0x93b3d3)continue;for(const _0x1ccc4f of _0x4fdd5c){const _0x2bc38b=_0x48ec08['indexOf'](_0x1ccc4f[_0x15821(0x85e)]()[_0x15821(0xa28)]());_0x2bc38b>=0x0&&_0x2bc38b<=0x7&&_0x93b3d3['isBuffAffected'](_0x2bc38b)&&_0x93b3d3['removeBuff'](_0x2bc38b);}for(const _0x566736 of _0x4695a7){const _0x3b8da2=_0x48ec08[_0x15821(0x3bd)](_0x566736['toUpperCase']()[_0x15821(0xa28)]());_0x3b8da2>=0x0&&_0x3b8da2<=0x7&&_0x93b3d3[_0x15821(0x178)](_0x3b8da2)&&_0x93b3d3[_0x15821(0x32b)](_0x3b8da2);}}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Mechanics_RemoveState',_0x4fb33c=>{const _0x23b337=_0x46c6a8;if(!SceneManager[_0x23b337(0x849)]())return;VisuMZ[_0x23b337(0x239)](_0x4fb33c,_0x4fb33c);const _0x728708=_0x4fb33c[_0x23b337(0x564)],_0x1cbbef=VisuMZ[_0x23b337(0x97d)](_0x4fb33c[_0x23b337(0x6b5)]);for(const _0x2ad6c5 of _0x1cbbef){if(!_0x2ad6c5)continue;for(const _0x2505d1 of _0x728708){_0x2ad6c5[_0x23b337(0x247)](_0x2505d1);}}}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x804),_0x50f194=>{const _0x2ae9dc=_0x46c6a8;if(!SceneManager[_0x2ae9dc(0x849)]())return;if(!Imported[_0x2ae9dc(0xabd)])return;VisuMZ[_0x2ae9dc(0x239)](_0x50f194,_0x50f194);const _0x2dee02=VisuMZ[_0x2ae9dc(0x97d)](_0x50f194[_0x2ae9dc(0x6b5)]),_0x32e5c6=Number(_0x50f194[_0x2ae9dc(0x3b6)]),_0x53e606=Number(_0x50f194[_0x2ae9dc(0x82b)]),_0x2d2aa7=_0x50f194[_0x2ae9dc(0x73b)];for(const _0x595e12 of _0x2dee02){if(!_0x595e12)continue;_0x2d2aa7&&!_0x595e12[_0x2ae9dc(0x2c5)](_0x32e5c6)?(_0x595e12['addState'](_0x32e5c6),_0x595e12[_0x2ae9dc(0x2a9)](_0x32e5c6,_0x53e606)):_0x595e12[_0x2ae9dc(0x4d9)](_0x32e5c6,_0x53e606);}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x36b),_0x907c3=>{const _0x498d9c=_0x46c6a8;if(!SceneManager[_0x498d9c(0x849)]())return;if(!Imported[_0x498d9c(0xabd)])return;VisuMZ[_0x498d9c(0x239)](_0x907c3,_0x907c3);const _0x482b94=VisuMZ[_0x498d9c(0x97d)](_0x907c3[_0x498d9c(0x6b5)]),_0x244166=Number(_0x907c3[_0x498d9c(0x3b6)]),_0x1406a3=Math[_0x498d9c(0x968)](Number(_0x907c3[_0x498d9c(0x82b)]),0x0),_0x458b54=_0x907c3[_0x498d9c(0x73b)];for(const _0x525452 of _0x482b94){if(!_0x525452)continue;_0x458b54&&!_0x525452[_0x498d9c(0x2c5)](_0x244166)&&_0x525452[_0x498d9c(0xbf9)](_0x244166),_0x525452[_0x498d9c(0x2a9)](_0x244166,_0x1406a3);}}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x105),_0x2d09cc=>{const _0x1adf83=_0x46c6a8;if(!SceneManager[_0x1adf83(0x849)]())return;if(!Imported[_0x1adf83(0x14c)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x1adf83(0x239)](_0x2d09cc,_0x2d09cc);const _0x2344e6=_0x2d09cc[_0x1adf83(0xa11)],_0x2ef936=VisuMZ[_0x1adf83(0x97d)](_0x2d09cc[_0x1adf83(0x6b5)]),_0x3ab939=_0x2d09cc[_0x1adf83(0xc60)],_0x3df5fe=_0x2d09cc[_0x1adf83(0x7b6)],_0x480859=_0x2d09cc[_0x1adf83(0x877)],_0x56cee7=BattleManager[_0x1adf83(0x996)];if(_0x2344e6)for(const _0x2d2b60 of _0x2ef936){if(!_0x2d2b60)continue;if(_0x2d2b60===BattleManager[_0x1adf83(0x80d)])continue;if(_0x3ab939)_0x2d2b60['setSTBExploited'](![]);_0x2d2b60[_0x1adf83(0x2a7)](BattleManager['_subject'],_0x56cee7);}if(_0x3df5fe&&BattleManager[_0x1adf83(0x80d)]){if(_0x480859)BattleManager['_subject'][_0x1adf83(0x764)](![]);const _0x47862c=_0x2ef936[0x0];BattleManager[_0x1adf83(0x80d)][_0x1adf83(0xaa1)](_0x47862c,_0x56cee7);}}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x91d),_0x414938=>{const _0xf71097=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xf71097(0x14c)])return;if(!BattleManager[_0xf71097(0x340)]())return;VisuMZ['ConvertParams'](_0x414938,_0x414938);const _0x29d4b2=_0x414938[_0xf71097(0x9c7)];BattleManager[_0xf71097(0x80d)]&&BattleManager['_subject'][_0xf71097(0x8af)](_0x29d4b2);}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x524),_0x291801=>{const _0x54dcf9=_0x46c6a8;if(!SceneManager[_0x54dcf9(0x849)]())return;if(!Imported[_0x54dcf9(0x14c)])return;if(!BattleManager[_0x54dcf9(0x340)]())return;VisuMZ[_0x54dcf9(0x239)](_0x291801,_0x291801);let _0x11c2d9=_0x291801['Actions'];if(BattleManager[_0x54dcf9(0x80d)]){BattleManager[_0x54dcf9(0x80d)][_0x54dcf9(0x98f)]=BattleManager['_subject'][_0x54dcf9(0x98f)]||[];while(_0x11c2d9--){if(BattleManager['_subject'][_0x54dcf9(0x98f)][_0x54dcf9(0x50d)]<=0x0)break;BattleManager['_subject'][_0x54dcf9(0x98f)]['shift']();}}}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x481),_0xb7aedd=>{const _0x1fc81f=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1fc81f(0x325)])return;VisuMZ['ConvertParams'](_0xb7aedd,_0xb7aedd);const _0x5473dc=VisuMZ[_0x1fc81f(0x97d)](_0xb7aedd[_0x1fc81f(0x6b5)]),_0x483102=_0xb7aedd[_0x1fc81f(0x832)];for(const _0x15e82a of _0x5473dc){if(!_0x15e82a)continue;if(!_0x15e82a['isActor']())continue;_0x15e82a['switchToWeaponType'](_0x483102);}}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],'ActSeq_Mechanics_TextPopup',_0xc32547=>{const _0xac0368=_0x46c6a8;if(!SceneManager[_0xac0368(0x849)]())return;VisuMZ[_0xac0368(0x239)](_0xc32547,_0xc32547);const _0x1874bf=VisuMZ['CreateActionSequenceTargets'](_0xc32547[_0xac0368(0x6b5)]),_0x5d4fbb=_0xc32547[_0xac0368(0x2b8)],_0x3e41e2={'textColor':ColorManager[_0xac0368(0x8d2)](_0xc32547[_0xac0368(0xb3a)]),'flashColor':_0xc32547[_0xac0368(0x240)],'flashDuration':_0xc32547[_0xac0368(0x5eb)]};for(const _0x573f0f of _0x1874bf){if(!_0x573f0f)continue;_0x573f0f[_0xac0368(0x31f)](_0x5d4fbb,_0x3e41e2);}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x8e3),_0x4fb677=>{const _0x4d2059=_0x46c6a8;if(!SceneManager[_0x4d2059(0x849)]())return;VisuMZ[_0x4d2059(0x239)](_0x4fb677,_0x4fb677);const _0x3638a9=VisuMZ[_0x4d2059(0x97d)](_0x4fb677[_0x4d2059(0x6b5)]);let _0x26577b=$gameVariables[_0x4d2059(0x6ea)](_0x4fb677[_0x4d2059(0x943)]);Imported['VisuMZ_0_CoreEngine']&&_0x4fb677[_0x4d2059(0xbde)]&&(_0x26577b=VisuMZ[_0x4d2059(0x5d8)](_0x26577b));const _0x573583=String(_0x26577b),_0xb42fe3={'textColor':ColorManager[_0x4d2059(0x8d2)](_0x4fb677[_0x4d2059(0xb3a)]),'flashColor':_0x4fb677[_0x4d2059(0x240)],'flashDuration':_0x4fb677[_0x4d2059(0x5eb)]};for(const _0x484c63 of _0x3638a9){if(!_0x484c63)continue;_0x484c63[_0x4d2059(0x31f)](_0x573583,_0xb42fe3);}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x9f8),_0x5a53f1=>{const _0x2480b6=_0x46c6a8;if(!SceneManager[_0x2480b6(0x849)]())return;const _0x5bc1dd=$gameTemp[_0x2480b6(0xb5d)]();if(!_0x5bc1dd)return;_0x5bc1dd[_0x2480b6(0x77f)]('battleEffect');}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x1bf),_0x3a0d8a=>{const _0x55e61c=_0x46c6a8;if(!SceneManager[_0x55e61c(0x849)]())return;VisuMZ[_0x55e61c(0x239)](_0x3a0d8a,_0x3a0d8a);const _0x3de39e=VisuMZ[_0x55e61c(0x97d)](_0x3a0d8a[_0x55e61c(0x6b5)]);for(const _0x53c8b9 of _0x3de39e){if(!_0x53c8b9)continue;_0x53c8b9[_0x55e61c(0x756)]();}}),PluginManager['registerCommand'](pluginData['name'],_0x46c6a8(0x25d),_0x51ddda=>{const _0x33c148=_0x46c6a8;if(!SceneManager[_0x33c148(0x849)]())return;VisuMZ[_0x33c148(0x239)](_0x51ddda,_0x51ddda);const _0xb1d7f8=VisuMZ[_0x33c148(0x97d)](_0x51ddda[_0x33c148(0x6b5)]),_0x58f21a=_0x51ddda['MotionType']['toLowerCase']()['trim']();let _0x129370=_0x51ddda[_0x33c148(0x6fd)];const _0xb527bb=_0x51ddda[_0x33c148(0x3d7)];![_0x33c148(0xc28),_0x33c148(0x5bd),_0x33c148(0x380),_0x33c148(0x6a0)][_0x33c148(0x4a3)](_0x58f21a)&&(_0x129370=![]);for(const _0x50f5e4 of _0xb1d7f8){if(!_0x50f5e4)continue;_0x50f5e4[_0x33c148(0xba8)](_0x58f21a,_0x129370,_0xb527bb);}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x55e),_0x1b01cb=>{const _0x1876b9=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1876b9(0x239)](_0x1b01cb,_0x1b01cb);const _0x1fc4ff=VisuMZ[_0x1876b9(0x97d)](_0x1b01cb['Targets']),_0xab120c=_0x1b01cb[_0x1876b9(0x6c4)][_0x1876b9(0x4ed)]()[_0x1876b9(0xa28)](),_0x4247eb=_0x1b01cb[_0x1876b9(0x6fd)];for(const _0x5cfb55 of _0x1fc4ff){if(!_0x5cfb55)continue;_0x5cfb55['_showWeapon']=_0x4247eb;if(_0xab120c[_0x1876b9(0x712)](/ATTACK[ ](\d+)/i))_0x5cfb55['performAttackSlot'](Number(RegExp['$1']));else _0xab120c==='attack'?_0x5cfb55['performAttack']():_0x5cfb55['requestMotion'](_0xab120c);if(!_0x4247eb)_0x5cfb55['startWeaponAnimation'](0x0);else{if(_0x4247eb&&[_0x1876b9(0x5bd),_0x1876b9(0x380),_0x1876b9(0xa64)][_0x1876b9(0x4a3)](_0xab120c)){}}_0x5cfb55[_0x1876b9(0x6b6)]=undefined;}}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x9c5),_0x40c9b8=>{const _0x4e958f=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4e958f(0x239)](_0x40c9b8,_0x40c9b8);const _0x6bd68a=BattleManager[_0x4e958f(0x996)];if(!_0x6bd68a)return;if(!_0x6bd68a[_0x4e958f(0x6e9)]())return;const _0x2ddeac=VisuMZ[_0x4e958f(0x97d)](_0x40c9b8[_0x4e958f(0x6b5)]);for(const _0x3268df of _0x2ddeac){if(!_0x3268df)continue;_0x3268df['performAction'](_0x6bd68a);}}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x170),_0x1d0e42=>{const _0x5259cf=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5259cf(0x239)](_0x1d0e42,_0x1d0e42);const _0x204f55=VisuMZ[_0x5259cf(0x97d)](_0x1d0e42[_0x5259cf(0x6b5)]);for(const _0x24bc76 of _0x204f55){if(!_0x24bc76)continue;if(!_0x24bc76[_0x5259cf(0x62d)]())continue;_0x24bc76[_0x5259cf(0x62d)]()[_0x5259cf(0xa61)]();}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x3d1),_0x1391c0=>{const _0x27fa5e=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x27fa5e(0x239)](_0x1391c0,_0x1391c0);const _0x55302d=$gameTemp['getLastPluginCommandInterpreter'](),_0x34e7b4=_0x1391c0[_0x27fa5e(0xb04)]*Sprite_Battler[_0x27fa5e(0xc33)];_0x55302d[_0x27fa5e(0x71d)](_0x34e7b4);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Movement_BattleStep',_0x12ffd3=>{const _0x820c3e=_0x46c6a8;if(!SceneManager[_0x820c3e(0x849)]())return;VisuMZ[_0x820c3e(0x239)](_0x12ffd3,_0x12ffd3);const _0x350e75=$gameTemp[_0x820c3e(0xb5d)](),_0xf0bdd6=BattleManager[_0x820c3e(0x996)];if(!_0x350e75||!_0xf0bdd6)return;if(!_0xf0bdd6[_0x820c3e(0x6e9)]())return;const _0x2a1dae=VisuMZ[_0x820c3e(0x97d)](_0x12ffd3[_0x820c3e(0x6b5)]);for(const _0x7792d0 of _0x2a1dae){if(!_0x7792d0)continue;_0x7792d0[_0x820c3e(0x975)](_0xf0bdd6);}if(_0x12ffd3[_0x820c3e(0x85c)])_0x350e75[_0x820c3e(0x77f)](_0x820c3e(0x5da));}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],'ActSeq_Movement_HomeMoveBy',_0x2254cc=>{const _0x199d57=_0x46c6a8;if(!SceneManager[_0x199d57(0x849)]())return;if(!$gameSystem[_0x199d57(0x33c)]())return;VisuMZ[_0x199d57(0x239)](_0x2254cc,_0x2254cc);const _0x2b52d=$gameTemp[_0x199d57(0xb5d)](),_0x2d36b7=VisuMZ[_0x199d57(0x97d)](_0x2254cc[_0x199d57(0x6b5)]),_0x5761da=_0x2254cc[_0x199d57(0x6b2)],_0x20f23a=_0x2254cc['DistanceX'],_0x2029b6=_0x2254cc['DistanceY'],_0x30f6ec=_0x2254cc[_0x199d57(0x249)],_0x43529f=_0x2254cc[_0x199d57(0x2ad)],_0x1fd8e0=_0x2254cc['EasingType'],_0xfea9ec=_0x2254cc[_0x199d57(0x6c4)],_0x2514e5=_0x2254cc[_0x199d57(0x85c)];if(!_0x2b52d)return;for(const _0xf4877b of _0x2d36b7){if(!_0xf4877b)continue;let _0x533c47=_0x20f23a,_0x509778=_0x2029b6;if(_0x5761da[_0x199d57(0x712)](/horz/i))_0x533c47*=_0xf4877b[_0x199d57(0x4ec)]()?-0x1:0x1;if(_0x5761da[_0x199d57(0x712)](/vert/i))_0x509778*=_0xf4877b[_0x199d57(0x4ec)]()?-0x1:0x1;_0xf4877b['moveBattlerHomeDistance'](_0x533c47,_0x509778,_0x30f6ec,_0x43529f,_0x1fd8e0),_0xf4877b[_0x199d57(0x191)](_0xfea9ec);}if(_0x2514e5)_0x2b52d[_0x199d57(0x77f)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],'ActSeq_Movement_HomeMoveToJsPoint',_0x37c66b=>{const _0x4b26bc=_0x46c6a8;if(!SceneManager[_0x4b26bc(0x849)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x4b26bc(0x239)](_0x37c66b,_0x37c66b);const _0x2b9e29=$gameTemp[_0x4b26bc(0xb5d)](),_0x59a73b=VisuMZ['CreateActionSequenceTargets'](_0x37c66b[_0x4b26bc(0x6b5)]),_0x5c3b2b=_0x37c66b['OffsetAdjust'],_0xb605f7=_0x37c66b[_0x4b26bc(0x20c)],_0x2aa4d0=_0x37c66b[_0x4b26bc(0x4e7)],_0x57c7f1=_0x37c66b['Duration'],_0x334c3a=_0x37c66b[_0x4b26bc(0x2ad)],_0x1dd061=_0x37c66b[_0x4b26bc(0xc15)],_0x252e7e=_0x37c66b[_0x4b26bc(0x6c4)],_0x12f568=_0x37c66b['WaitForMovement'];if(!_0x2b9e29)return;for(const _0x5cd211 of _0x59a73b){if(!_0x5cd211)continue;const _0x16e7b8=_0x37c66b['DestinationJS'](_0x5cd211)||{'x':0x0,'y':0x0};let _0x49b8f8=_0x16e7b8['x'],_0x839a86=_0x16e7b8['y'];if(_0x5c3b2b[_0x4b26bc(0x712)](/none/i))_0x49b8f8+=_0xb605f7,_0x839a86+=_0x2aa4d0;else{if(_0x5c3b2b[_0x4b26bc(0x712)](/horz/i)&&_0x5c3b2b[_0x4b26bc(0x712)](/vert/i))_0x49b8f8+=_0x5cd211['isActor']()?-_0xb605f7:_0xb605f7,_0x839a86+=_0x5cd211[_0x4b26bc(0x4ec)]()?-_0x2aa4d0:_0x2aa4d0;else{if(_0x5c3b2b[_0x4b26bc(0x712)](/horz/i))_0x49b8f8+=_0x5cd211['isActor']()?-_0xb605f7:_0xb605f7,_0x839a86+=_0x2aa4d0;else _0x5c3b2b[_0x4b26bc(0x712)](/vert/i)&&(_0x49b8f8+=_0xb605f7,_0x839a86+=_0x5cd211[_0x4b26bc(0x4ec)]()?-_0x2aa4d0:_0x2aa4d0);}}_0x5cd211['moveBattlerHomeToPoint'](_0x49b8f8,_0x839a86,_0x57c7f1,_0x334c3a,_0x1dd061,-0x1),_0x5cd211[_0x4b26bc(0x191)](_0x252e7e);}if(_0x12f568)_0x2b9e29[_0x4b26bc(0x77f)](_0x4b26bc(0x5da));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x2e4),_0x5bda8c=>{const _0x1ec2e8=_0x46c6a8;if(!SceneManager[_0x1ec2e8(0x849)]())return;if(!$gameSystem[_0x1ec2e8(0x33c)]())return;VisuMZ['ConvertParams'](_0x5bda8c,_0x5bda8c);const _0x4bea2b=$gameTemp[_0x1ec2e8(0xb5d)](),_0x308a36=VisuMZ[_0x1ec2e8(0x97d)](_0x5bda8c[_0x1ec2e8(0x6b5)]),_0x3f750d=_0x5bda8c[_0x1ec2e8(0xbd5)],_0x457c7e=_0x5bda8c['OffsetAdjust'],_0x3bc401=_0x5bda8c[_0x1ec2e8(0x20c)],_0x1f453b=_0x5bda8c[_0x1ec2e8(0x4e7)],_0x54d629=_0x5bda8c[_0x1ec2e8(0x249)],_0xb17136=_0x5bda8c[_0x1ec2e8(0x2ad)],_0x564d6d=_0x5bda8c[_0x1ec2e8(0xc15)],_0x1d1dd6=_0x5bda8c[_0x1ec2e8(0x6c4)],_0x4ac624=_0x5bda8c[_0x1ec2e8(0x85c)];if(!_0x4bea2b)return;for(const _0x19adf5 of _0x308a36){if(!_0x19adf5)continue;let _0x7b9d81=_0x19adf5['battler']()[_0x1ec2e8(0xc31)],_0x2632ad=_0x19adf5[_0x1ec2e8(0x62d)]()['_baseY'];if(_0x3f750d[_0x1ec2e8(0x712)](/home/i))_0x7b9d81=_0x19adf5[_0x1ec2e8(0x62d)]()[_0x1ec2e8(0x637)],_0x2632ad=_0x19adf5['battler']()['_homeY'];else{if(_0x3f750d[_0x1ec2e8(0x712)](/center/i))_0x7b9d81=Graphics[_0x1ec2e8(0xb13)]/0x2,_0x2632ad=Graphics[_0x1ec2e8(0x187)]/0x2;else _0x3f750d[_0x1ec2e8(0x712)](/point (\d+), (\d+)/i)&&(_0x7b9d81=Number(RegExp['$1']),_0x2632ad=Number(RegExp['$2']));}if(_0x457c7e['match'](/none/i))_0x7b9d81+=_0x3bc401,_0x2632ad+=_0x1f453b;else{if(_0x457c7e[_0x1ec2e8(0x712)](/horz/i)&&_0x457c7e[_0x1ec2e8(0x712)](/vert/i))_0x7b9d81+=_0x19adf5[_0x1ec2e8(0x4ec)]()?-_0x3bc401:_0x3bc401,_0x2632ad+=_0x19adf5[_0x1ec2e8(0x4ec)]()?-_0x1f453b:_0x1f453b;else{if(_0x457c7e['match'](/horz/i))_0x7b9d81+=_0x19adf5['isActor']()?-_0x3bc401:_0x3bc401,_0x2632ad+=_0x1f453b;else _0x457c7e[_0x1ec2e8(0x712)](/vert/i)&&(_0x7b9d81+=_0x3bc401,_0x2632ad+=_0x19adf5[_0x1ec2e8(0x4ec)]()?-_0x1f453b:_0x1f453b);}}_0x19adf5['moveBattlerHomeToPoint'](_0x7b9d81,_0x2632ad,_0x54d629,_0xb17136,_0x564d6d,-0x1),_0x19adf5[_0x1ec2e8(0x191)](_0x1d1dd6);}if(_0x4ac624)_0x4bea2b[_0x1ec2e8(0x77f)](_0x1ec2e8(0x5da));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Movement_HomeMoveToTarget',_0x204172=>{const _0x34b26e=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x34b26e(0x33c)]())return;VisuMZ[_0x34b26e(0x239)](_0x204172,_0x204172);const _0x5dbd9d=$gameTemp['getLastPluginCommandInterpreter'](),_0x20b66e=VisuMZ[_0x34b26e(0x97d)](_0x204172[_0x34b26e(0x77d)]),_0x3376d5=VisuMZ[_0x34b26e(0x97d)](_0x204172[_0x34b26e(0xbe2)]),_0x4d31fb=_0x204172[_0x34b26e(0xb17)];let _0x5d8c8a=_0x204172['MeleeDistance'];const _0x66c79=_0x204172['OffsetAdjust'],_0x248142=_0x204172['OffsetX'],_0x4be1b6=_0x204172['OffsetY'],_0x224bf7=_0x204172['Duration'],_0x16d769=_0x204172[_0x34b26e(0x2ad)],_0x4675cf=_0x204172['EasingType'],_0x90ee3a=_0x204172[_0x34b26e(0x6c4)],_0x2ea2e4=_0x204172[_0x34b26e(0x85c)],_0x35a9b2=Math[_0x34b26e(0x9bd)](..._0x3376d5[_0x34b26e(0x883)](_0x452bd5=>_0x452bd5[_0x34b26e(0x62d)]()[_0x34b26e(0xc31)]-_0x452bd5['battler']()[_0x34b26e(0x3c8)]()/0x2)),_0x2b8549=Math[_0x34b26e(0x968)](..._0x3376d5['map'](_0x2e7b06=>_0x2e7b06['battler']()['_baseX']+_0x2e7b06[_0x34b26e(0x62d)]()[_0x34b26e(0x3c8)]()/0x2)),_0x2d2a7b=Math[_0x34b26e(0x9bd)](..._0x3376d5[_0x34b26e(0x883)](_0x2761aa=>_0x2761aa['battler']()['_baseY']-_0x2761aa[_0x34b26e(0x62d)]()[_0x34b26e(0x230)]())),_0x4df1f1=Math[_0x34b26e(0x968)](..._0x3376d5[_0x34b26e(0x883)](_0x2eb830=>_0x2eb830[_0x34b26e(0x62d)]()[_0x34b26e(0x960)])),_0x423929=_0x3376d5[_0x34b26e(0x2ed)](_0x3ba97e=>_0x3ba97e[_0x34b26e(0x4ec)]())['length'],_0x2ede23=_0x3376d5[_0x34b26e(0x2ed)](_0x141c62=>_0x141c62['isEnemy']())[_0x34b26e(0x50d)];let _0x361431=0x0,_0x3cbefa=0x0;if(_0x4d31fb[_0x34b26e(0x712)](/front/i))_0x361431=_0x423929>=_0x2ede23?_0x35a9b2:_0x2b8549;else{if(_0x4d31fb[_0x34b26e(0x712)](/middle/i))_0x361431=(_0x35a9b2+_0x2b8549)/0x2,_0x5d8c8a=-0x1;else _0x4d31fb[_0x34b26e(0x712)](/back/i)&&(_0x361431=_0x423929>=_0x2ede23?_0x2b8549:_0x35a9b2);}if(_0x4d31fb[_0x34b26e(0x712)](/head/i))_0x3cbefa=_0x2d2a7b;else{if(_0x4d31fb['match'](/center/i))_0x3cbefa=(_0x2d2a7b+_0x4df1f1)/0x2;else _0x4d31fb['match'](/base/i)&&(_0x3cbefa=_0x4df1f1);}if(!_0x5dbd9d)return;for(const _0x3e4e69 of _0x20b66e){if(!_0x3e4e69)continue;let _0x14e0a2=_0x361431,_0x276ae0=_0x3cbefa;if(_0x66c79[_0x34b26e(0x712)](/none/i))_0x14e0a2+=_0x248142,_0x276ae0+=_0x4be1b6;else{if(_0x66c79[_0x34b26e(0x712)](/horz/i)&&_0x66c79[_0x34b26e(0x712)](/vert/i))_0x14e0a2+=_0x3e4e69[_0x34b26e(0x4ec)]()?-_0x248142:_0x248142,_0x276ae0+=_0x3e4e69['isActor']()?-_0x4be1b6:_0x4be1b6;else{if(_0x66c79[_0x34b26e(0x712)](/horz/i))_0x14e0a2+=_0x3e4e69[_0x34b26e(0x4ec)]()?-_0x248142:_0x248142,_0x276ae0+=_0x4be1b6;else _0x66c79[_0x34b26e(0x712)](/vert/i)&&(_0x14e0a2+=_0x248142,_0x276ae0+=_0x3e4e69[_0x34b26e(0x4ec)]()?-_0x4be1b6:_0x4be1b6);}}_0x3e4e69['moveBattlerHomeToPoint'](_0x14e0a2,_0x276ae0,_0x224bf7,_0x16d769,_0x4675cf,_0x5d8c8a),_0x3e4e69[_0x34b26e(0x191)](_0x90ee3a);}if(_0x2ea2e4)_0x5dbd9d[_0x34b26e(0x77f)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x420),_0x308e8a=>{const _0x2389a8=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x2389a8(0x239)](_0x308e8a,_0x308e8a);const _0x138e31=VisuMZ[_0x2389a8(0x97d)](_0x308e8a[_0x2389a8(0x6b5)]);let _0x1b59da=_0x308e8a[_0x2389a8(0x341)]['match'](/back/i);for(const _0xeb8f4b of _0x138e31){if(!_0xeb8f4b)continue;if(_0x308e8a[_0x2389a8(0x341)][_0x2389a8(0x712)](/rand/i))_0x1b59da=Math[_0x2389a8(0xafb)](0x2);_0xeb8f4b['setBattlerFlip'](!!_0x1b59da);}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x2d7),_0x1453a8=>{const _0x226c6c=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x226c6c(0x33c)]())return;VisuMZ['ConvertParams'](_0x1453a8,_0x1453a8);const _0x854ee8=VisuMZ['CreateActionSequenceTargets'](_0x1453a8['Targets']),_0x5d8cf4=_0x1453a8['FaceAway'];for(const _0x43b734 of _0x854ee8){if(!_0x43b734)continue;const _0x866c09=_0x1453a8['PointJS'](_0x43b734)||{'x':0x0,'y':0x0};let _0x31d711=_0x866c09['x'],_0x63322e=_0x866c09['y'];_0x43b734[_0x226c6c(0x717)](Math['round'](_0x31d711),Math[_0x226c6c(0xa5e)](_0x63322e),!!_0x5d8cf4);}}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xaaf),_0x307d91=>{const _0x4c4bd8=_0x46c6a8;if(!SceneManager[_0x4c4bd8(0x849)]())return;if(!$gameSystem[_0x4c4bd8(0x33c)]())return;VisuMZ['ConvertParams'](_0x307d91,_0x307d91);const _0x513516=VisuMZ[_0x4c4bd8(0x97d)](_0x307d91[_0x4c4bd8(0x6b5)]);let _0x3f9dae=_0x307d91[_0x4c4bd8(0xb98)];const _0x1f90da=_0x307d91[_0x4c4bd8(0x9b4)];for(const _0x18035f of _0x513516){if(!_0x18035f)continue;let _0x25c0e6=_0x18035f[_0x4c4bd8(0x62d)]()[_0x4c4bd8(0xc31)],_0xa98f96=_0x18035f[_0x4c4bd8(0x62d)]()[_0x4c4bd8(0x960)];if(_0x3f9dae[_0x4c4bd8(0x712)](/home/i))_0x25c0e6=_0x18035f['battler']()[_0x4c4bd8(0x637)],_0xa98f96=_0x18035f['battler']()['_homeY'];else{if(_0x3f9dae[_0x4c4bd8(0x712)](/center/i))_0x25c0e6=Graphics[_0x4c4bd8(0xb13)]/0x2,_0xa98f96=Graphics[_0x4c4bd8(0x187)]/0x2;else _0x3f9dae[_0x4c4bd8(0x712)](/point (\d+), (\d+)/i)&&(_0x25c0e6=Number(RegExp['$1']),_0xa98f96=Number(RegExp['$2']));}_0x18035f['setBattlerFacePoint'](Math[_0x4c4bd8(0xa5e)](_0x25c0e6),Math[_0x4c4bd8(0xa5e)](_0xa98f96),!!_0x1f90da);}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x3ec),_0x219351=>{const _0x59d849=_0x46c6a8;if(!SceneManager[_0x59d849(0x849)]())return;if(!$gameSystem[_0x59d849(0x33c)]())return;VisuMZ[_0x59d849(0x239)](_0x219351,_0x219351);const _0x44988a=VisuMZ[_0x59d849(0x97d)](_0x219351['Targets1']),_0x364c5a=VisuMZ[_0x59d849(0x97d)](_0x219351[_0x59d849(0xbe2)]),_0x59df3f=_0x364c5a[_0x59d849(0x883)](_0x4cb2cb=>_0x4cb2cb&&_0x4cb2cb[_0x59d849(0x62d)]()?_0x4cb2cb[_0x59d849(0x62d)]()[_0x59d849(0xc31)]:0x0)/(_0x364c5a['length']||0x1),_0x2e2420=_0x364c5a[_0x59d849(0x883)](_0x5c4d9d=>_0x5c4d9d&&_0x5c4d9d[_0x59d849(0x62d)]()?_0x5c4d9d['battler']()[_0x59d849(0x960)]:0x0)/(_0x364c5a['length']||0x1),_0x2d83d6=_0x219351[_0x59d849(0x9b4)];for(const _0xe99290 of _0x44988a){if(!_0xe99290)continue;_0xe99290[_0x59d849(0x717)](Math[_0x59d849(0xa5e)](_0x59df3f),Math['round'](_0x2e2420),!!_0x2d83d6);}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x379),_0x58248f=>{const _0x42da6d=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x42da6d(0x239)](_0x58248f,_0x58248f);const _0x4dbcb7=$gameTemp[_0x42da6d(0xb5d)](),_0x3d6fc7=VisuMZ[_0x42da6d(0x97d)](_0x58248f['Targets']),_0x5961ac=_0x58248f[_0x42da6d(0x73f)],_0x2b03c4=_0x58248f[_0x42da6d(0x249)],_0x52d837=_0x58248f['EasingType'],_0x32ce9f=_0x58248f[_0x42da6d(0xc1c)];if(!_0x4dbcb7)return;for(const _0x49502e of _0x3d6fc7){if(!_0x49502e)continue;_0x49502e['floatBattler'](_0x5961ac,_0x2b03c4,_0x52d837);}if(_0x32ce9f)_0x4dbcb7[_0x42da6d(0x77f)](_0x42da6d(0xba6));}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0xb67),_0x51a3ad=>{const _0x4a0d86=_0x46c6a8;if(!SceneManager[_0x4a0d86(0x849)]())return;VisuMZ[_0x4a0d86(0x239)](_0x51a3ad,_0x51a3ad);const _0x51c5d0=$gameTemp[_0x4a0d86(0xb5d)]();if(!_0x51c5d0)return;const _0x351eca=VisuMZ[_0x4a0d86(0x97d)](_0x51a3ad[_0x4a0d86(0x6b5)]);for(const _0x294e15 of _0x351eca){if(!_0x294e15)continue;_0x294e15[_0x4a0d86(0xae0)]();}BattleManager[_0x4a0d86(0x80d)]&&BattleManager[_0x4a0d86(0x80d)][_0x4a0d86(0xc22)]();if(_0x51a3ad[_0x4a0d86(0x85c)])_0x51c5d0[_0x4a0d86(0x77f)](_0x4a0d86(0x5da));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x938),_0x574705=>{const _0x56aaf7=_0x46c6a8;if(!SceneManager[_0x56aaf7(0x849)]())return;VisuMZ['ConvertParams'](_0x574705,_0x574705);const _0x2c8b42=$gameTemp['getLastPluginCommandInterpreter'](),_0x4498c1=VisuMZ[_0x56aaf7(0x97d)](_0x574705[_0x56aaf7(0x6b5)]),_0x701f47=_0x574705[_0x56aaf7(0x73f)],_0x2aef87=_0x574705[_0x56aaf7(0x249)],_0x1b2c6d=_0x574705[_0x56aaf7(0x2cc)];if(!_0x2c8b42)return;for(const _0x30bda8 of _0x4498c1){if(!_0x30bda8)continue;_0x30bda8[_0x56aaf7(0x7ff)](_0x701f47,_0x2aef87);}if(_0x1b2c6d)_0x2c8b42[_0x56aaf7(0x77f)](_0x56aaf7(0x1d4));}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x748),_0x85b5a8=>{const _0x2dd3ea=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x2dd3ea(0x33c)]())return;VisuMZ[_0x2dd3ea(0x239)](_0x85b5a8,_0x85b5a8);const _0x40afcb=$gameTemp[_0x2dd3ea(0xb5d)](),_0x251d6e=VisuMZ[_0x2dd3ea(0x97d)](_0x85b5a8['Targets']),_0x5ee717=_0x85b5a8['DistanceAdjust'],_0x617011=_0x85b5a8[_0x2dd3ea(0x655)],_0x202720=_0x85b5a8[_0x2dd3ea(0xc1f)],_0x5ccbba=_0x85b5a8[_0x2dd3ea(0x249)],_0x3308ab=_0x85b5a8[_0x2dd3ea(0x2ad)],_0x31e421=_0x85b5a8[_0x2dd3ea(0xc15)],_0x5c8e17=_0x85b5a8[_0x2dd3ea(0x6c4)],_0x4b0ecd=_0x85b5a8[_0x2dd3ea(0x85c)];if(!_0x40afcb)return;for(const _0x35e11d of _0x251d6e){if(!_0x35e11d)continue;let _0x51e1ff=_0x617011,_0x11ed57=_0x202720;if(_0x5ee717[_0x2dd3ea(0x712)](/horz/i))_0x51e1ff*=_0x35e11d[_0x2dd3ea(0x4ec)]()?-0x1:0x1;if(_0x5ee717[_0x2dd3ea(0x712)](/vert/i))_0x11ed57*=_0x35e11d[_0x2dd3ea(0x4ec)]()?-0x1:0x1;_0x35e11d[_0x2dd3ea(0x3b7)](_0x51e1ff,_0x11ed57,_0x5ccbba,_0x3308ab,_0x31e421),_0x35e11d[_0x2dd3ea(0x191)](_0x5c8e17);}if(_0x4b0ecd)_0x40afcb[_0x2dd3ea(0x77f)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x2ee),_0x1bd6c5=>{const _0x4e5925=_0x46c6a8;if(!SceneManager[_0x4e5925(0x849)]())return;if(!$gameSystem[_0x4e5925(0x33c)]())return;VisuMZ[_0x4e5925(0x239)](_0x1bd6c5,_0x1bd6c5);const _0x18e5e3=$gameTemp['getLastPluginCommandInterpreter'](),_0x4c8f9a=VisuMZ[_0x4e5925(0x97d)](_0x1bd6c5[_0x4e5925(0x6b5)]),_0x20dcfc=_0x1bd6c5[_0x4e5925(0x34c)],_0x3d8b38=_0x1bd6c5[_0x4e5925(0x20c)],_0x97b7ae=_0x1bd6c5[_0x4e5925(0x4e7)],_0x5b3bc2=_0x1bd6c5[_0x4e5925(0x249)],_0x3503e3=_0x1bd6c5[_0x4e5925(0x2ad)],_0x313bd5=_0x1bd6c5[_0x4e5925(0xc15)],_0x49098a=_0x1bd6c5[_0x4e5925(0x6c4)],_0x37c0b1=_0x1bd6c5[_0x4e5925(0x85c)];if(!_0x18e5e3)return;for(const _0x428d2c of _0x4c8f9a){if(!_0x428d2c)continue;const _0x4f1e7c=_0x1bd6c5['DestinationJS'](_0x428d2c)||{'x':0x0,'y':0x0};let _0x4152e6=_0x4f1e7c['x'],_0x2acca6=_0x4f1e7c['y'];if(_0x20dcfc['match'](/none/i))_0x4152e6+=_0x3d8b38,_0x2acca6+=_0x97b7ae;else{if(_0x20dcfc[_0x4e5925(0x712)](/horz/i)&&_0x20dcfc[_0x4e5925(0x712)](/vert/i))_0x4152e6+=_0x428d2c['isActor']()?-_0x3d8b38:_0x3d8b38,_0x2acca6+=_0x428d2c[_0x4e5925(0x4ec)]()?-_0x97b7ae:_0x97b7ae;else{if(_0x20dcfc[_0x4e5925(0x712)](/horz/i))_0x4152e6+=_0x428d2c[_0x4e5925(0x4ec)]()?-_0x3d8b38:_0x3d8b38,_0x2acca6+=_0x97b7ae;else _0x20dcfc[_0x4e5925(0x712)](/vert/i)&&(_0x4152e6+=_0x3d8b38,_0x2acca6+=_0x428d2c['isActor']()?-_0x97b7ae:_0x97b7ae);}}_0x428d2c['moveBattlerToPoint'](_0x4152e6,_0x2acca6,_0x5b3bc2,_0x3503e3,_0x313bd5,-0x1),_0x428d2c[_0x4e5925(0x191)](_0x49098a);}if(_0x37c0b1)_0x18e5e3[_0x4e5925(0x77f)](_0x4e5925(0x5da));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xb58),_0x211b8d=>{const _0x4ceb66=_0x46c6a8;if(!SceneManager[_0x4ceb66(0x849)]())return;if(!$gameSystem[_0x4ceb66(0x33c)]())return;VisuMZ[_0x4ceb66(0x239)](_0x211b8d,_0x211b8d);const _0x5e964a=$gameTemp[_0x4ceb66(0xb5d)](),_0x2ee105=VisuMZ[_0x4ceb66(0x97d)](_0x211b8d[_0x4ceb66(0x6b5)]),_0x1f1683=_0x211b8d[_0x4ceb66(0xbd5)],_0x4e7e1f=_0x211b8d[_0x4ceb66(0x34c)],_0x2d7694=_0x211b8d['OffsetX'],_0x36de63=_0x211b8d[_0x4ceb66(0x4e7)],_0x28e8ae=_0x211b8d[_0x4ceb66(0x249)],_0x5babcc=_0x211b8d[_0x4ceb66(0x2ad)],_0x13069d=_0x211b8d[_0x4ceb66(0xc15)],_0x4e7834=_0x211b8d[_0x4ceb66(0x6c4)],_0x55ceaa=_0x211b8d['WaitForMovement'];if(!_0x5e964a)return;for(const _0x15e958 of _0x2ee105){if(!_0x15e958)continue;let _0x3999a0=_0x15e958[_0x4ceb66(0x62d)]()[_0x4ceb66(0xc31)],_0x3c8d3c=_0x15e958[_0x4ceb66(0x62d)]()[_0x4ceb66(0x960)];if(_0x1f1683[_0x4ceb66(0x712)](/home/i))_0x3999a0=_0x15e958['battler']()[_0x4ceb66(0x637)],_0x3c8d3c=_0x15e958[_0x4ceb66(0x62d)]()['_homeY'];else{if(_0x1f1683[_0x4ceb66(0x712)](/center/i))_0x3999a0=Graphics[_0x4ceb66(0xb13)]/0x2,_0x3c8d3c=Graphics[_0x4ceb66(0x187)]/0x2;else _0x1f1683[_0x4ceb66(0x712)](/point (\d+), (\d+)/i)&&(_0x3999a0=Number(RegExp['$1']),_0x3c8d3c=Number(RegExp['$2']));}if(_0x4e7e1f['match'](/none/i))_0x3999a0+=_0x2d7694,_0x3c8d3c+=_0x36de63;else{if(_0x4e7e1f[_0x4ceb66(0x712)](/horz/i)&&_0x4e7e1f['match'](/vert/i))_0x3999a0+=_0x15e958[_0x4ceb66(0x4ec)]()?-_0x2d7694:_0x2d7694,_0x3c8d3c+=_0x15e958[_0x4ceb66(0x4ec)]()?-_0x36de63:_0x36de63;else{if(_0x4e7e1f[_0x4ceb66(0x712)](/horz/i))_0x3999a0+=_0x15e958[_0x4ceb66(0x4ec)]()?-_0x2d7694:_0x2d7694,_0x3c8d3c+=_0x36de63;else _0x4e7e1f['match'](/vert/i)&&(_0x3999a0+=_0x2d7694,_0x3c8d3c+=_0x15e958[_0x4ceb66(0x4ec)]()?-_0x36de63:_0x36de63);}}_0x15e958['moveBattlerToPoint'](_0x3999a0,_0x3c8d3c,_0x28e8ae,_0x5babcc,_0x13069d,-0x1),_0x15e958[_0x4ceb66(0x191)](_0x4e7834);}if(_0x55ceaa)_0x5e964a['setWaitMode']('battleMove');}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x421),_0x1b2510=>{const _0x485b7c=_0x46c6a8;if(!SceneManager[_0x485b7c(0x849)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x485b7c(0x239)](_0x1b2510,_0x1b2510);const _0x19f7d1=$gameTemp[_0x485b7c(0xb5d)](),_0x67c803=VisuMZ[_0x485b7c(0x97d)](_0x1b2510[_0x485b7c(0x77d)]),_0x2e7754=VisuMZ[_0x485b7c(0x97d)](_0x1b2510['Targets2']),_0xfb2060=_0x1b2510['TargetLocation'];let _0x40638b=_0x1b2510[_0x485b7c(0xc21)];const _0x325a0a=_0x1b2510['OffsetAdjust'],_0x444b9c=_0x1b2510[_0x485b7c(0x20c)],_0x1487a5=_0x1b2510[_0x485b7c(0x4e7)],_0x21417f=_0x1b2510[_0x485b7c(0x249)],_0x109778=_0x1b2510[_0x485b7c(0x2ad)],_0x3c6601=_0x1b2510['EasingType'],_0x3aadc0=_0x1b2510[_0x485b7c(0x6c4)],_0x185682=_0x1b2510[_0x485b7c(0x85c)],_0x3918b2=Math[_0x485b7c(0x9bd)](..._0x2e7754['map'](_0x66131d=>_0x66131d[_0x485b7c(0x62d)]()[_0x485b7c(0xc31)]-_0x66131d[_0x485b7c(0x62d)]()['mainSpriteWidth']()/0x2)),_0x30fd15=Math['max'](..._0x2e7754[_0x485b7c(0x883)](_0x476fdd=>_0x476fdd['battler']()[_0x485b7c(0xc31)]+_0x476fdd[_0x485b7c(0x62d)]()[_0x485b7c(0x3c8)]()/0x2)),_0xefe0ad=Math['min'](..._0x2e7754[_0x485b7c(0x883)](_0x63d0c0=>_0x63d0c0[_0x485b7c(0x62d)]()[_0x485b7c(0x960)]-_0x63d0c0[_0x485b7c(0x62d)]()[_0x485b7c(0x230)]())),_0x5282d7=Math['max'](..._0x2e7754['map'](_0x271afa=>_0x271afa[_0x485b7c(0x62d)]()[_0x485b7c(0x960)])),_0x4a543a=_0x2e7754[_0x485b7c(0x2ed)](_0x5e989c=>_0x5e989c[_0x485b7c(0x4ec)]())[_0x485b7c(0x50d)],_0x2cc8f7=_0x2e7754['filter'](_0x200dfa=>_0x200dfa['isEnemy']())[_0x485b7c(0x50d)];let _0x2132df=0x0,_0x1e2bcb=0x0;if(_0xfb2060[_0x485b7c(0x712)](/front/i))_0x2132df=_0x4a543a>=_0x2cc8f7?_0x3918b2:_0x30fd15;else{if(_0xfb2060['match'](/middle/i))_0x2132df=(_0x3918b2+_0x30fd15)/0x2,_0x40638b=-0x1;else _0xfb2060[_0x485b7c(0x712)](/back/i)&&(_0x2132df=_0x4a543a>=_0x2cc8f7?_0x30fd15:_0x3918b2);}if(_0xfb2060[_0x485b7c(0x712)](/head/i))_0x1e2bcb=_0xefe0ad;else{if(_0xfb2060[_0x485b7c(0x712)](/center/i))_0x1e2bcb=(_0xefe0ad+_0x5282d7)/0x2;else _0xfb2060[_0x485b7c(0x712)](/base/i)&&(_0x1e2bcb=_0x5282d7);}if(!_0x19f7d1)return;for(const _0x43ee53 of _0x67c803){if(!_0x43ee53)continue;let _0x2c5541=_0x2132df,_0x1fe111=_0x1e2bcb;if(_0x325a0a[_0x485b7c(0x712)](/none/i))_0x2c5541+=_0x444b9c,_0x1fe111+=_0x1487a5;else{if(_0x325a0a[_0x485b7c(0x712)](/horz/i)&&_0x325a0a['match'](/vert/i))_0x2c5541+=_0x43ee53[_0x485b7c(0x4ec)]()?-_0x444b9c:_0x444b9c,_0x1fe111+=_0x43ee53[_0x485b7c(0x4ec)]()?-_0x1487a5:_0x1487a5;else{if(_0x325a0a[_0x485b7c(0x712)](/horz/i))_0x2c5541+=_0x43ee53[_0x485b7c(0x4ec)]()?-_0x444b9c:_0x444b9c,_0x1fe111+=_0x1487a5;else _0x325a0a['match'](/vert/i)&&(_0x2c5541+=_0x444b9c,_0x1fe111+=_0x43ee53[_0x485b7c(0x4ec)]()?-_0x1487a5:_0x1487a5);}}_0x43ee53[_0x485b7c(0x120)](_0x2c5541,_0x1fe111,_0x21417f,_0x109778,_0x3c6601,_0x40638b),_0x43ee53[_0x485b7c(0x191)](_0x3aadc0);}if(_0x185682)_0x19f7d1[_0x485b7c(0x77f)](_0x485b7c(0x5da));}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0x661),_0x508fab=>{const _0x18fc48=_0x46c6a8;if(!SceneManager[_0x18fc48(0x849)]())return;VisuMZ[_0x18fc48(0x239)](_0x508fab,_0x508fab);const _0x30407e=$gameTemp[_0x18fc48(0xb5d)](),_0xc78fb4=VisuMZ[_0x18fc48(0x97d)](_0x508fab[_0x18fc48(0x6b5)]),_0x515201=_0x508fab[_0x18fc48(0x3a2)],_0x2d1651=_0x508fab[_0x18fc48(0x249)],_0x48fcd2=_0x508fab[_0x18fc48(0xc15)],_0xa14583=_0x508fab[_0x18fc48(0x5ad)];if(!_0x30407e)return;for(const _0x3fae1d of _0xc78fb4){if(!_0x3fae1d)continue;_0x3fae1d['changeBattlerOpacity'](_0x515201,_0x2d1651,_0x48fcd2);}if(_0xa14583)_0x30407e[_0x18fc48(0x77f)](_0x18fc48(0x88c));}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],'ActSeq_Movement_Scale',_0x32ca24=>{const _0x3e2ffa=_0x46c6a8;if(!SceneManager[_0x3e2ffa(0x849)]())return;VisuMZ[_0x3e2ffa(0x239)](_0x32ca24,_0x32ca24);const _0x24dd39=$gameTemp[_0x3e2ffa(0xb5d)](),_0x10d755=VisuMZ[_0x3e2ffa(0x97d)](_0x32ca24['Targets']),_0x5822f5=_0x32ca24['ScaleX'],_0x2feb93=_0x32ca24[_0x3e2ffa(0x771)],_0xc9940=_0x32ca24[_0x3e2ffa(0x249)],_0x440c9a=_0x32ca24['EasingType'],_0x255859=_0x32ca24[_0x3e2ffa(0xc27)];if(!_0x24dd39)return;for(const _0x365a11 of _0x10d755){if(!_0x365a11)continue;_0x365a11[_0x3e2ffa(0x5d0)](_0x5822f5,_0x2feb93,_0xc9940,_0x440c9a);}if(_0x255859)_0x24dd39[_0x3e2ffa(0x77f)]('battleGrow');}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x268),_0x597c56=>{const _0x5befb2=_0x46c6a8;if(!SceneManager[_0x5befb2(0x849)]())return;VisuMZ[_0x5befb2(0x239)](_0x597c56,_0x597c56);const _0x30c9e7=$gameTemp[_0x5befb2(0xb5d)](),_0x478918=VisuMZ['CreateActionSequenceTargets'](_0x597c56[_0x5befb2(0x6b5)]),_0x3f25d4=_0x597c56[_0x5befb2(0x730)],_0x45482c=_0x597c56[_0x5befb2(0xa7d)],_0x289224=_0x597c56[_0x5befb2(0x249)],_0x550daa=_0x597c56[_0x5befb2(0xc15)],_0x5aa8fe=_0x597c56[_0x5befb2(0x414)];if(!_0x30c9e7)return;for(const _0x53806d of _0x478918){if(!_0x53806d)continue;_0x53806d['skewBattler'](_0x3f25d4,_0x45482c,_0x289224,_0x550daa);}if(_0x5aa8fe)_0x30c9e7[_0x5befb2(0x77f)]('battleSpriteSkew');}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x24e),_0x4e6d22=>{const _0x18aa1d=_0x46c6a8;if(!SceneManager[_0x18aa1d(0x849)]())return;VisuMZ['ConvertParams'](_0x4e6d22,_0x4e6d22);const _0x326fa1=$gameTemp[_0x18aa1d(0xb5d)](),_0x5ea3dc=VisuMZ[_0x18aa1d(0x97d)](_0x4e6d22[_0x18aa1d(0x6b5)]),_0x55ff91=_0x4e6d22[_0x18aa1d(0x7bc)],_0xaa441f=_0x4e6d22[_0x18aa1d(0x249)],_0x3853b0=_0x4e6d22[_0x18aa1d(0xc15)],_0x32218c=_0x4e6d22[_0x18aa1d(0x388)],_0x529191=_0x4e6d22[_0x18aa1d(0x11c)];if(!_0x326fa1)return;for(const _0x8cf01a of _0x5ea3dc){if(!_0x8cf01a)continue;_0x8cf01a[_0x18aa1d(0x919)](_0x55ff91,_0xaa441f,_0x3853b0,_0x32218c);}if(_0x529191)_0x326fa1[_0x18aa1d(0x77f)](_0x18aa1d(0x374));}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],'ActSeq_Movement_WaitForFloat',_0x51c2de=>{const _0x1c9aa7=_0x46c6a8;if(!SceneManager[_0x1c9aa7(0x849)]())return;const _0x181db0=$gameTemp[_0x1c9aa7(0xb5d)]();if(!_0x181db0)return;_0x181db0[_0x1c9aa7(0x77f)](_0x1c9aa7(0xba6));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x435),_0x1edc05=>{const _0xd7b63a=_0x46c6a8;if(!SceneManager[_0xd7b63a(0x849)]())return;const _0x99e3ac=$gameTemp[_0xd7b63a(0xb5d)]();if(!_0x99e3ac)return;_0x99e3ac['setWaitMode'](_0xd7b63a(0x1d4));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xa01),_0x4b7d63=>{const _0x7e87a7=_0x46c6a8;if(!SceneManager[_0x7e87a7(0x849)]())return;const _0x496343=$gameTemp[_0x7e87a7(0xb5d)]();if(!_0x496343)return;_0x496343[_0x7e87a7(0x77f)](_0x7e87a7(0x5da));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x9ff),_0x2d6b85=>{const _0x4f5d20=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;const _0x1eb194=$gameTemp[_0x4f5d20(0xb5d)]();if(!_0x1eb194)return;_0x1eb194['setWaitMode'](_0x4f5d20(0x88c));}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],'ActSeq_Movement_WaitForScale',_0x460d37=>{const _0x266fb3=_0x46c6a8;if(!SceneManager[_0x266fb3(0x849)]())return;const _0x3b38a6=$gameTemp[_0x266fb3(0xb5d)]();if(!_0x3b38a6)return;_0x3b38a6[_0x266fb3(0x77f)](_0x266fb3(0x59c));}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xb15),_0x44f478=>{const _0x368b35=_0x46c6a8;if(!SceneManager[_0x368b35(0x849)]())return;const _0x1d71e8=$gameTemp[_0x368b35(0xb5d)]();if(!_0x1d71e8)return;_0x1d71e8['setWaitMode'](_0x368b35(0xbfd));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x9e8),_0x527024=>{const _0x7f8691=_0x46c6a8;if(!SceneManager[_0x7f8691(0x849)]())return;const _0x23990e=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x23990e)return;_0x23990e[_0x7f8691(0x77f)](_0x7f8691(0x374));}),VisuMZ['BattleCore']['CheckActSeqProjectileVersion']=function(){const _0x2df8a8=_0x46c6a8;if(!Imported[_0x2df8a8(0x35b)])return;if(VisuMZ[_0x2df8a8(0xa62)][_0x2df8a8(0x9d7)]<1.08){let _0x17c9a6='';_0x17c9a6+='VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20',_0x17c9a6+=_0x2df8a8(0x62b),alert(_0x17c9a6),SceneManager['exit']();}},PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x315),_0x3f7096=>{const _0x481ebe=_0x46c6a8;if(!SceneManager[_0x481ebe(0x849)]())return;if(!Imported[_0x481ebe(0x35b)])return;VisuMZ[_0x481ebe(0x239)](_0x3f7096,_0x3f7096),VisuMZ[_0x481ebe(0xa74)][_0x481ebe(0x87b)]();const _0x8ed24=$gameTemp[_0x481ebe(0xb5d)](),_0x466801=_0x3f7096[_0x481ebe(0x6d8)];if(!_0x8ed24)return;const _0x1e34f3=BattleManager['_spriteset'];if(!_0x1e34f3)return;_0x1e34f3[_0x481ebe(0x365)](_0x3f7096);if(_0x466801)_0x8ed24[_0x481ebe(0x77f)](_0x481ebe(0x625));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xbd4),_0x197a33=>{const _0x31714f=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ['ConvertParams'](_0x197a33,_0x197a33),VisuMZ[_0x31714f(0xa74)]['CheckActSeqProjectileVersion']();const _0x1e8070=$gameTemp[_0x31714f(0xb5d)](),_0x31dd31=_0x197a33[_0x31714f(0x6d8)];if(!_0x1e8070)return;const _0x19b754=BattleManager[_0x31714f(0x81e)];if(!_0x19b754)return;_0x19b754[_0x31714f(0x365)](_0x197a33);if(_0x31dd31)_0x1e8070[_0x31714f(0x77f)]('battleProjectiles');}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],'ActSeq_Projectile_Picture',_0x38a72c=>{const _0x305f0b=_0x46c6a8;if(!SceneManager[_0x305f0b(0x849)]())return;if(!Imported[_0x305f0b(0x35b)])return;VisuMZ['ConvertParams'](_0x38a72c,_0x38a72c),VisuMZ['BattleCore']['CheckActSeqProjectileVersion']();const _0x597194=$gameTemp[_0x305f0b(0xb5d)](),_0x3b6fe1=_0x38a72c['WaitForProjectile'];if(!_0x597194)return;const _0x14bdce=BattleManager[_0x305f0b(0x81e)];if(!_0x14bdce)return;_0x14bdce[_0x305f0b(0x365)](_0x38a72c);if(_0x3b6fe1)_0x597194[_0x305f0b(0x77f)]('battleProjectiles');}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x5ef),_0x234dca=>{const _0x30463b=_0x46c6a8;if(!SceneManager[_0x30463b(0x849)]())return;if(!Imported[_0x30463b(0x538)])return;VisuMZ[_0x30463b(0x239)](_0x234dca,_0x234dca);const _0x45905b=$gameTemp['getLastPluginCommandInterpreter'](),_0x5cc37f=_0x234dca['WaitForSkew'];if(!_0x45905b)return;$gameScreen[_0x30463b(0x30c)](_0x234dca[_0x30463b(0x730)],_0x234dca[_0x30463b(0xa7d)],_0x234dca['Duration'],_0x234dca['EasingType']);if(_0x5cc37f)_0x45905b['setWaitMode']('battleSkew');}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x20e),_0x750827=>{const _0x43f189=_0x46c6a8;if(!SceneManager[_0x43f189(0x849)]())return;if(!Imported[_0x43f189(0x538)])return;VisuMZ[_0x43f189(0x239)](_0x750827,_0x750827);const _0x2dcda9=$gameTemp[_0x43f189(0xb5d)](),_0x166de1=_0x750827[_0x43f189(0x414)];if(!_0x2dcda9)return;$gameScreen['setBattleSkew'](0x0,0x0,_0x750827[_0x43f189(0x249)],_0x750827[_0x43f189(0xc15)]);if(_0x166de1)_0x2dcda9[_0x43f189(0x77f)](_0x43f189(0xaa9));}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],_0x46c6a8(0xa7c),_0x34253a=>{const _0x2cc884=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2cc884(0x538)])return;const _0x3935ee=$gameTemp[_0x2cc884(0xb5d)]();if(!_0x3935ee)return;_0x3935ee['setWaitMode']('battleSkew');}),PluginManager[_0x46c6a8(0x1da)](pluginData['name'],'ActSeq_Target_CurrentIndex',_0x1ed20d=>{const _0x5e7e27=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5e7e27(0x239)](_0x1ed20d,_0x1ed20d);const _0xa01ca7=$gameTemp[_0x5e7e27(0xb5d)](),_0x15447a=_0x1ed20d[_0x5e7e27(0x719)],_0x2c0f3f=_0x1ed20d['JumpToLabel'];if(!_0xa01ca7)return;BattleManager[_0x5e7e27(0x80a)]=_0x15447a,BattleManager[_0x5e7e27(0x959)]=BattleManager['_allTargets']?BattleManager[_0x5e7e27(0x1e8)][BattleManager['_targetIndex']]||null:null;if(window[_0x5e7e27(0x59e)])BattleManager['updateBattleVariables']();BattleManager[_0x5e7e27(0x959)]&&_0x2c0f3f['toUpperCase']()[_0x5e7e27(0xa28)]()!==_0x5e7e27(0x129)&&_0xa01ca7[_0x5e7e27(0x825)]([_0x2c0f3f]);}),PluginManager['registerCommand'](pluginData['name'],_0x46c6a8(0xaf5),_0x530ce7=>{const _0x45343f=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x530ce7,_0x530ce7);const _0x265ff8=$gameTemp[_0x45343f(0xb5d)](),_0x3ea244=_0x530ce7['JumpToLabel'];if(!_0x265ff8)return;BattleManager[_0x45343f(0x80a)]++,BattleManager['_target']=BattleManager[_0x45343f(0x1e8)][BattleManager[_0x45343f(0x80a)]]||null;if(window[_0x45343f(0x59e)])BattleManager[_0x45343f(0x3b0)]();BattleManager[_0x45343f(0x959)]&&_0x3ea244['toUpperCase']()[_0x45343f(0xa28)]()!==_0x45343f(0x129)&&_0x265ff8[_0x45343f(0x825)]([_0x3ea244]);}),PluginManager['registerCommand'](pluginData['name'],_0x46c6a8(0x853),_0x131aba=>{const _0xc1ff19=_0x46c6a8;if(!SceneManager[_0xc1ff19(0x849)]())return;VisuMZ[_0xc1ff19(0x239)](_0x131aba,_0x131aba);const _0x210868=$gameTemp[_0xc1ff19(0xb5d)](),_0x383d70=_0x131aba[_0xc1ff19(0xac0)];if(!_0x210868)return;BattleManager[_0xc1ff19(0x80a)]--,BattleManager[_0xc1ff19(0x959)]=BattleManager[_0xc1ff19(0x1e8)][BattleManager[_0xc1ff19(0x80a)]]||null;if(window['$target'])BattleManager[_0xc1ff19(0x3b0)]();BattleManager[_0xc1ff19(0x959)]&&_0x383d70[_0xc1ff19(0x85e)]()[_0xc1ff19(0xa28)]()!==_0xc1ff19(0x129)&&_0x210868[_0xc1ff19(0x825)]([_0x383d70]);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xa7a),_0x4f7ec2=>{const _0x1019d5=_0x46c6a8;if(!SceneManager[_0x1019d5(0x849)]())return;VisuMZ[_0x1019d5(0x239)](_0x4f7ec2,_0x4f7ec2);const _0x46d746=$gameTemp[_0x1019d5(0xb5d)](),_0x123541=_0x4f7ec2[_0x1019d5(0xc6c)],_0xf038ca=_0x4f7ec2['JumpToLabel'];if(!_0x46d746)return;const _0x205ccf=BattleManager['_targetIndex'];for(;;){BattleManager[_0x1019d5(0x80a)]=Math[_0x1019d5(0xafb)](BattleManager['_allTargets'][_0x1019d5(0x50d)]);if(!_0x123541)break;if(BattleManager['_targetIndex']!==_0x205ccf)break;if(BattleManager[_0x1019d5(0x1e8)][_0x1019d5(0x50d)]<=0x1){BattleManager[_0x1019d5(0x80a)]=0x0;break;}}BattleManager[_0x1019d5(0x959)]=BattleManager[_0x1019d5(0x1e8)][BattleManager[_0x1019d5(0x80a)]]||null;if(window[_0x1019d5(0x59e)])BattleManager[_0x1019d5(0x3b0)]();BattleManager[_0x1019d5(0x959)]&&_0xf038ca[_0x1019d5(0x85e)]()['trim']()!==_0x1019d5(0x129)&&_0x46d746['command119']([_0xf038ca]);}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x17f),_0x1def2f=>{const _0x39bc74=_0x46c6a8;if(!SceneManager[_0x39bc74(0x849)]())return;if(!Imported['VisuMZ_3_BattleVoices'])return;if(!ConfigManager[_0x39bc74(0xbfe)])return;VisuMZ[_0x39bc74(0x239)](_0x1def2f,_0x1def2f);const _0x5aa9ce=VisuMZ[_0x39bc74(0x97d)](_0x1def2f[_0x39bc74(0x6b5)]);let _0x1edf9f=_0x1def2f[_0x39bc74(0x7b7)]||'';for(const _0x4c6a8f of _0x5aa9ce){if(!_0x4c6a8f)continue;_0x4c6a8f[_0x39bc74(0x651)](_0x1edf9f);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_BattleVoice_PlaySpecialLine',_0x23fae3=>{const _0x56ea0c=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x56ea0c(0x783)])return;if(!ConfigManager[_0x56ea0c(0xbfe)])return;VisuMZ[_0x56ea0c(0x239)](_0x23fae3,_0x23fae3);const _0x457348=VisuMZ[_0x56ea0c(0x97d)](_0x23fae3[_0x56ea0c(0x6b5)]);let _0x5e8af8=(_0x23fae3['VoiceLineType']||'')+(_0x23fae3['Letter']||'');for(const _0x598541 of _0x457348){if(!_0x598541)continue;_0x598541[_0x56ea0c(0x651)](_0x5e8af8);}}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x91e),_0x48d70c=>{const _0x4548bd=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4548bd(0x239)](_0x48d70c,_0x48d70c);const _0x842aab=VisuMZ[_0x4548bd(0x97d)](_0x48d70c[_0x4548bd(0x6b5)]);for(const _0x6453ad of _0x842aab){if(!_0x6453ad)continue;if(!_0x6453ad[_0x4548bd(0x4ec)]())continue;_0x6453ad[_0x4548bd(0x6d1)]();}}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],'ActSeq_Weapon_NextActiveWeapon',_0x4b688b=>{const _0x388bf4=_0x46c6a8;if(!SceneManager[_0x388bf4(0x849)]())return;VisuMZ['ConvertParams'](_0x4b688b,_0x4b688b);const _0x8fa663=$gameTemp['getLastPluginCommandInterpreter']();let _0x263af7=![];const _0x381aa4=_0x4b688b[_0x388bf4(0xac0)],_0x49973a=VisuMZ[_0x388bf4(0x97d)](_0x4b688b[_0x388bf4(0x6b5)]);for(const _0x5534eb of _0x49973a){if(!_0x5534eb)continue;if(!_0x5534eb[_0x388bf4(0x4ec)]())continue;_0x5534eb['nextActiveWeaponSlot'](),_0x5534eb[_0x388bf4(0x363)]()['length']>0x0?_0x263af7=!![]:_0x5534eb[_0x388bf4(0x6d1)]();}_0x263af7&&_0x381aa4[_0x388bf4(0x85e)]()[_0x388bf4(0xa28)]()!==_0x388bf4(0x129)&&_0x8fa663[_0x388bf4(0x825)]([_0x381aa4]);}),PluginManager['registerCommand'](pluginData[_0x46c6a8(0x106)],'ActSeq_Weapon_SetActiveWeapon',_0x25cc90=>{const _0x569b11=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x25cc90,_0x25cc90);let _0x551192=_0x25cc90[_0x569b11(0xaf7)];_0x551192--,_0x551192=Math['max'](_0x551192,0x0);const _0x3b6227=VisuMZ[_0x569b11(0x97d)](_0x25cc90['Targets']);for(const _0x5f464a of _0x3b6227){if(!_0x5f464a)continue;if(!_0x5f464a[_0x569b11(0x4ec)]())continue;_0x5f464a['setActiveWeaponSlot'](_0x551192);}}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],'ActSeq_Zoom_Scale',_0x31b4eb=>{const _0x3145ee=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3145ee(0x538)])return;VisuMZ[_0x3145ee(0x239)](_0x31b4eb,_0x31b4eb);const _0x501f85=$gameTemp[_0x3145ee(0xb5d)](),_0x45e3e6=_0x31b4eb[_0x3145ee(0x534)];if(!_0x501f85)return;$gameScreen['setBattleZoom'](_0x31b4eb[_0x3145ee(0xaa4)],_0x31b4eb[_0x3145ee(0x249)],_0x31b4eb[_0x3145ee(0xc15)]);if(_0x45e3e6)_0x501f85[_0x3145ee(0x77f)](_0x3145ee(0x163));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0xa33),_0x219e85=>{const _0x1a080c=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1a080c(0x239)](_0x219e85,_0x219e85);const _0x2cc11b=$gameTemp[_0x1a080c(0xb5d)](),_0x5edc13=_0x219e85[_0x1a080c(0x534)];if(!_0x2cc11b)return;$gameScreen['setBattleZoom'](0x1,_0x219e85[_0x1a080c(0x249)],_0x219e85[_0x1a080c(0xc15)]);if(_0x5edc13)_0x2cc11b['setWaitMode'](_0x1a080c(0x163));}),PluginManager[_0x46c6a8(0x1da)](pluginData[_0x46c6a8(0x106)],_0x46c6a8(0x2ff),_0x209f42=>{const _0x17a9a4=_0x46c6a8;if(!SceneManager[_0x17a9a4(0x849)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x56b135=$gameTemp[_0x17a9a4(0xb5d)]();if(!_0x56b135)return;_0x56b135[_0x17a9a4(0x77f)](_0x17a9a4(0x163));}),VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x681)]=Scene_Boot[_0x46c6a8(0x669)][_0x46c6a8(0x2d9)],Scene_Boot['prototype'][_0x46c6a8(0x2d9)]=function(){const _0x2763a0=_0x46c6a8;this[_0x2763a0(0x1d9)](),this[_0x2763a0(0x787)](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x2763a0(0x9d3)](),this[_0x2763a0(0x318)](),VisuMZ['BattleCore'][_0x2763a0(0x681)][_0x2763a0(0x515)](this),this[_0x2763a0(0x327)](),this[_0x2763a0(0x7a2)](),this[_0x2763a0(0x574)](),this[_0x2763a0(0x4ab)]();},Scene_Boot['prototype']['process_VisuMZ_BattleCore_Notetags']=function(){const _0x5811d7=_0x46c6a8;if(VisuMZ[_0x5811d7(0x259)])return;this[_0x5811d7(0xa27)](),this[_0x5811d7(0x16c)](),this[_0x5811d7(0xb4b)]();},Scene_Boot[_0x46c6a8(0x669)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x4de20c=_0x46c6a8,_0xfb8c5b=$dataSystem[_0x4de20c(0x567)]['length'];for(let _0x43a792=0x0;_0x43a792<_0xfb8c5b;_0x43a792++){const _0x51c73c=$dataSystem[_0x4de20c(0x110)][_0x43a792];if(_0x51c73c)continue;$dataSystem[_0x4de20c(0x110)][_0x43a792]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot['prototype'][_0x46c6a8(0x787)]=function(){const _0x4c0a7f=_0x46c6a8,_0x4187e8=VisuMZ[_0x4c0a7f(0xa74)][_0x4c0a7f(0x154)];if(!_0x4187e8[_0x4c0a7f(0x1df)][_0x4c0a7f(0x7d0)]??!![])return;if(!Utils['isOptionValid'](_0x4c0a7f(0xc09)))return;const _0x3fc30d=$dataSkills[_0x4c0a7f(0x5ba)]($dataItems);let _0x18aa17=_0x4c0a7f(0x99c);_0x18aa17+=_0x4c0a7f(0x6a8),_0x18aa17+=_0x4c0a7f(0x3af),_0x18aa17+='Mechanics\x20in\x20damage\x20formulas\x20cause\x20problems\x20with\x20the\x20following:\x0a\x0a',_0x18aa17+=_0x4c0a7f(0xa39),_0x18aa17+=_0x4c0a7f(0x751);for(const _0x4fbb41 of _0x3fc30d){if(!_0x4fbb41)continue;if(!_0x4fbb41[_0x4c0a7f(0xaca)])continue;if(_0x4fbb41['damage']['type']<0x1)continue;const _0x58e373=_0x4fbb41['damage'][_0x4c0a7f(0x123)];if(VisuMZ[_0x4c0a7f(0xa74)]['CheckDamageFormulaForMechanics'](_0x58e373)){const _0x28a33c=$dataItems[_0x4c0a7f(0x4a3)](_0x4fbb41)?_0x4c0a7f(0x737):_0x4c0a7f(0x87a),_0x5dbf73=_0x18aa17[_0x4c0a7f(0x1ba)](_0x28a33c,_0x4fbb41['id'],_0x4fbb41[_0x4c0a7f(0x106)]);alert(_0x5dbf73);}}},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x72d)]=function(_0x2e9d8e){const _0x40b5a5=_0x46c6a8;if(_0x2e9d8e['match'](/\.(?:SETVALUE)\(/i))return!![];if(_0x2e9d8e[_0x40b5a5(0x712)](/\.(?:DIE|REVIVE|REFRESH|RECOVERALL)\(/i))return!![];if(_0x2e9d8e['match'](/\.(?:GAIN|LOSE|ADD|REMOVE|SET|REGENERATE)(?:HP|MP|TP)\(/i))return!![];if(_0x2e9d8e[_0x40b5a5(0x712)](/\.(?:ADD|ADDNEW|REMOVE|ERASE|INCREASE|DECREASE)(?:BUFF|DEBUFF|STATE)\(/i))return!![];if(_0x2e9d8e[_0x40b5a5(0x712)](/\.(?:CLEAR|RESET)(?:STATES|PARAMPLUS|ACTIONS|RESULT|TPBCHARGETIME)\(/i))return!![];return![];},Scene_Boot['prototype'][_0x46c6a8(0x9b1)]=function(){const _0x483a6a=_0x46c6a8,_0x53ed19=VisuMZ['BattleCore'][_0x483a6a(0x154)];_0x53ed19[_0x483a6a(0x1df)][_0x483a6a(0x559)]===undefined&&(_0x53ed19[_0x483a6a(0x1df)][_0x483a6a(0x559)]=_0x483a6a(0x9c9)),_0x53ed19[_0x483a6a(0xa6f)][_0x483a6a(0x609)]===undefined&&(_0x53ed19[_0x483a6a(0xa6f)]['SmoothImage']=![]),_0x53ed19[_0x483a6a(0x6de)][_0x483a6a(0x609)]===undefined&&(_0x53ed19[_0x483a6a(0x6de)]['SmoothImage']=!![]),_0x53ed19[_0x483a6a(0xa6f)][_0x483a6a(0x301)]===undefined&&(_0x53ed19[_0x483a6a(0xa6f)][_0x483a6a(0x301)]=![]),_0x53ed19[_0x483a6a(0xa6f)][_0x483a6a(0x5d3)]===undefined&&(_0x53ed19['Actor'][_0x483a6a(0x5d3)]=!![]);},VisuMZ[_0x46c6a8(0x5a3)]={},Scene_Boot[_0x46c6a8(0x669)][_0x46c6a8(0x9d3)]=function(){const _0x418933=_0x46c6a8;for(const _0x45972b of VisuMZ[_0x418933(0xa74)][_0x418933(0x154)][_0x418933(0x1df)][_0x418933(0x873)]){if(!_0x45972b)continue;const _0x2c8a4a=_0x45972b[_0x418933(0xaf1)][_0x418933(0x85e)]()[_0x418933(0xa28)]();VisuMZ['DamageStyles'][_0x2c8a4a]=_0x45972b;}},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x710)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot[_0x46c6a8(0x669)][_0x46c6a8(0x318)]=function(){const _0x573528=_0x46c6a8,_0x592169=VisuMZ['BattleCore'][_0x573528(0x710)],_0x1b03fd=_0x573528(0x6db),_0x29053b=[[_0x573528(0xb9c),_0x573528(0xc24)],['Post',_0x573528(0xbf3)]],_0x1d1765=[[_0x573528(0x5f3),'JS\x20%1APPLY\x20%2'],['%1Damage%2JS','JS\x20%1DAMAGE\x20%2']],_0xb6912e=[['',''],[_0x573528(0x323),_0x573528(0x9cc)],[_0x573528(0x291),_0x573528(0x357)]];for(const _0x55013d of _0x1d1765){for(const _0x493305 of _0xb6912e){for(const _0x32654a of _0x29053b){const _0x59fa32=_0x55013d[0x0][_0x573528(0x1ba)](_0x32654a[0x0],_0x493305[0x0]),_0x57ae89=_0x55013d[0x1][_0x573528(0x1ba)](_0x32654a[0x1],_0x493305[0x1])[_0x573528(0xa28)](),_0x1f6f4e=new RegExp(_0x1b03fd[_0x573528(0x1ba)](_0x57ae89),'i');_0x592169[_0x59fa32]=_0x1f6f4e;}}}const _0x3cf1dc=[[_0x573528(0x160),'JS\x20%1START\x20ACTION'],[_0x573528(0xb45),_0x573528(0x67f)]];for(const _0x5a7afc of _0x3cf1dc){for(const _0x64a5ce of _0x29053b){const _0xd85a84=_0x5a7afc[0x0][_0x573528(0x1ba)](_0x64a5ce[0x0]),_0x23f0fe=_0x5a7afc[0x1][_0x573528(0x1ba)](_0x64a5ce[0x1]),_0x595574=new RegExp(_0x1b03fd[_0x573528(0x1ba)](_0x23f0fe),'i');_0x592169[_0xd85a84]=_0x595574;}}const _0x29a461=[[_0x573528(0xc05),_0x573528(0x961)],[_0x573528(0x9e6),_0x573528(0x803)],['BattleVictoryJS',_0x573528(0x270)],['BattleDefeatJS','JS\x20BATTLE\x20DEFEAT'],[_0x573528(0x95c),'JS\x20ESCAPE\x20SUCCESS'],[_0x573528(0x5c3),_0x573528(0xbdd)],[_0x573528(0xba5),_0x573528(0x8d6)],[_0x573528(0x76e),_0x573528(0x5cd)],[_0x573528(0x368),_0x573528(0x857)]];for(const _0x5e84f3 of _0x29a461){for(const _0x3c7ade of _0x29053b){const _0x2c888a=_0x5e84f3[0x0][_0x573528(0x1ba)](_0x3c7ade[0x0]),_0x444f63=_0x5e84f3[0x1][_0x573528(0x1ba)](_0x3c7ade[0x1]),_0x289e40=new RegExp(_0x1b03fd[_0x573528(0x1ba)](_0x444f63),'i');_0x592169[_0x2c888a]=_0x289e40;}}},Scene_Boot['prototype'][_0x46c6a8(0xa27)]=function(){const _0xc76239=_0x46c6a8,_0x517a56=$dataSkills[_0xc76239(0x5ba)]($dataItems);for(const _0x3fb70a of _0x517a56){if(!_0x3fb70a)continue;VisuMZ[_0xc76239(0xa74)][_0xc76239(0xa58)](_0x3fb70a);}},Scene_Boot['prototype'][_0x46c6a8(0x16c)]=function(){const _0x4dd8c6=_0x46c6a8,_0x1ce2f6=$dataActors[_0x4dd8c6(0x5ba)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x38b8f9 of _0x1ce2f6){if(!_0x38b8f9)continue;VisuMZ[_0x4dd8c6(0xa74)][_0x4dd8c6(0x252)](_0x38b8f9),_0x38b8f9[_0x4dd8c6(0x74b)]!==undefined&&VisuMZ['BattleCore'][_0x4dd8c6(0x5fc)](_0x38b8f9);}},Scene_Boot[_0x46c6a8(0x669)]['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x18446a=_0x46c6a8,_0x4b0e6f=VisuMZ['BattleCore'][_0x18446a(0x154)]['Mechanics'][_0x18446a(0xb09)],_0x525e52=[];for(const _0x6eef23 of _0x4b0e6f){const _0x81d8ca=$dataTroops[_0x6eef23];if(_0x81d8ca)_0x525e52['push'](JsonEx['makeDeepCopy'](_0x81d8ca));}for(const _0x31fe8c of $dataTroops){if(!_0x31fe8c)continue;for(const _0x25ef9e of _0x525e52){if(_0x25ef9e['id']===_0x31fe8c['id'])continue;_0x31fe8c[_0x18446a(0x4be)]=_0x31fe8c['pages'][_0x18446a(0x5ba)](_0x25ef9e['pages']);}}},Scene_Boot[_0x46c6a8(0x669)][_0x46c6a8(0x574)]=function(){const _0x130d26=_0x46c6a8,_0x9e32a6=VisuMZ['BattleCore'][_0x130d26(0x154)][_0x130d26(0x3f8)];if(_0x9e32a6['BattleStartEvent']>0x0&&$dataCommonEvents[_0x9e32a6[_0x130d26(0x7cd)]]){const _0x4b1bf8=$dataCommonEvents[_0x9e32a6[_0x130d26(0x7cd)]],_0x5162f3=_0x4b1bf8[_0x130d26(0x8b3)][_0x130d26(0x50d)]-0x2,_0x5262e1=_0x4b1bf8['list'][_0x5162f3];if(_0x5262e1&&_0x5262e1['code']!==0xe6){const _0x2ea86b={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x29c572=_0x4b1bf8[_0x130d26(0x8b3)][_0x130d26(0x3c2)]();_0x4b1bf8[_0x130d26(0x8b3)][_0x130d26(0x9db)](_0x2ea86b),_0x4b1bf8[_0x130d26(0x8b3)][_0x130d26(0x9db)](_0x29c572);}}},Scene_Boot[_0x46c6a8(0x669)][_0x46c6a8(0x4ab)]=function(){const _0x43e178=_0x46c6a8;VisuMZ[_0x43e178(0xa74)][_0x43e178(0xadc)](),VisuMZ[_0x43e178(0xa74)][_0x43e178(0x664)]($dataSkills),VisuMZ[_0x43e178(0xa74)][_0x43e178(0x664)]($dataItems);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xadc)]=function(){const _0x41b9cd=_0x46c6a8;VisuMZ[_0x41b9cd(0xa74)][_0x41b9cd(0x3ab)]={};for(const _0x4122f3 of $dataCommonEvents){if(!_0x4122f3)continue;if(_0x4122f3[_0x41b9cd(0x106)][_0x41b9cd(0x712)](/\[(.*)\]/i)){let _0xcbfecf=String(RegExp['$1'])[_0x41b9cd(0xa75)](/,/g,'')['toUpperCase']()['trim']();VisuMZ[_0x41b9cd(0xa74)][_0x41b9cd(0x3ab)][_0xcbfecf]=_0x4122f3['id'];}}},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x664)]=function(_0x1425e0){const _0x5bef38=_0x46c6a8;for(const _0x3715b5 of _0x1425e0){if(!_0x3715b5)continue;VisuMZ[_0x5bef38(0xa74)][_0x5bef38(0x19e)](_0x3715b5);}},VisuMZ['BattleCore']['BindCommonEventKeysForObj']=function(_0x4d4ec7){const _0x59f17d=_0x46c6a8;if(!_0x4d4ec7)return;if(!_0x4d4ec7[_0x59f17d(0x5d1)])return;VisuMZ[_0x59f17d(0xa74)][_0x59f17d(0x3ab)]=VisuMZ['BattleCore'][_0x59f17d(0x3ab)]||{};const _0x416fd9=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x561b4c=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x32f0cc=[];const _0x176339=_0x4d4ec7[_0x59f17d(0xb03)][_0x59f17d(0x712)](_0x416fd9);if(_0x176339){for(const _0x5f148c of _0x176339){_0x5f148c['match'](_0x416fd9);const _0xb7177c=String(RegExp['$1'])[_0x59f17d(0x7cb)](',')[_0x59f17d(0x883)](_0x916a8e=>String(_0x916a8e)['toUpperCase']()[_0x59f17d(0xa28)]());_0x32f0cc=_0x32f0cc[_0x59f17d(0x5ba)](_0xb7177c);}!_0x4d4ec7[_0x59f17d(0xb03)][_0x59f17d(0x712)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x4d4ec7[_0x59f17d(0xb03)]+=_0x59f17d(0x579));;}if(_0x4d4ec7[_0x59f17d(0xb03)][_0x59f17d(0x712)](_0x561b4c)){const _0x9d5c01=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x59f17d(0x883)](_0x25eed0=>String(_0x25eed0)[_0x59f17d(0x85e)]()[_0x59f17d(0xa28)]());_0x32f0cc=_0x32f0cc['concat'](_0x9d5c01);!_0x4d4ec7[_0x59f17d(0xb03)][_0x59f17d(0x712)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x4d4ec7['note']+=_0x59f17d(0x579));;}for(const _0x56525f of _0x32f0cc){if(VisuMZ[_0x59f17d(0xa74)][_0x59f17d(0x3ab)][_0x56525f]){const _0x117f1d=VisuMZ[_0x59f17d(0xa74)][_0x59f17d(0x3ab)][_0x56525f],_0x159854={'code':0x2c,'dataId':_0x117f1d,'value1':0x1,'value2':0x0};_0x4d4ec7[_0x59f17d(0x5d1)]['push'](_0x159854);}}},Scene_Boot['prototype'][_0x46c6a8(0xb4b)]=function(){const _0x318fe4=_0x46c6a8,_0x2dca2b=$dataSkills[_0x318fe4(0x5ba)]($dataItems);for(const _0x12db2f of _0x2dca2b){if(!_0x12db2f)continue;VisuMZ['BattleCore'][_0x318fe4(0x759)](_0x12db2f);}},VisuMZ[_0x46c6a8(0xa74)]['ParseActorNotetags']=VisuMZ[_0x46c6a8(0x26e)],VisuMZ['ParseActorNotetags']=function(_0x2b59ff){const _0x3241de=_0x46c6a8;VisuMZ['BattleCore'][_0x3241de(0x26e)]&&VisuMZ[_0x3241de(0xa74)][_0x3241de(0x26e)][_0x3241de(0x515)](this,_0x2b59ff),VisuMZ[_0x3241de(0xa74)][_0x3241de(0x252)](_0x2b59ff);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x62e)]=VisuMZ[_0x46c6a8(0x62e)],VisuMZ[_0x46c6a8(0x62e)]=function(_0x40501a){const _0x14b6a7=_0x46c6a8;VisuMZ[_0x14b6a7(0xa74)][_0x14b6a7(0x62e)]&&VisuMZ[_0x14b6a7(0xa74)][_0x14b6a7(0x62e)][_0x14b6a7(0x515)](this,_0x40501a),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x40501a);},VisuMZ[_0x46c6a8(0xa74)]['ParseSkillNotetags']=VisuMZ[_0x46c6a8(0xb21)],VisuMZ[_0x46c6a8(0xb21)]=function(_0x373c79){const _0x1725a6=_0x46c6a8;VisuMZ['BattleCore']['ParseSkillNotetags']&&VisuMZ['BattleCore'][_0x1725a6(0xb21)][_0x1725a6(0x515)](this,_0x373c79),VisuMZ[_0x1725a6(0xa74)][_0x1725a6(0xa58)](_0x373c79),VisuMZ[_0x1725a6(0xa74)][_0x1725a6(0x759)](_0x373c79);},VisuMZ['BattleCore'][_0x46c6a8(0xa25)]=VisuMZ[_0x46c6a8(0xa25)],VisuMZ[_0x46c6a8(0xa25)]=function(_0x10392f){const _0x52d772=_0x46c6a8;VisuMZ[_0x52d772(0xa74)]['ParseItemNotetags']&&VisuMZ[_0x52d772(0xa74)]['ParseItemNotetags']['call'](this,_0x10392f),VisuMZ['BattleCore'][_0x52d772(0xa58)](_0x10392f),VisuMZ[_0x52d772(0xa74)][_0x52d772(0x759)](_0x10392f);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x289)]=VisuMZ[_0x46c6a8(0x289)],VisuMZ[_0x46c6a8(0x289)]=function(_0x1c3826){const _0x5b3566=_0x46c6a8;VisuMZ[_0x5b3566(0xa74)][_0x5b3566(0x289)]&&VisuMZ[_0x5b3566(0xa74)]['ParseWeaponNotetags'][_0x5b3566(0x515)](this,_0x1c3826),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x1c3826);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x601)]=VisuMZ[_0x46c6a8(0x601)],VisuMZ[_0x46c6a8(0x601)]=function(_0x4aaa28){const _0x44ee67=_0x46c6a8;VisuMZ[_0x44ee67(0xa74)][_0x44ee67(0x601)]&&VisuMZ[_0x44ee67(0xa74)][_0x44ee67(0x601)][_0x44ee67(0x515)](this,_0x4aaa28),VisuMZ['BattleCore'][_0x44ee67(0x252)](_0x4aaa28);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x992)]=VisuMZ[_0x46c6a8(0x992)],VisuMZ[_0x46c6a8(0x992)]=function(_0x19ac19){const _0x5889fe=_0x46c6a8;VisuMZ[_0x5889fe(0xa74)]['ParseEnemyNotetags']&&VisuMZ[_0x5889fe(0xa74)]['ParseEnemyNotetags'][_0x5889fe(0x515)](this,_0x19ac19),VisuMZ[_0x5889fe(0xa74)][_0x5889fe(0x252)](_0x19ac19);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x61e)]=VisuMZ['ParseStateNotetags'],VisuMZ[_0x46c6a8(0x61e)]=function(_0x538ce5){const _0x154c80=_0x46c6a8;VisuMZ['BattleCore'][_0x154c80(0x61e)]&&VisuMZ['BattleCore'][_0x154c80(0x61e)][_0x154c80(0x515)](this,_0x538ce5),VisuMZ[_0x154c80(0xa74)][_0x154c80(0x252)](_0x538ce5),VisuMZ[_0x154c80(0xa74)]['Parse_Notetags_HelpDescription'](_0x538ce5);},VisuMZ['BattleCore'][_0x46c6a8(0xa58)]=function(_0x56d040){const _0x490ba7=_0x46c6a8,_0x17769c=[_0x490ba7(0x1e7),_0x490ba7(0x1a9),_0x490ba7(0x2e0),_0x490ba7(0x88a),_0x490ba7(0x766),'PostStartActionJS',_0x490ba7(0x314),'PostEndActionJS'];for(const _0x214630 of _0x17769c){VisuMZ[_0x490ba7(0xa74)][_0x490ba7(0x1e6)](_0x56d040,_0x214630);}const _0x5a29f6=_0x56d040['note'];_0x5a29f6['match'](/<ALWAYS CRITICAL/i)&&(_0x56d040['damage'][_0x490ba7(0x580)]=!![]),_0x5a29f6['match'](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x56d040[_0x490ba7(0x550)]=Math[_0x490ba7(0x968)](0x1,Number(RegExp['$1']))),_0x5a29f6[_0x490ba7(0x712)](/<TARGET:[ ](.*)>/i)&&(_0x56d040[_0x490ba7(0x476)]=String(RegExp['$1'])[_0x490ba7(0x85e)]()['trim']());},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x252)]=function(_0x40c1fe){const _0x10f634=_0x46c6a8,_0x2d4289=[_0x10f634(0x811),_0x10f634(0x1d0),_0x10f634(0x284),_0x10f634(0x8d3),'PreApplyAsTargetJS',_0x10f634(0xb6a),'PreDamageAsTargetJS',_0x10f634(0x9ed),'PreStartActionJS','PostStartActionJS',_0x10f634(0x314),_0x10f634(0x5cc),'PreStartBattleJS','PostStartBattleJS','PreEndBattleJS',_0x10f634(0x206),_0x10f634(0x672),_0x10f634(0x3d2),_0x10f634(0x95c),_0x10f634(0x5c3),_0x10f634(0x5ed),'PostStartTurnJS','PreEndTurnJS',_0x10f634(0x217),_0x10f634(0x1c5),_0x10f634(0x8b6)];for(const _0x3460cb of _0x2d4289){VisuMZ[_0x10f634(0xa74)][_0x10f634(0x1e6)](_0x40c1fe,_0x3460cb);}const _0x279f16=[_0x10f634(0x2b3),_0x10f634(0x85f),_0x10f634(0x324),_0x10f634(0x987),_0x10f634(0x434)];for(const _0x5be528 of _0x279f16){VisuMZ[_0x10f634(0xa74)][_0x10f634(0x4d0)](_0x40c1fe,_0x5be528);}},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x759)]=function(_0x1f3408){const _0x5a2b73=_0x46c6a8,_0x46fc75=_0x1f3408[_0x5a2b73(0xb03)];if(_0x46fc75[_0x5a2b73(0x712)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x4dd07d=String(RegExp['$1']),_0x554e6f=VisuMZ[_0x5a2b73(0xa74)][_0x5a2b73(0x916)](_0x1f3408,_0x5a2b73(0x6b5));VisuMZ[_0x5a2b73(0xa74)][_0x5a2b73(0xb93)](_0x4dd07d,_0x554e6f);}if(_0x46fc75[_0x5a2b73(0x712)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x5bc453=String(RegExp['$1']),_0x5d29d4=VisuMZ[_0x5a2b73(0xa74)]['createKeyJS'](_0x1f3408,_0x5a2b73(0xb82));VisuMZ[_0x5a2b73(0xa74)][_0x5a2b73(0xa00)](_0x5bc453,_0x5d29d4);}},VisuMZ[_0x46c6a8(0xa74)]['JS']={},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x1e6)]=function(_0x488fb3,_0x282960){const _0x325d48=_0x46c6a8,_0x50a381=_0x488fb3['note'];if(_0x50a381[_0x325d48(0x712)](VisuMZ['BattleCore']['RegExp'][_0x282960])){const _0x4774d3=RegExp['$1'],_0x425467=_0x325d48(0x8a9)['format'](_0x4774d3),_0x157787=VisuMZ['BattleCore'][_0x325d48(0x916)](_0x488fb3,_0x282960);VisuMZ[_0x325d48(0xa74)]['JS'][_0x157787]=new Function(_0x425467);}},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x916)]=function(_0x4c25c9,_0x2befc2){const _0x4305e5=_0x46c6a8;if(VisuMZ[_0x4305e5(0x916)])return VisuMZ['createKeyJS'](_0x4c25c9,_0x2befc2);let _0x8b0673='';if($dataActors[_0x4305e5(0x4a3)](_0x4c25c9))_0x8b0673=_0x4305e5(0x27e)[_0x4305e5(0x1ba)](_0x4c25c9['id'],_0x2befc2);if($dataClasses[_0x4305e5(0x4a3)](_0x4c25c9))_0x8b0673=_0x4305e5(0x6da)[_0x4305e5(0x1ba)](_0x4c25c9['id'],_0x2befc2);if($dataSkills[_0x4305e5(0x4a3)](_0x4c25c9))_0x8b0673=_0x4305e5(0x5ae)[_0x4305e5(0x1ba)](_0x4c25c9['id'],_0x2befc2);if($dataItems['includes'](_0x4c25c9))_0x8b0673=_0x4305e5(0xa16)[_0x4305e5(0x1ba)](_0x4c25c9['id'],_0x2befc2);if($dataWeapons[_0x4305e5(0x4a3)](_0x4c25c9))_0x8b0673=_0x4305e5(0x27a)['format'](_0x4c25c9['id'],_0x2befc2);if($dataArmors['includes'](_0x4c25c9))_0x8b0673=_0x4305e5(0x2dd)[_0x4305e5(0x1ba)](_0x4c25c9['id'],_0x2befc2);if($dataEnemies[_0x4305e5(0x4a3)](_0x4c25c9))_0x8b0673=_0x4305e5(0x96b)[_0x4305e5(0x1ba)](_0x4c25c9['id'],_0x2befc2);if($dataStates[_0x4305e5(0x4a3)](_0x4c25c9))_0x8b0673=_0x4305e5(0x245)[_0x4305e5(0x1ba)](_0x4c25c9['id'],_0x2befc2);return _0x8b0673;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xb93)]=function(_0x3b1d8a,_0xaba316){const _0x395fa7=_0x46c6a8,_0x1363f3=_0x395fa7(0x6ad)['format'](_0x3b1d8a);VisuMZ[_0x395fa7(0xa74)]['JS'][_0xaba316]=new Function(_0x1363f3);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xa00)]=function(_0x4c469b,_0x2a8cce){const _0xf0f7c2=_0x46c6a8,_0x1176ed=_0xf0f7c2(0x3fb)['format'](_0x4c469b);VisuMZ[_0xf0f7c2(0xa74)]['JS'][_0x2a8cce]=new Function(_0x1176ed);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x4d0)]=function(_0x3b2281,_0x4033d5){const _0x4d426b=_0x46c6a8,_0x407ebf=_0x3b2281['note'];if(_0x407ebf['match'](VisuMZ[_0x4d426b(0xa74)][_0x4d426b(0x710)][_0x4033d5])){const _0x95ced7=RegExp['$1'],_0x304fa8=_0x4d426b(0x2a0)['format'](_0x95ced7),_0x1c945b=VisuMZ['BattleCore'][_0x4d426b(0x916)](_0x3b2281,_0x4033d5);VisuMZ['BattleCore']['JS'][_0x1c945b]=new Function(_0x304fa8);}},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x5fc)]=function(_0xf02125){const _0x4c6a5a=_0x46c6a8;_0xf02125['description']='-';const _0x258826=_0xf02125[_0x4c6a5a(0xb03)];_0x258826[_0x4c6a5a(0x712)](/<(?:HELP|HELP DESCRIPTION|DESCRIPTION)>\s*([\s\S]*)\s*<\/(?:HELP|HELP DESCRIPTION|DESCRIPTION)>/i)&&(_0xf02125[_0x4c6a5a(0x56a)]=String(RegExp['$1'])[_0x4c6a5a(0xa28)]()),_0x258826[_0x4c6a5a(0x712)](/<(?:IN-BATTLE |)STATUS DESCRIPTION>\s*([\s\S]*)\s*<\/(?:IN-BATTLE |)STATUS DESCRIPTION>/i)&&(_0xf02125[_0x4c6a5a(0x70f)]=String(RegExp['$1'])[_0x4c6a5a(0xa28)]()),_0x258826[_0x4c6a5a(0x712)](/<EXCLUDE FROM (?:HELP|STATUS|STATUS LIST|LISTING|STATUS LISTING)>/i)&&(_0xf02125[_0x4c6a5a(0xa9d)]=!![]);},TextManager[_0x46c6a8(0x581)]=VisuMZ[_0x46c6a8(0xa74)]['Settings'][_0x46c6a8(0x821)]['CmdTextAutoBattle'],TextManager[_0x46c6a8(0xb5f)]=VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x70d)][_0x46c6a8(0x90d)],TextManager[_0x46c6a8(0x1ed)]=VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x70d)][_0x46c6a8(0x3a1)],TextManager['visualHpGauge']=VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0xbd3)][_0x46c6a8(0xaf1)],ColorManager[_0x46c6a8(0x8d2)]=function(_0x55fe3e){const _0x473f47=_0x46c6a8;return _0x55fe3e=String(_0x55fe3e),_0x55fe3e[_0x473f47(0x712)](/#(.*)/i)?_0x473f47(0x948)[_0x473f47(0x1ba)](String(RegExp['$1'])):this[_0x473f47(0x2d8)](Number(_0x55fe3e));},DataManager[_0x46c6a8(0x704)]=function(_0x1601f5){const _0x5a76df=_0x46c6a8;if(_0x1601f5[_0x5a76df(0xb03)][_0x5a76df(0x712)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0xf769b7=String(RegExp['$1'])[_0x5a76df(0x85e)]()[_0x5a76df(0xa28)]();if(_0xf769b7===_0x5a76df(0x151))return'MANUAL';if(VisuMZ['DamageStyles'][_0xf769b7])return _0xf769b7;}const _0x5c8eb6=VisuMZ[_0x5a76df(0xa74)]['Settings'][_0x5a76df(0x1df)]['DefaultDamageStyle'][_0x5a76df(0x85e)]()[_0x5a76df(0xa28)]();if(VisuMZ[_0x5a76df(0x5a3)][_0x5c8eb6])return _0x5c8eb6;return _0x5a76df(0x151);},DataManager[_0x46c6a8(0x101)]=function(_0x1e063b){const _0x488e8e=_0x46c6a8;_0x1e063b=_0x1e063b['toUpperCase']()['trim'](),this['_stypeIDs']=this['_stypeIDs']||{};if(this[_0x488e8e(0x844)][_0x1e063b])return this['_stypeIDs'][_0x1e063b];for(let _0x1bed60=0x1;_0x1bed60<0x64;_0x1bed60++){if(!$dataSystem[_0x488e8e(0x3e4)][_0x1bed60])continue;let _0x263103=$dataSystem['skillTypes'][_0x1bed60][_0x488e8e(0x85e)]()[_0x488e8e(0xa28)]();_0x263103=_0x263103['replace'](/\x1I\[(\d+)\]/gi,''),_0x263103=_0x263103[_0x488e8e(0xa75)](/\\I\[(\d+)\]/gi,''),this[_0x488e8e(0x844)][_0x263103]=_0x1bed60;}return this[_0x488e8e(0x844)][_0x1e063b]||0x0;},DataManager['getSkillIdWithName']=function(_0x57b5fd){const _0x4e66d5=_0x46c6a8;_0x57b5fd=_0x57b5fd[_0x4e66d5(0x85e)]()[_0x4e66d5(0xa28)](),this[_0x4e66d5(0x237)]=this[_0x4e66d5(0x237)]||{};if(this[_0x4e66d5(0x237)][_0x57b5fd])return this[_0x4e66d5(0x237)][_0x57b5fd];for(const _0x38ce9c of $dataSkills){if(!_0x38ce9c)continue;this[_0x4e66d5(0x237)][_0x38ce9c[_0x4e66d5(0x106)][_0x4e66d5(0x85e)]()[_0x4e66d5(0xa28)]()]=_0x38ce9c['id'];}return this[_0x4e66d5(0x237)][_0x57b5fd]||0x0;},DataManager[_0x46c6a8(0x5f7)]=function(_0x36e805){const _0x38cecb=_0x46c6a8;_0x36e805=_0x36e805['toUpperCase']()[_0x38cecb(0xa28)](),this[_0x38cecb(0x310)]=this[_0x38cecb(0x310)]||{};if(this[_0x38cecb(0x310)][_0x36e805])return this['_enemyIDs'][_0x36e805];for(const _0x527d06 of $dataEnemies){if(!_0x527d06)continue;this['_enemyIDs'][_0x527d06[_0x38cecb(0x106)][_0x38cecb(0x85e)]()[_0x38cecb(0xa28)]()]=_0x527d06['id'];}return this[_0x38cecb(0x310)][_0x36e805]||0x0;},DataManager[_0x46c6a8(0xb57)]=function(_0x4f7e8f){const _0x49c008=_0x46c6a8;_0x4f7e8f=_0x4f7e8f[_0x49c008(0x85e)]()[_0x49c008(0xa28)](),this['_wtypeIDs']=this[_0x49c008(0x358)]||{};if(this['_wtypeIDs'][_0x4f7e8f])return this['_wtypeIDs'][_0x4f7e8f];for(let _0x55a086=0x1;_0x55a086<0x64;_0x55a086++){if(!$dataSystem[_0x49c008(0x567)][_0x55a086])continue;let _0x3c6c14=$dataSystem[_0x49c008(0x567)][_0x55a086][_0x49c008(0x85e)]()['trim']();_0x3c6c14=_0x3c6c14['replace'](/\x1I\[(\d+)\]/gi,''),_0x3c6c14=_0x3c6c14[_0x49c008(0xa75)](/\\I\[(\d+)\]/gi,''),this[_0x49c008(0x358)][_0x3c6c14]=_0x55a086;}return this[_0x49c008(0x358)]['BARE\x20HANDS']=0x0,this[_0x49c008(0x358)][_0x4f7e8f]||0x0;},DataManager[_0x46c6a8(0x44c)]=function(_0x47b842){const _0x47d6c1=_0x46c6a8,_0x3c225a=_0x47d6c1(0x772);let _0x22e714=_0x47b842[_0x47d6c1(0x9ad)],_0x5b8be6=_0x47b842['name'];const _0x22d1ad=_0x47b842[_0x47d6c1(0xb03)];return _0x22d1ad[_0x47d6c1(0x712)](/<DISPLAY ICON: (\d+)>/i)&&(_0x22e714=Number(RegExp['$1'])),_0x22d1ad[_0x47d6c1(0x712)](/<DISPLAY TEXT: (.*)>/i)&&(_0x5b8be6=String(RegExp['$1'])),_0x3c225a['format'](_0x22e714,_0x5b8be6);},DataManager[_0x46c6a8(0x4d4)]=function(_0x57f75f){const _0x3c465c=_0x46c6a8;return _0x57f75f[_0x3c465c(0xb03)][_0x3c465c(0x712)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x57f75f[_0x3c465c(0x106)];},DataManager[_0x46c6a8(0x5a0)]=function(_0x10584e){const _0x9b42d4=_0x46c6a8;return _0x10584e['note'][_0x9b42d4(0x712)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x10584e[_0x9b42d4(0x9ad)];},DataManager[_0x46c6a8(0x5b6)]=function(_0x58f898){const _0x4c228b=_0x46c6a8,_0x3413b0=$dataEnemies[_0x58f898];if(_0x3413b0){if(_0x3413b0[_0x4c228b(0xb03)][_0x4c228b(0x712)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x3232b4=String(RegExp['$1'])[_0x4c228b(0x7cb)](/[\r\n]+/)[_0x4c228b(0x45d)](''),_0xbe3283=this[_0x4c228b(0x70b)](_0x3232b4);_0x58f898=this[_0x4c228b(0x5f7)](_0xbe3283)||_0x58f898,_0x58f898=DataManager[_0x4c228b(0x5b6)](_0x58f898);}}return _0x58f898;},DataManager[_0x46c6a8(0x70b)]=function(_0x5f0480){const _0x1018d0=_0x46c6a8;let _0x3057df=0x0;const _0x230c74={};for(const _0x24f8b4 of _0x5f0480){if(_0x24f8b4[_0x1018d0(0x712)](/(.*):[ ](\d+)/i)){const _0x181d55=String(RegExp['$1'])[_0x1018d0(0xa28)](),_0xeb0791=Number(RegExp['$2']);_0x230c74[_0x181d55]=_0xeb0791,_0x3057df+=_0xeb0791;}else{if(_0x24f8b4[_0x1018d0(0x712)](/(.*):[ ](\d+\.?\d+)/i)){const _0x3191f7=String(RegExp['$1'])[_0x1018d0(0xa28)](),_0x142266=Number(RegExp['$2']);_0x230c74[_0x3191f7]=_0x142266,_0x3057df+=_0x142266;}else _0x24f8b4!==''&&(_0x230c74[_0x24f8b4]=0x1,_0x3057df++);}}if(_0x3057df<=0x0)return'';let _0x265121=Math[_0x1018d0(0x758)]()*_0x3057df;for(const _0x18fb10 in _0x230c74){_0x265121-=_0x230c74[_0x18fb10];if(_0x265121<=0x0)return _0x18fb10;}return'';},DataManager[_0x46c6a8(0x155)]=function(_0x4d46a6){const _0x1ea600=_0x46c6a8;if(!_0x4d46a6)return![];if(!VisuMZ[_0x1ea600(0xa74)][_0x1ea600(0x154)][_0x1ea600(0x3bf)][_0x1ea600(0x5b0)])return![];if(_0x4d46a6[_0x1ea600(0xb03)]['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x4d46a6[_0x1ea600(0xb03)]['match'](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x5c645e of _0x4d46a6['effects']){if(!_0x5c645e)continue;if(_0x5c645e['code']===Game_Action[_0x1ea600(0x192)])return!![];}return![];},DataManager[_0x46c6a8(0x93d)]=function(_0x34c63e){const _0x34d002=_0x46c6a8,_0x39921c=$dataTroops[_0x34c63e];if(!_0x39921c)return'';let _0x2fc32e='';_0x2fc32e+=_0x39921c[_0x34d002(0x106)];for(const _0x51b7f3 of _0x39921c[_0x34d002(0x4be)]){for(const _0x3062ef of _0x51b7f3[_0x34d002(0x8b3)]){[0x6c,0x198][_0x34d002(0x4a3)](_0x3062ef[_0x34d002(0xb27)])&&(_0x2fc32e+='\x0a',_0x2fc32e+=_0x3062ef[_0x34d002(0xb91)][0x0]);}}return _0x2fc32e;},ConfigManager['autoBattleAtStart']=ConfigManager['autoBattleAtStart']??![],ConfigManager['autoBattleUseSkills']=ConfigManager[_0x46c6a8(0x6fe)]??![],ConfigManager['visualHpGauge']=ConfigManager['visualHpGauge']??!![],VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x2fc)]=ConfigManager[_0x46c6a8(0x63f)],ConfigManager[_0x46c6a8(0x63f)]=function(){const _0x4e1993=_0x46c6a8,_0x1eea9b=VisuMZ['BattleCore'][_0x4e1993(0x2fc)][_0x4e1993(0x515)](this);return _0x1eea9b[_0x4e1993(0x6a2)]=this[_0x4e1993(0x6a2)],_0x1eea9b[_0x4e1993(0x6fe)]=this[_0x4e1993(0x6fe)],_0x1eea9b[_0x4e1993(0xb3f)]=this[_0x4e1993(0xb3f)],_0x1eea9b;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x663)]=ConfigManager['applyData'],ConfigManager[_0x46c6a8(0x98e)]=function(_0xb867b3){const _0x55a804=_0x46c6a8;VisuMZ[_0x55a804(0xa74)][_0x55a804(0x663)][_0x55a804(0x515)](this,_0xb867b3),_0x55a804(0x6a2)in _0xb867b3?this[_0x55a804(0x6a2)]=_0xb867b3[_0x55a804(0x6a2)]:this[_0x55a804(0x6a2)]=![],_0x55a804(0x6fe)in _0xb867b3?this[_0x55a804(0x6fe)]=_0xb867b3[_0x55a804(0x6fe)]:this['autoBattleUseSkills']=![],_0x55a804(0xb3f)in _0xb867b3?this[_0x55a804(0xb3f)]=_0xb867b3['visualHpGauge']:this[_0x55a804(0xb3f)]=!![];},ImageManager[_0x46c6a8(0x42f)]=ImageManager[_0x46c6a8(0x42f)]||0x9,ImageManager[_0x46c6a8(0x99f)]=ImageManager[_0x46c6a8(0x99f)]||0x6,VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x3c1)]=BattleManager[_0x46c6a8(0x208)],BattleManager[_0x46c6a8(0x208)]=function(_0x2029f7,_0x9372ae,_0x4a5743){const _0x468484=_0x46c6a8;VisuMZ['BattleCore'][_0x468484(0x3c1)][_0x468484(0x515)](this,_0x2029f7,_0x9372ae,_0x4a5743),this[_0x468484(0x5b2)]={};},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x537)]=BattleManager[_0x46c6a8(0x8c3)],BattleManager['initMembers']=function(){const _0x7d77e9=_0x46c6a8;VisuMZ[_0x7d77e9(0xa74)][_0x7d77e9(0x537)][_0x7d77e9(0x515)](this),this[_0x7d77e9(0xb31)]=[];},BattleManager[_0x46c6a8(0x3b0)]=function(){const _0x3d5897=_0x46c6a8;$subject=this[_0x3d5897(0x80d)],$targets=this[_0x3d5897(0x4b4)],$target=this[_0x3d5897(0x959)]||this[_0x3d5897(0x4b4)][this[_0x3d5897(0x80a)]||0x0];},BattleManager[_0x46c6a8(0x3fd)]=function(){const _0x50d235=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;const _0x4e5729=SceneManager['_scene'][_0x50d235(0x624)];if(_0x4e5729)_0x4e5729[_0x50d235(0x6f1)]();},BattleManager[_0x46c6a8(0x9b9)]=function(){const _0x19aa74=_0x46c6a8;if(BattleManager[_0x19aa74(0x57d)]())return _0x19aa74(0x389);return _0x19aa74(0x73c);},BattleManager[_0x46c6a8(0x7f9)]=function(_0x5b79b1){return _0x5b79b1=_0x5b79b1['toUpperCase']()['trim'](),this['battleSys']()===_0x5b79b1;},BattleManager[_0x46c6a8(0x49c)]=function(){const _0x469457=_0x46c6a8;return this['isBattleSys'](_0x469457(0x73c));},BattleManager[_0x46c6a8(0x2ae)]=function(){const _0x35c2af=_0x46c6a8;return this[_0x35c2af(0x49c)]();},BattleManager[_0x46c6a8(0xb30)]=function(){return!this['isTurnBased']();},BattleManager[_0x46c6a8(0x6e0)]=function(){const _0x3aa294=_0x46c6a8;return!this['isTurnBased']()&&!this[_0x3aa294(0xb30)]();},BattleManager['getBattlerFromKey']=function(_0x117423){const _0x41a528=_0x46c6a8;this[_0x41a528(0x5b2)]=this[_0x41a528(0x5b2)]||{};if(this[_0x41a528(0x5b2)][_0x117423]!==undefined)return this[_0x41a528(0x5b2)][_0x117423];this[_0x41a528(0x5b2)][_0x117423]=null;const _0x6063c4=this['allBattleMembers'](),_0x13f9a=_0x6063c4['find'](_0x4462eb=>_0x4462eb[_0x41a528(0xb12)]()===_0x117423);if(_0x13f9a)this['_battlerKeyCache'][_0x117423]=_0x13f9a;return this['_battlerKeyCache'][_0x117423];},Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0xb12)]=function(){const _0x1ab670=_0x46c6a8;return _0x1ab670(0x8da)['format'](this[_0x1ab670(0x4ec)]()?_0x1ab670(0x185):_0x1ab670(0x78f),this[_0x1ab670(0x106)]()+'-'+(this['isActor']()?this['actorId']():this[_0x1ab670(0x4f0)]()));},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x372)]=function(_0x491b33){const _0x5ad34d=_0x46c6a8;if(this[_0x5ad34d(0x7ab)]!=='')return;typeof _0x491b33===_0x5ad34d(0x731)?this[_0x5ad34d(0x7ab)]=_0x491b33['toLowerCase']()[_0x5ad34d(0xa28)]():this[_0x5ad34d(0x7ab)]=_0x491b33['battlerKey']();},Game_Action['prototype'][_0x46c6a8(0x796)]=function(){return[this['getSpecificBattlerKeyTarget']()];},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x48f)]=function(){const _0x36d13b=_0x46c6a8,_0xc4df84=this[_0x36d13b(0x7ab)]||'',_0x3748c7=BattleManager['getBattlerFromKey'](_0xc4df84);if(!_0x3748c7)return this[_0x36d13b(0x95a)]();if(!_0x3748c7[_0x36d13b(0x3d5)]())return this['getBattlerKeyTargetReplacement']();return _0x3748c7;},Game_Action[_0x46c6a8(0x669)]['getBattlerKeyTargetReplacement']=function(){const _0x4d9b05=_0x46c6a8,_0x4ce476=this[_0x4d9b05(0x7ab)];return _0x4ce476['match'](/ACTOR/i)?this['friendsUnit']()[_0x4d9b05(0x828)]():this[_0x4d9b05(0x19a)]()[_0x4d9b05(0x828)]();},BattleManager[_0x46c6a8(0xa9a)]=function(){const _0x263f6b=_0x46c6a8;return this[_0x263f6b(0x808)]()[_0x263f6b(0x2ed)](_0x216e7c=>_0x216e7c[_0x263f6b(0x254)]());},BattleManager['processBattleCoreJS']=function(_0x10d507){const _0x16c974=_0x46c6a8;_0x10d507===_0x16c974(0x672)&&(this['_endingBattle']=!![]),$gameParty[_0x16c974(0x194)](_0x10d507),$gameTroop[_0x16c974(0x194)](_0x10d507);},VisuMZ['BattleCore']['BattleManager_startBattle']=BattleManager[_0x46c6a8(0xc6b)],BattleManager[_0x46c6a8(0xc6b)]=function(){const _0x5d2f38=_0x46c6a8;this[_0x5d2f38(0x9c8)]=![],this['_autoBattle']=ConfigManager[_0x5d2f38(0x6a2)],this['_endingBattle']=![],this['processBattleCoreJS'](_0x5d2f38(0x57c)),VisuMZ[_0x5d2f38(0xa74)][_0x5d2f38(0x411)][_0x5d2f38(0x515)](this),this[_0x5d2f38(0x194)](_0x5d2f38(0xaf8));},BattleManager[_0x46c6a8(0x108)]=function(_0xc2b998){const _0x21d052=_0x46c6a8,_0x1b3cf0=VisuMZ[_0x21d052(0xa74)][_0x21d052(0x154)]['Mechanics'];_0xc2b998!==_0x21d052(0x670)&&_0x1b3cf0[_0x21d052(0x496)]&&VisuMZ[_0x21d052(0xa74)][_0x21d052(0x889)](_0x1b3cf0[_0x21d052(0x496)])&&$gameTemp[_0x21d052(0xa54)](_0x1b3cf0['BattleEndEvent']);const _0x49e22c='%1Event'['format'](_0xc2b998);_0x1b3cf0[_0x49e22c]&&VisuMZ[_0x21d052(0xa74)]['CheckMapBattleEventValid'](_0x1b3cf0[_0x49e22c])&&$gameTemp['reserveCommonEvent'](_0x1b3cf0[_0x49e22c]);},VisuMZ['BattleCore'][_0x46c6a8(0xc12)]=BattleManager['abort'],BattleManager[_0x46c6a8(0x79c)]=function(){const _0x5a82c0=_0x46c6a8;VisuMZ[_0x5a82c0(0xa74)][_0x5a82c0(0xc12)][_0x5a82c0(0x515)](this),SceneManager[_0x5a82c0(0x849)]()&&BattleManager[_0x5a82c0(0xc20)]();},VisuMZ[_0x46c6a8(0xa74)]['BattleManager_checkBattleEnd']=BattleManager[_0x46c6a8(0xac9)],BattleManager[_0x46c6a8(0xac9)]=function(){const _0x195e04=_0x46c6a8;if(this['_phase']===_0x195e04(0x5d4)){if($gameTemp[_0x195e04(0xa04)]())return![];}return VisuMZ['BattleCore'][_0x195e04(0x577)][_0x195e04(0x515)](this);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x816)]=BattleManager[_0x46c6a8(0x39c)],BattleManager[_0x46c6a8(0x39c)]=function(){const _0x2315a5=_0x46c6a8;this[_0x2315a5(0x179)]=!![],this[_0x2315a5(0x194)](_0x2315a5(0x672)),VisuMZ['BattleCore']['BattleManager_processVictory'][_0x2315a5(0x515)](this),this[_0x2315a5(0x108)](_0x2315a5(0x371));},VisuMZ['BattleCore'][_0x46c6a8(0x2d5)]=BattleManager[_0x46c6a8(0x1d6)],BattleManager[_0x46c6a8(0x1d6)]=function(){const _0x2a6915=_0x46c6a8;this[_0x2a6915(0x179)]=!![],VisuMZ[_0x2a6915(0xa74)][_0x2a6915(0x2d5)]['call'](this);},VisuMZ[_0x46c6a8(0xa74)]['BattleManager_processDefeat']=BattleManager['processDefeat'],BattleManager[_0x46c6a8(0x224)]=function(){const _0x1ef8f5=_0x46c6a8;this[_0x1ef8f5(0x179)]=!![],this[_0x1ef8f5(0x194)](_0x1ef8f5(0x3d2)),VisuMZ[_0x1ef8f5(0xa74)][_0x1ef8f5(0x1f6)]['call'](this),this[_0x1ef8f5(0x108)](_0x1ef8f5(0x689));},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x364)]=BattleManager[_0x46c6a8(0xbad)],BattleManager[_0x46c6a8(0xbad)]=function(_0x3a6e0b){const _0x1a5594=_0x46c6a8;this[_0x1a5594(0x9c8)]=!![],this[_0x1a5594(0x6d9)]=![],this[_0x1a5594(0x194)](_0x1a5594(0x422)),VisuMZ['BattleCore'][_0x1a5594(0x364)][_0x1a5594(0x515)](this,_0x3a6e0b),this[_0x1a5594(0x194)](_0x1a5594(0x206));},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xc5d)]=BattleManager[_0x46c6a8(0xbef)],BattleManager[_0x46c6a8(0xbef)]=function(){const _0x1f3b9c=_0x46c6a8;if(this[_0x1f3b9c(0x2ae)]())this[_0x1f3b9c(0x194)](_0x1f3b9c(0x5ed));VisuMZ[_0x1f3b9c(0xa74)][_0x1f3b9c(0xc5d)]['call'](this);if(this[_0x1f3b9c(0x2ae)]())this[_0x1f3b9c(0x194)](_0x1f3b9c(0x24f));},BattleManager[_0x46c6a8(0x196)]=function(){const _0x304dd7=_0x46c6a8,_0x2cd65b=this['_subject'],_0x23c942=_0x2cd65b[_0x304dd7(0x645)]();_0x23c942?(_0x23c942['prepare'](),_0x23c942[_0x304dd7(0x812)]()?(this[_0x304dd7(0x5a9)](),_0x2cd65b[_0x304dd7(0x738)]()):(_0x2cd65b[_0x304dd7(0x738)](),this[_0x304dd7(0x1c2)]())):(this['endAction'](),this[_0x304dd7(0x80d)]=null);},VisuMZ['BattleCore'][_0x46c6a8(0x9d4)]=BattleManager[_0x46c6a8(0x5a9)],BattleManager[_0x46c6a8(0x5a9)]=function(){const _0x5e21f4=_0x46c6a8,_0x212a6e=this['_subject']['currentAction'](),_0x576c9c=this[_0x5e21f4(0x80d)];_0x212a6e&&_0x212a6e[_0x5e21f4(0x1d5)]()===_0x576c9c&&_0x212a6e['actionBattleCoreJS']('PreStartActionJS'),VisuMZ[_0x5e21f4(0xa74)]['BattleManager_startAction'][_0x5e21f4(0x515)](this),_0x212a6e&&_0x212a6e['subject']()===_0x576c9c&&_0x212a6e[_0x5e21f4(0x62f)]('PostStartActionJS');},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x909)]=BattleManager[_0x46c6a8(0x1c2)],BattleManager[_0x46c6a8(0x1c2)]=function(){const _0x30217d=_0x46c6a8,_0x55a3d9=this[_0x30217d(0x996)],_0x1a5ee7=this[_0x30217d(0x80d)];_0x55a3d9&&_0x55a3d9!==this[_0x30217d(0x42e)]&&_0x55a3d9[_0x30217d(0x1d5)]()===_0x1a5ee7&&_0x55a3d9['actionBattleCoreJS']('PreEndActionJS'),this[_0x30217d(0x80d)]?VisuMZ['BattleCore']['BattleManager_endAction'][_0x30217d(0x515)](this):this[_0x30217d(0x54a)]=_0x30217d(0x5d4),_0x55a3d9&&_0x55a3d9!==this[_0x30217d(0x42e)]&&_0x55a3d9[_0x30217d(0x1d5)]()===_0x1a5ee7&&_0x55a3d9[_0x30217d(0x62f)](_0x30217d(0x5cc)),this[_0x30217d(0x443)](this[_0x30217d(0x808)]()),this['_lastAction']=this[_0x30217d(0x996)];},BattleManager[_0x46c6a8(0x443)]=function(_0x29b39e){const _0xcd5fa0=_0x46c6a8;for(const _0x54f53c of _0x29b39e){if(!_0x54f53c)continue;if(!_0x54f53c['battler']())continue;_0x54f53c[_0xcd5fa0(0x62d)]()['refreshMotion']();}},BattleManager['updateAction']=function(){const _0x2a1004=_0x46c6a8;!this[_0x2a1004(0x68b)][_0x2a1004(0x915)]()&&this[_0x2a1004(0x1c2)]();},Game_Battler['prototype'][_0x46c6a8(0x10b)]=function(){const _0x15fac8=_0x46c6a8;this[_0x15fac8(0x97f)]();if(Imported[_0x15fac8(0xabd)]){const _0x4132e1=VisuMZ[_0x15fac8(0x146)][_0x15fac8(0x154)][_0x15fac8(0x564)];_0x4132e1&&_0x4132e1[_0x15fac8(0x582)]===![]&&this[_0x15fac8(0xb36)](0x1);}else this[_0x15fac8(0xb36)](0x1);this[_0x15fac8(0x42d)]();},VisuMZ['BattleCore']['BattleManager_invokeCounterAttack']=BattleManager[_0x46c6a8(0x6c0)],BattleManager[_0x46c6a8(0x6c0)]=function(_0x59fae9,_0x13be98){const _0x4d0d39=_0x46c6a8;this[_0x4d0d39(0x6bd)]=!![],VisuMZ[_0x4d0d39(0xa74)][_0x4d0d39(0x64b)][_0x4d0d39(0x515)](this,_0x59fae9,_0x13be98),this['_bypassCanCounterCheck']=undefined;},BattleManager['makeEscapeRatio']=function(){const _0xd0cbd=_0x46c6a8;this['_escapeRatio']=VisuMZ[_0xd0cbd(0xa74)][_0xd0cbd(0x154)]['Mechanics'][_0xd0cbd(0xb53)][_0xd0cbd(0x515)](this);},VisuMZ['BattleCore'][_0x46c6a8(0xc6f)]=BattleManager['onEscapeSuccess'],BattleManager[_0x46c6a8(0x695)]=function(){const _0x514c23=_0x46c6a8;this['processBattleCoreJS'](_0x514c23(0x95c)),BattleManager[_0x514c23(0x81e)]['processEscape'](),VisuMZ[_0x514c23(0xa74)][_0x514c23(0xc6f)]['call'](this),this['processPostBattleCommonEvents'](_0x514c23(0x58c));},VisuMZ[_0x46c6a8(0xa74)]['BattleManager_onEscapeFailure']=BattleManager['onEscapeFailure'],BattleManager[_0x46c6a8(0x352)]=function(){const _0x491d1d=_0x46c6a8;this[_0x491d1d(0x194)](_0x491d1d(0x5c3));const _0x1ad4ad=this[_0x491d1d(0x6ca)];VisuMZ[_0x491d1d(0xa74)][_0x491d1d(0x124)]['call'](this),this[_0x491d1d(0x6ca)]=_0x1ad4ad+VisuMZ[_0x491d1d(0xa74)][_0x491d1d(0x154)][_0x491d1d(0x3f8)][_0x491d1d(0x2c9)][_0x491d1d(0x515)](this),this[_0x491d1d(0x760)]=![],this[_0x491d1d(0x108)](_0x491d1d(0x670));},BattleManager[_0x46c6a8(0x104)]=function(){const _0x5d41d5=_0x46c6a8;let _0x106eda=![];if(this[_0x5d41d5(0x58a)]())for(const _0x445b13 of $gameTroop[_0x5d41d5(0x623)]()){this[_0x5d41d5(0x68b)]['push'](_0x5d41d5(0x386),TextManager['emerge'][_0x5d41d5(0x1ba)](_0x445b13)),this[_0x5d41d5(0x68b)][_0x5d41d5(0x78c)](_0x5d41d5(0x71d)),_0x106eda=!![];}if(this[_0x5d41d5(0x88d)])this[_0x5d41d5(0x68b)]['push'](_0x5d41d5(0x386),TextManager[_0x5d41d5(0x8ea)]['format']($gameParty[_0x5d41d5(0x106)]())),this[_0x5d41d5(0x68b)][_0x5d41d5(0x78c)](_0x5d41d5(0x71d));else this['_surprise']&&(this[_0x5d41d5(0x68b)][_0x5d41d5(0x78c)](_0x5d41d5(0x386),TextManager[_0x5d41d5(0x205)][_0x5d41d5(0x1ba)]($gameParty['name']())),this[_0x5d41d5(0x68b)][_0x5d41d5(0x78c)]('wait'));_0x106eda&&(this[_0x5d41d5(0x68b)][_0x5d41d5(0x78c)](_0x5d41d5(0x71d)),this[_0x5d41d5(0x68b)][_0x5d41d5(0x78c)]('clear')),this[_0x5d41d5(0x57d)]()&&this['isSkipPartyCommandWindow']()&&(this['_tpbNeedsPartyCommand']=![]);},BattleManager[_0x46c6a8(0x58a)]=function(){const _0x466afc=_0x46c6a8;if(BattleManager['_autoBattle'])return![];return VisuMZ[_0x466afc(0xa74)][_0x466afc(0x154)][_0x466afc(0x6de)][_0x466afc(0x84c)];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x277)]=BattleManager[_0x46c6a8(0xbd9)],BattleManager[_0x46c6a8(0xbd9)]=function(){const _0x1bde71=_0x46c6a8;VisuMZ[_0x1bde71(0xa74)][_0x1bde71(0x277)][_0x1bde71(0x515)](this),this[_0x1bde71(0x49c)]()&&this['isSkipPartyCommandWindow']()&&!this[_0x1bde71(0xa29)]&&$gameParty[_0x1bde71(0x119)]()&&this[_0x1bde71(0x7d1)]();},BattleManager['isSkipPartyCommandWindow']=function(){const _0x47bdd1=_0x46c6a8;return VisuMZ[_0x47bdd1(0xa74)]['Settings'][_0x47bdd1(0x821)][_0x47bdd1(0x9d6)];},BattleManager[_0x46c6a8(0x8ec)]=function(){const _0x50fec3=_0x46c6a8;this['isPartyTpbInputtable']()&&this[_0x50fec3(0x7d1)]();},VisuMZ[_0x46c6a8(0xa74)]['Scene_Battle_startActorCommandSelection']=Scene_Battle[_0x46c6a8(0x669)]['startActorCommandSelection'],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x2d3)]=function(){const _0x16432c=_0x46c6a8;VisuMZ['BattleCore'][_0x16432c(0xa84)]['call'](this),BattleManager[_0x16432c(0x57d)]()&&BattleManager[_0x16432c(0x739)]&&(BattleManager[_0x16432c(0x739)]=![],this[_0x16432c(0x253)]());},BattleManager[_0x46c6a8(0xaad)]=function(_0x50d2b8,_0x3e77de,_0x440616){const _0x185371=_0x46c6a8;if(!_0x440616)return;if(!_0x50d2b8)return;if(!_0x3e77de)return;const _0x24ef21=this[_0x185371(0x996)];this[_0x185371(0x996)]=new Game_Action(_0x50d2b8);if(DataManager['isItem'](_0x440616))this[_0x185371(0x996)]['setItem'](_0x440616['id']);if(DataManager['isSkill'](_0x440616))this[_0x185371(0x996)][_0x185371(0xc3f)](_0x440616['id']);if(this[_0x185371(0x996)][_0x185371(0x6e9)]())BattleManager[_0x185371(0x5c0)](_0x50d2b8,_0x3e77de);this[_0x185371(0x996)]=_0x24ef21;},BattleManager[_0x46c6a8(0x212)]=function(_0x222c56,_0x21dee8){const _0x31a88a=_0x46c6a8;this[_0x31a88a(0x996)]['_reflectionTarget']=_0x21dee8,this['_logWindow'][_0x31a88a(0x451)](_0x21dee8),this[_0x31a88a(0x68b)]['displayReflectionPlayBack'](_0x222c56,this['_action']),this[_0x31a88a(0x996)][_0x31a88a(0x89e)](_0x222c56),this[_0x31a88a(0x68b)][_0x31a88a(0x3eb)](_0x222c56,_0x222c56);},VisuMZ[_0x46c6a8(0xa74)]['BattleManager_makeActionOrders']=BattleManager[_0x46c6a8(0x312)],BattleManager[_0x46c6a8(0x312)]=function(){const _0x28873d=_0x46c6a8;VisuMZ[_0x28873d(0xa74)][_0x28873d(0x322)][_0x28873d(0x515)](this),this[_0x28873d(0x2a1)]=this[_0x28873d(0x2a1)][_0x28873d(0x2ed)](_0x999c9c=>_0x999c9c&&_0x999c9c[_0x28873d(0x535)]());},VisuMZ['BattleCore'][_0x46c6a8(0xa15)]=BattleManager[_0x46c6a8(0x527)],BattleManager[_0x46c6a8(0x527)]=function(_0x27349a){const _0x2d6120=_0x46c6a8;if(this[_0x2d6120(0x54a)]==='custom')this[_0x2d6120(0x8df)]();else this[_0x2d6120(0x54a)]===_0x2d6120(0xb6c)?this[_0x2d6120(0xa77)]():VisuMZ[_0x2d6120(0xa74)][_0x2d6120(0xa15)][_0x2d6120(0x515)](this,_0x27349a);},BattleManager['prepareCustomActionSequence']=function(){const _0x4819cd=_0x46c6a8;this[_0x4819cd(0x1e8)]=this[_0x4819cd(0x4b4)]['slice'](0x0),this[_0x4819cd(0x80a)]=0x0,this[_0x4819cd(0x959)]=this[_0x4819cd(0x1e8)][0x0]||null,this['_phase']=_0x4819cd(0xc4b);},BattleManager['updateCustomActionSequence']=function(){const _0x507906=_0x46c6a8;!this[_0x507906(0xc1a)]()&&!this[_0x507906(0x68b)]['isBusy']()&&(this[_0x507906(0x54a)]=_0x507906(0x508));},BattleManager[_0x46c6a8(0xb6c)]=function(_0x394123){const _0x50dba2=_0x46c6a8;this[_0x50dba2(0x2a1)][_0x50dba2(0x45d)](_0x394123);if(_0x394123===this[_0x50dba2(0x80d)])return;const _0x873983=JsonEx[_0x50dba2(0x219)](_0x394123['currentAction']());this[_0x50dba2(0xb31)][_0x50dba2(0x78c)]([_0x394123,_0x873983]);},BattleManager['processForcedAction']=function(){},BattleManager[_0x46c6a8(0x964)]=function(){const _0xdbcdce=_0x46c6a8;if(this[_0xdbcdce(0x57d)]())this[_0xdbcdce(0x54a)]=_0xdbcdce(0x5d4);else this[_0xdbcdce(0xb31)][_0xdbcdce(0x50d)]>0x0?this['_phase']='turn':this['startInput']();},BattleManager[_0x46c6a8(0x4cb)]=function(){const _0x4637e5=_0x46c6a8,_0x4f122b=this[_0x4637e5(0x80d)];_0x4f122b&&this[_0x4637e5(0x57d)]()&&_0x4f122b[_0x4637e5(0x6ce)](_0x4637e5(0x8c1));for(;;){const _0x5cb023=this[_0x4637e5(0x94d)]();if(!_0x5cb023)return null;if(_0x5cb023['isBattleMember']()&&_0x5cb023[_0x4637e5(0x3d5)]())return _0x5cb023;}},BattleManager[_0x46c6a8(0x94d)]=function(){const _0x1640b2=_0x46c6a8;if(this[_0x1640b2(0xb31)]['length']>0x0){const _0x5e5f05=this[_0x1640b2(0xb31)]['shift'](),_0x206255=_0x5e5f05[0x0];return _0x206255[_0x1640b2(0x98f)]=_0x206255[_0x1640b2(0x98f)]||[],_0x206255[_0x1640b2(0x98f)][0x0]=_0x5e5f05[0x1],_0x206255;}else return this[_0x1640b2(0x2a1)]['shift']();},VisuMZ[_0x46c6a8(0xa74)]['Game_Battler_forceAction']=Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xb6c)],Game_Battler[_0x46c6a8(0x669)]['forceAction']=function(_0x5e70fc,_0x2723e9){const _0x3ea203=_0x46c6a8;VisuMZ['BattleCore']['Game_Battler_forceAction'][_0x3ea203(0x515)](this,_0x5e70fc,_0x2723e9),this[_0x3ea203(0x98f)][this[_0x3ea203(0x98f)][_0x3ea203(0x50d)]-0x1][_0x3ea203(0x703)]=!![];},Game_Interpreter['prototype']['command339']=function(_0x36cffe){const _0x92c972=_0x46c6a8;return this[_0x92c972(0x8aa)](_0x36cffe[0x0],_0x36cffe[0x1],_0x554437=>{const _0x422dc6=_0x92c972;!_0x554437[_0x422dc6(0x734)]()&&(_0x554437[_0x422dc6(0xb6c)](_0x36cffe[0x2],_0x36cffe[0x3]),BattleManager[_0x422dc6(0xb6c)](_0x554437));}),!![];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xbe8)]=Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x6e6)],Game_Battler[_0x46c6a8(0x669)]['makeSpeed']=function(){const _0x2b6950=_0x46c6a8;VisuMZ[_0x2b6950(0xa74)][_0x2b6950(0xbe8)][_0x2b6950(0x515)](this),this['_actions'][_0x2b6950(0x50d)]<=0x0&&(this['_speed']=Number[_0x2b6950(0xc36)]);},BattleManager[_0x46c6a8(0xad6)]=function(){const _0x278c74=_0x46c6a8;if(VisuMZ[_0x278c74(0xa74)][_0x278c74(0x154)][_0x278c74(0x1df)][_0x278c74(0x51d)]??!![])return![];return SceneManager['isSceneBattle']()&&this[_0x278c74(0x179)];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xa0a)]=BattleManager[_0x46c6a8(0x7d1)],BattleManager[_0x46c6a8(0x7d1)]=function(){const _0x2291a3=_0x46c6a8;this[_0x2291a3(0x57d)]()?this[_0x2291a3(0x12e)]():VisuMZ[_0x2291a3(0xa74)]['BattleManager_selectNextCommand'][_0x2291a3(0x515)](this);},BattleManager[_0x46c6a8(0x12e)]=function(){const _0x53dc94=_0x46c6a8;if(this[_0x53dc94(0x568)]){if(this[_0x53dc94(0x568)][_0x53dc94(0x7d1)]())return;this[_0x53dc94(0x962)](),this[_0x53dc94(0xaf3)](),!this[_0x53dc94(0x80d)]&&!this[_0x53dc94(0x568)]&&SceneManager[_0x53dc94(0x7a7)][_0x53dc94(0x694)]();}else!this[_0x53dc94(0x80d)]&&this[_0x53dc94(0x9de)]();},BattleManager['checkTpbInputClose']=function(){const _0x524845=_0x46c6a8;(!this[_0x524845(0x121)]()||this[_0x524845(0x531)]())&&(this[_0x524845(0x3ed)]&&(!$gameParty[_0x524845(0x198)]()['includes'](this[_0x524845(0x3ed)])&&(this['_tpbSceneChangeCacheActor']=null)),!this[_0x524845(0x3ed)]?(this[_0x524845(0x186)](),this[_0x524845(0x568)]=null,this[_0x524845(0x760)]=![]):this[_0x524845(0x84e)]());},BattleManager['revertTpbCachedActor']=function(){const _0x44d986=_0x46c6a8;!$gameParty[_0x44d986(0x198)]()[_0x44d986(0x4a3)](this[_0x44d986(0x3ed)])&&(this[_0x44d986(0x3ed)]=null),this[_0x44d986(0x3ed)]?(this[_0x44d986(0x568)]=this[_0x44d986(0x3ed)],this[_0x44d986(0x568)][_0x44d986(0x573)]='charged',this['_inputting']=!![],this['_tpbSceneChangeCacheActor']=null):(this[_0x44d986(0x186)](),this['_currentActor']=null,this['_inputting']=![]);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x6f7)]=BattleManager[_0x46c6a8(0x7a8)],BattleManager['isTpbMainPhase']=function(){const _0x1b34c7=_0x46c6a8;return this['_phase']===_0x1b34c7(0xc4b)?this[_0x1b34c7(0x901)]():VisuMZ[_0x1b34c7(0xa74)][_0x1b34c7(0x6f7)][_0x1b34c7(0x515)](this);},BattleManager[_0x46c6a8(0x901)]=function(){const _0x453494=_0x46c6a8;return this[_0x453494(0x93b)]();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x2bf)]=BattleManager[_0x46c6a8(0x186)],BattleManager[_0x46c6a8(0x186)]=function(){const _0x572741=_0x46c6a8;this[_0x572741(0x57d)]()&&this[_0x572741(0x54a)]==='battleEnd'&&(this[_0x572741(0x568)]=null),VisuMZ[_0x572741(0xa74)]['BattleManager_cancelActorInput'][_0x572741(0x515)](this);},VisuMZ[_0x46c6a8(0xa74)]['BattleManager_inputtingAction']=BattleManager[_0x46c6a8(0x819)],BattleManager[_0x46c6a8(0x819)]=function(){const _0x2e5b1f=_0x46c6a8,_0x38f13c=this[_0x2e5b1f(0x568)];if(_0x38f13c&&!_0x38f13c[_0x2e5b1f(0x819)]()){const _0x3a89fa=_0x38f13c[_0x2e5b1f(0x8cd)];_0x38f13c[_0x2e5b1f(0x98f)][_0x3a89fa]=new Game_Action(_0x38f13c);}return VisuMZ[_0x2e5b1f(0xa74)][_0x2e5b1f(0x181)][_0x2e5b1f(0x515)](this);},VisuMZ[_0x46c6a8(0xa74)]['BattleManager_checkSubstitute']=BattleManager[_0x46c6a8(0x2ab)],BattleManager[_0x46c6a8(0x2ab)]=function(_0xe28de5){const _0x5f1f96=_0x46c6a8;if(this[_0x5f1f96(0x996)][_0x5f1f96(0xa45)]())return![];return VisuMZ[_0x5f1f96(0xa74)]['BattleManager_checkSubstitute'][_0x5f1f96(0x515)](this,_0xe28de5);},SceneManager[_0x46c6a8(0x849)]=function(){const _0x2487ba=_0x46c6a8;return this['_scene']&&this['_scene'][_0x2487ba(0x2cf)]===Scene_Battle;},SceneManager['isBattleFlipped']=function(){const _0x3dbf49=_0x46c6a8;return Spriteset_Battle[_0x3dbf49(0x669)][_0x3dbf49(0xafc)]();},SceneManager[_0x46c6a8(0x529)]=function(){const _0xafe79c=_0x46c6a8;if(SceneManager[_0xafe79c(0x9a2)](Scene_Options))return!![];return![];},SceneManager[_0x46c6a8(0x6bb)]=function(){const _0x38113e=_0x46c6a8;if(SceneManager[_0x38113e(0x65c)](Scene_Options))return!![];return![];},SceneManager[_0x46c6a8(0x14b)]=function(_0x8f8b13){const _0x40511b=_0x46c6a8;if(!SceneManager[_0x40511b(0x849)]())return!![];const _0x3baf3b=[_0x40511b(0x562),'Scene_Party','Scene_QuickLoad'];return _0x3baf3b[_0x40511b(0x4a3)](_0x8f8b13[_0x40511b(0x106)]);},VisuMZ['BattleCore'][_0x46c6a8(0x488)]=SceneManager[_0x46c6a8(0x78c)],SceneManager[_0x46c6a8(0x78c)]=function(_0x1fdadd){const _0x47fb69=_0x46c6a8;if(!SceneManager[_0x47fb69(0x14b)](_0x1fdadd))return this[_0x47fb69(0x13c)](_0x1fdadd);VisuMZ[_0x47fb69(0xa74)]['SceneManager_push'][_0x47fb69(0x515)](this,_0x1fdadd);},SceneManager[_0x46c6a8(0x13c)]=function(_0x2b5b3e){const _0x40e7cd=_0x46c6a8;if(!$gameTemp[_0x40e7cd(0x7a4)]())return;if(this['_displayBattleCoreTransitionErrorMsg'])return;this[_0x40e7cd(0x7dc)]=!![];let _0x291455='';_0x291455+=_0x40e7cd(0x8db),_0x291455+=_0x40e7cd(0x2b7)[_0x40e7cd(0x1ba)](_0x2b5b3e['name']),alert(_0x291455);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x597)]=Game_Temp[_0x46c6a8(0x669)]['initialize'],Game_Temp[_0x46c6a8(0x669)][_0x46c6a8(0x82c)]=function(){const _0x53f094=_0x46c6a8;VisuMZ[_0x53f094(0xa74)][_0x53f094(0x597)][_0x53f094(0x515)](this),this['_battleBalloonQueue']=[];},VisuMZ['BattleCore'][_0x46c6a8(0x4d8)]=Game_Temp['prototype']['requestAnimation'],Game_Temp[_0x46c6a8(0x669)][_0x46c6a8(0x56e)]=function(_0x21f0fc,_0x6bf9ee,_0xb17af8){const _0x7b7f74=_0x46c6a8;_0x21f0fc[_0x7b7f74(0x45d)](null)['remove'](undefined),_0x21f0fc=_0x21f0fc[_0x7b7f74(0x2ed)]((_0x4d3f6b,_0x2ce65c,_0x3361c8)=>_0x3361c8[_0x7b7f74(0x3bd)](_0x4d3f6b)===_0x2ce65c);SceneManager['isSceneBattle']()&&SceneManager['isBattleFlipped']()&&(_0xb17af8=!_0xb17af8);VisuMZ[_0x7b7f74(0xa74)][_0x7b7f74(0x4d8)][_0x7b7f74(0x515)](this,_0x21f0fc,_0x6bf9ee,_0xb17af8);SceneManager[_0x7b7f74(0x849)]()&&BattleManager['_spriteset'][_0x7b7f74(0x74c)]();for(const _0x274dd1 of _0x21f0fc){_0x274dd1&&_0x274dd1['isEnemy']&&_0x274dd1['isEnemy']()&&_0x274dd1['resetNameTempVisibility']();}},Game_Temp[_0x46c6a8(0x669)]['setLastPluginCommandInterpreter']=function(_0x408fad){const _0x2171cc=_0x46c6a8;this[_0x2171cc(0x946)]=_0x408fad;},Game_Temp[_0x46c6a8(0x669)][_0x46c6a8(0xb5d)]=function(){const _0x177c3b=_0x46c6a8;return this[_0x177c3b(0x946)];},Game_Temp[_0x46c6a8(0x669)][_0x46c6a8(0x993)]=function(){this['_forcedBattleLayout']=undefined;},Game_Temp['prototype']['applyForcedGameTroopSettingsBattleCore']=function(_0x3e065b){const _0x624731=_0x46c6a8;$gameMap&&$dataMap&&$dataMap[_0x624731(0xb03)]&&this[_0x624731(0x215)]($dataMap['note']);const _0xb5f32c=$dataTroops[_0x3e065b];if(_0xb5f32c){let _0x204f0a=DataManager[_0x624731(0x93d)](_0xb5f32c['id']);this[_0x624731(0x215)](_0x204f0a);}},Game_Temp[_0x46c6a8(0x669)][_0x46c6a8(0x215)]=function(_0x41d19b){const _0x20f232=_0x46c6a8;if(!_0x41d19b)return;if(_0x41d19b[_0x20f232(0x712)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x28aaf3=String(RegExp['$1']);if(_0x28aaf3[_0x20f232(0x712)](/DEFAULT/i))this[_0x20f232(0x40a)]=_0x20f232(0x9bb);else{if(_0x28aaf3['match'](/LIST/i))this[_0x20f232(0x40a)]=_0x20f232(0x8b3);else{if(_0x28aaf3[_0x20f232(0x712)](/XP/i))this[_0x20f232(0x40a)]='xp';else{if(_0x28aaf3[_0x20f232(0x712)](/PORTRAIT/i))this[_0x20f232(0x40a)]='portrait';else{if(_0x28aaf3[_0x20f232(0x712)](/BORDER/i))this[_0x20f232(0x40a)]='border';else{if(_0x28aaf3[_0x20f232(0x712)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported['VisuMZ_3_SideviewBattleUI']?this[_0x20f232(0x40a)]=_0x20f232(0x56b):this[_0x20f232(0x40a)]=_0x20f232(0x9bb);else _0x28aaf3[_0x20f232(0x712)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported['VisuMZ_3_FrontviewBattleUI']?this[_0x20f232(0x40a)]=_0x20f232(0x2c7):this['_forcedBattleLayout']=_0x20f232(0x9bb));}}}}}}},VisuMZ[_0x46c6a8(0xa74)]['Game_Temp_requestBalloon']=Game_Temp['prototype'][_0x46c6a8(0xc52)],Game_Temp['prototype'][_0x46c6a8(0xc52)]=function(_0x372ab7,_0x98fdf7){const _0x1f024f=_0x46c6a8;SceneManager['isSceneBattle']()?this[_0x1f024f(0xa3c)](_0x372ab7,_0x98fdf7):VisuMZ['BattleCore'][_0x1f024f(0x69d)][_0x1f024f(0x515)](this,_0x372ab7,_0x98fdf7);},Game_Temp[_0x46c6a8(0x669)][_0x46c6a8(0xa3c)]=function(_0x5091da,_0x414292){const _0x57441d=_0x46c6a8,_0x45f154={'target':_0x5091da,'balloonId':_0x414292};this[_0x57441d(0x4d1)]=this[_0x57441d(0x4d1)]||[],this[_0x57441d(0x4d1)][_0x57441d(0x78c)](_0x45f154);},Game_Temp[_0x46c6a8(0x669)][_0x46c6a8(0x17c)]=function(){const _0x55653d=_0x46c6a8;return this[_0x55653d(0x4d1)]=this[_0x55653d(0x4d1)]||[],this[_0x55653d(0x4d1)][_0x55653d(0x897)]();},Game_Temp[_0x46c6a8(0x669)][_0x46c6a8(0x606)]=function(){this['_battleBalloonQueue']=[];},Spriteset_Battle['prototype'][_0x46c6a8(0x922)]=function(){const _0x532263=_0x46c6a8;this['_battleBalloonSprites']===undefined&&(this[_0x532263(0x131)]=[]);for(const _0x5aabef of this[_0x532263(0x131)]){!_0x5aabef[_0x532263(0x917)]()&&this['removeBattleBalloon'](_0x5aabef);}this[_0x532263(0x7af)]();},Spriteset_Battle['prototype'][_0x46c6a8(0x7af)]=function(){const _0xa9d301=_0x46c6a8;for(;;){const _0x4d7b7d=$gameTemp['retrieveBattleBalloon']();if(_0x4d7b7d)this[_0xa9d301(0xb1c)](_0x4d7b7d);else break;}},Spriteset_Battle[_0x46c6a8(0x669)]['createBattleBalloon']=function(_0x27627b){const _0x69fb5=_0x46c6a8,_0x147ec0=this['findTargetSprite'](_0x27627b[_0x69fb5(0xa60)]);if(_0x147ec0){let _0xa21d73=null;Imported[_0x69fb5(0x723)]&&Array['isArray'](_0x27627b[_0x69fb5(0x8d4)])?_0xa21d73=new Sprite_IconBalloon():_0xa21d73=new Sprite_Balloon(),_0xa21d73[_0x69fb5(0x52a)]=_0x27627b[_0x69fb5(0xa60)],_0xa21d73[_0x69fb5(0x959)]=_0x147ec0,_0xa21d73[_0x69fb5(0x959)][_0x69fb5(0x25a)]=_0x147ec0,_0xa21d73[_0x69fb5(0x208)](_0x147ec0,_0x27627b[_0x69fb5(0x8d4)]),BattleManager[_0x69fb5(0x393)](_0xa21d73),this['_battleBalloonSprites'][_0x69fb5(0x78c)](_0xa21d73);}},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x5e3)]=function(_0x360da1){const _0x31866a=_0x46c6a8;this[_0x31866a(0x131)][_0x31866a(0x45d)](_0x360da1),BattleManager['removeChildFromUiContainer'](_0x360da1),_0x360da1[_0x31866a(0x593)]();},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x936)]=function(_0x2c9d8d,_0x28fe16){},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x633)]=function(){return![];},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x19f)]=function(){const _0x51438c=_0x46c6a8;return this['_battleBalloonSprites']=this[_0x51438c(0x131)]||[],this[_0x51438c(0x131)][_0x51438c(0x50d)]>0x0;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x791)]=Game_System[_0x46c6a8(0x669)][_0x46c6a8(0x82c)],Game_System[_0x46c6a8(0x669)][_0x46c6a8(0x82c)]=function(){const _0x29a9c0=_0x46c6a8;VisuMZ[_0x29a9c0(0xa74)][_0x29a9c0(0x791)][_0x29a9c0(0x515)](this),this[_0x29a9c0(0xc2b)]();},Game_System['prototype'][_0x46c6a8(0xc2b)]=function(){const _0x35ba84=_0x46c6a8;this[_0x35ba84(0x450)]=this[_0x35ba84(0x450)]||[];},Game_System[_0x46c6a8(0x669)][_0x46c6a8(0x5b3)]=function(){const _0x35b09c=_0x46c6a8;if(this[_0x35b09c(0x450)]===undefined)this[_0x35b09c(0xc2b)]();return this['_defeatedEnemies'];},Game_System[_0x46c6a8(0x669)][_0x46c6a8(0x38b)]=function(_0x5d8390){const _0x2f6145=_0x46c6a8;if(this[_0x2f6145(0x450)]===undefined)this[_0x2f6145(0xc2b)]();if(!_0x5d8390)return;if(this[_0x2f6145(0x450)]['includes'](_0x5d8390))return;this[_0x2f6145(0x450)][_0x2f6145(0x78c)](_0x5d8390),this[_0x2f6145(0x450)]['sort']((_0x3d2f23,_0x298408)=>_0x3d2f23-_0x298408);},VisuMZ['BattleCore'][_0x46c6a8(0x898)]=Game_BattlerBase[_0x46c6a8(0x669)]['addNewState'],Game_BattlerBase[_0x46c6a8(0x669)]['addNewState']=function(_0x82210c){const _0x27adfc=_0x46c6a8,_0x247ebb=this[_0x27adfc(0x3d5)](),_0x8b8dd9=this[_0x27adfc(0x953)]();VisuMZ[_0x27adfc(0xa74)][_0x27adfc(0x898)][_0x27adfc(0x515)](this,_0x82210c),this[_0x27adfc(0x8de)]()&&_0x247ebb&&this[_0x27adfc(0xa10)]()&&(this['_visualHpGauge_JustDied']=!this[_0x27adfc(0x7e2)](),$gameSystem[_0x27adfc(0x38b)](this['enemyId']())),SceneManager[_0x27adfc(0x849)]()&&_0x8b8dd9!==this[_0x27adfc(0x953)]()&&(this[_0x27adfc(0x62d)]()&&this[_0x27adfc(0x62d)]()[_0x27adfc(0xa61)]());},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x7e2)]=function(){const _0xc5cc6e=_0x46c6a8;return $gameSystem[_0xc5cc6e(0x5b3)]()[_0xc5cc6e(0x4a3)](this['_enemyId']);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x470)]=Game_BattlerBase['prototype'][_0x46c6a8(0xb35)],Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0xb35)]=function(_0x2cb38d){const _0x3a7813=_0x46c6a8,_0x32640d=this['_states'][_0x3a7813(0x4a3)](_0x2cb38d),_0x425588=this['stateMotionIndex']();VisuMZ['BattleCore'][_0x3a7813(0x470)][_0x3a7813(0x515)](this,_0x2cb38d),this['isEnemy']()&&_0x2cb38d===this['deathStateId']()&&this['isAlive']()&&(this[_0x3a7813(0x7bb)]=![]),!this[_0x3a7813(0xc47)]&&!this[_0x3a7813(0x8d0)]&&SceneManager['isSceneBattle']()&&(_0x32640d&&!this[_0x3a7813(0x7a1)][_0x3a7813(0x4a3)](_0x2cb38d)&&this[_0x3a7813(0x64a)](),_0x425588!==this['stateMotionIndex']()&&(this['battler']()&&this[_0x3a7813(0x62d)]()[_0x3a7813(0xa61)]()));},VisuMZ[_0x46c6a8(0xa74)]['Game_Action_clear']=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x518)],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x518)]=function(){const _0x3267e6=_0x46c6a8;VisuMZ[_0x3267e6(0xa74)][_0x3267e6(0x503)][_0x3267e6(0x515)](this),this[_0x3267e6(0xa79)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x3267e6(0x842)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x3267e6(0x149)]=_0x3267e6(0x9bb),this[_0x3267e6(0x50c)]();},Game_Action[_0x46c6a8(0x669)]['clearTargetBattlerKey']=function(){const _0x259e0b=_0x46c6a8;this[_0x259e0b(0x7ab)]='';},VisuMZ['BattleCore'][_0x46c6a8(0x3d6)]=Game_Action[_0x46c6a8(0x669)]['setSubject'],Game_Action[_0x46c6a8(0x669)]['setSubject']=function(_0x32ace9){const _0x31f845=_0x46c6a8;VisuMZ[_0x31f845(0xa74)][_0x31f845(0x3d6)][_0x31f845(0x515)](this,_0x32ace9),this[_0x31f845(0x50c)]();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xc3d)]=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xc3f)],Game_Action[_0x46c6a8(0x669)]['setSkill']=function(_0x1778ce){const _0xd6f708=_0x46c6a8;VisuMZ[_0xd6f708(0xa74)]['Game_Action_setSkill'][_0xd6f708(0x515)](this,_0x1778ce),this['clearTargetBattlerKey']();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x11b)]=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x329)],Game_Action['prototype'][_0x46c6a8(0x329)]=function(_0x329fb3){const _0x40d976=_0x46c6a8;VisuMZ[_0x40d976(0xa74)][_0x40d976(0x11b)][_0x40d976(0x515)](this,_0x329fb3),this['clearTargetBattlerKey']();},Game_Action['prototype']['makeDamageValue']=function(_0x7dd760,_0x477daa){const _0x13f5a5=_0x46c6a8;return VisuMZ[_0x13f5a5(0xa74)][_0x13f5a5(0x154)][_0x13f5a5(0x1df)][_0x13f5a5(0x546)][_0x13f5a5(0x515)](this,_0x7dd760,_0x477daa);},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x200)]=function(_0x1b8ea4,_0x3b649c){const _0x5b64ab=_0x46c6a8;return VisuMZ[_0x5b64ab(0xa74)]['Settings']['Damage']['VarianceFormulaJS']['call'](this,_0x1b8ea4,_0x3b649c);},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x3e6)]=function(_0x539a00,_0x39f1f1){const _0x35c6c1=_0x46c6a8;return VisuMZ[_0x35c6c1(0xa74)][_0x35c6c1(0x154)]['Damage']['GuardFormulaJS'][_0x35c6c1(0x515)](this,_0x539a00,_0x39f1f1);},VisuMZ['BattleCore'][_0x46c6a8(0x1bc)]=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x64f)],Game_Action['prototype'][_0x46c6a8(0x64f)]=function(_0x575425){const _0x314fcc=_0x46c6a8,_0x4191f4=this[_0x314fcc(0x6e9)]()['note'];if(_0x4191f4[_0x314fcc(0x712)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x4191f4['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x4604f5=VisuMZ[_0x314fcc(0xa74)][_0x314fcc(0x1bc)][_0x314fcc(0x515)](this,_0x575425);return _0x4604f5=this[_0x314fcc(0x842)][_0x314fcc(0x195)]*_0x4604f5+this['_multipliers'][_0x314fcc(0xb83)],$gameParty[_0x314fcc(0x73e)]()&&(_0x4604f5=this[_0x314fcc(0x8b4)](_0x4604f5,_0x575425)),_0x4604f5;}}},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x8ac)]=Game_Action[_0x46c6a8(0x669)]['updateLastTarget'],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xc50)]=function(_0x1a16c5){const _0x8464b6=_0x46c6a8;this[_0x8464b6(0x8b9)]=!![],VisuMZ[_0x8464b6(0xa74)]['Game_Action_updateLastTarget'][_0x8464b6(0x515)](this,_0x1a16c5),this['_bypass_applyBattleCoreHitRateJS']=undefined;},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x444)]=function(_0x1cf8aa){const _0xf35f31=_0x46c6a8;window[_0xf35f31(0x508)]=this,window['a']=this[_0xf35f31(0x1d5)](),window['b']=_0x1cf8aa,window[_0xf35f31(0x89f)]=this['subject'](),window['target']=_0x1cf8aa,window[_0xf35f31(0x788)]=this[_0xf35f31(0x6e9)](),window['skill']=this['item'](),window[_0xf35f31(0x6e9)]=this[_0xf35f31(0x6e9)]();},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x997)]=function(_0x17c326){const _0x487a7f=_0x46c6a8;window[_0x487a7f(0x508)]=undefined,window['a']=undefined,window['b']=undefined,window[_0x487a7f(0x89f)]=undefined,window[_0x487a7f(0xa60)]=undefined,window[_0x487a7f(0x788)]=undefined,window['skill']=undefined,window[_0x487a7f(0x6e9)]=undefined;},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x8b4)]=function(_0x155bd0,_0x10ba04){const _0x3bb090=_0x46c6a8;if(this[_0x3bb090(0x8b9)])return _0x155bd0;this[_0x3bb090(0x444)](_0x10ba04),window[_0x3bb090(0x640)]=_0x155bd0;const _0xeadbf=VisuMZ[_0x3bb090(0xa74)][_0x3bb090(0x710)];if(this['item']()){if(this[_0x3bb090(0x6e9)]()[_0x3bb090(0xb03)][_0x3bb090(0x712)](_0xeadbf[_0x3bb090(0x2b3)])){const _0xe79d8a=String(RegExp['$1']);try{eval(_0xe79d8a);}catch(_0x5a32ff){if($gameTemp[_0x3bb090(0x7a4)]())console[_0x3bb090(0x221)](_0x5a32ff);}}}{const _0x226301=this[_0x3bb090(0x1d5)]()['traitObjects']();for(const _0xb3036d of _0x226301){if(!_0xb3036d)continue;if(_0xb3036d['note']['match'](_0xeadbf[_0x3bb090(0x85f)])){const _0x5995c1=String(RegExp['$1']);try{eval(_0x5995c1);}catch(_0xd74798){if($gameTemp[_0x3bb090(0x7a4)]())console['log'](_0xd74798);}}}}{const _0x217cec=_0x10ba04[_0x3bb090(0x5af)]();for(const _0x2d3be5 of _0x217cec){if(!_0x2d3be5)continue;if(_0x2d3be5[_0x3bb090(0xb03)][_0x3bb090(0x712)](_0xeadbf[_0x3bb090(0x324)])){const _0x43c502=String(RegExp['$1']);try{eval(_0x43c502);}catch(_0xadf8c2){if($gameTemp[_0x3bb090(0x7a4)]())console[_0x3bb090(0x221)](_0xadf8c2);}}}}return _0x155bd0=window['rate'],this[_0x3bb090(0x997)](_0x10ba04),_0x155bd0;},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xb1d)]=function(_0xe89e83){const _0xef962f=_0x46c6a8;if(!this['item']()[_0xef962f(0xaca)][_0xef962f(0x580)])return 0x0;let _0x2d1c37=VisuMZ[_0xef962f(0xa74)][_0xef962f(0x154)][_0xef962f(0x1df)][_0xef962f(0xab0)][_0xef962f(0x515)](this,_0xe89e83);return _0x2d1c37=this[_0xef962f(0x842)]['criticalHitRate']*_0x2d1c37+this[_0xef962f(0x842)][_0xef962f(0x2b4)],$gameParty['inBattle']()&&(_0x2d1c37=this[_0xef962f(0xc45)](_0x2d1c37,_0xe89e83)),_0x2d1c37;},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xc45)]=function(_0x501dbe,_0x27c177){const _0x22e1f1=_0x46c6a8;this['declareGlobalVariables'](_0x27c177),window['rate']=_0x501dbe;const _0x4ecd0d=VisuMZ[_0x22e1f1(0xa74)]['RegExp'];{const _0xedc37c=this[_0x22e1f1(0x1d5)]()[_0x22e1f1(0x5af)]();for(const _0x16c6b1 of _0xedc37c){if(!_0x16c6b1)continue;if(_0x16c6b1['note'][_0x22e1f1(0x712)](_0x4ecd0d[_0x22e1f1(0x987)])){const _0xb0a4b5=String(RegExp['$1']);try{eval(_0xb0a4b5);}catch(_0x28fd74){if($gameTemp[_0x22e1f1(0x7a4)]())console[_0x22e1f1(0x221)](_0x28fd74);}}}}{const _0x1c41f5=_0x27c177[_0x22e1f1(0x5af)]();for(const _0x52cc8d of _0x1c41f5){if(!_0x52cc8d)continue;if(_0x52cc8d[_0x22e1f1(0xb03)]['match'](_0x4ecd0d[_0x22e1f1(0x434)])){const _0x2af871=String(RegExp['$1']);try{eval(_0x2af871);}catch(_0x3ce145){if($gameTemp[_0x22e1f1(0x7a4)]())console['log'](_0x3ce145);}}}}return _0x501dbe=window[_0x22e1f1(0x640)],this['clearGlobalVariables'](_0x27c177),_0x501dbe;},Game_Action['prototype'][_0x46c6a8(0xc45)]=function(_0x284458,_0x169b59){const _0x242c9f=_0x46c6a8;this[_0x242c9f(0x444)](_0x169b59);for(const _0x1a12a6 of this[_0x242c9f(0x1d5)]()[_0x242c9f(0x5af)]()){if(!_0x1a12a6)continue;key=VisuMZ[_0x242c9f(0xa74)][_0x242c9f(0x916)](_0x1a12a6,_0x242c9f(0x987)),VisuMZ['BattleCore']['JS'][key]&&(_0x284458=VisuMZ[_0x242c9f(0xa74)]['JS'][key][_0x242c9f(0x515)](this,this[_0x242c9f(0x1d5)](),_0x169b59,this[_0x242c9f(0x6e9)](),_0x284458));}for(const _0x5a68a9 of _0x169b59[_0x242c9f(0x5af)]()){if(!_0x5a68a9)continue;key=VisuMZ['BattleCore'][_0x242c9f(0x916)](_0x5a68a9,_0x242c9f(0x434)),VisuMZ[_0x242c9f(0xa74)]['JS'][key]&&(_0x284458=VisuMZ['BattleCore']['JS'][key][_0x242c9f(0x515)](this,this[_0x242c9f(0x1d5)](),_0x169b59,this[_0x242c9f(0x6e9)](),_0x284458));}return this[_0x242c9f(0x997)](_0x169b59),_0x284458;},Game_Action['prototype'][_0x46c6a8(0xbbc)]=function(_0xa8c911){const _0x2b112c=_0x46c6a8;return _0xa8c911=VisuMZ[_0x2b112c(0xa74)][_0x2b112c(0x154)]['Damage'][_0x2b112c(0x15b)]['call'](this,_0xa8c911),_0xa8c911=this[_0x2b112c(0x842)][_0x2b112c(0x541)]*_0xa8c911+this[_0x2b112c(0x842)][_0x2b112c(0x54c)],_0xa8c911;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x652)]=Game_Action['prototype'][_0x46c6a8(0x25c)],Game_Action[_0x46c6a8(0x669)]['evalDamageFormula']=function(_0x1f26fe){const _0x3d6d2d=_0x46c6a8;if(this[_0x3d6d2d(0x149)]!=='default')return this[_0x3d6d2d(0x599)](_0x1f26fe);else return DataManager['getDamageStyle'](this[_0x3d6d2d(0x6e9)]())===_0x3d6d2d(0x151)?VisuMZ[_0x3d6d2d(0xa74)][_0x3d6d2d(0x652)][_0x3d6d2d(0x515)](this,_0x1f26fe):this[_0x3d6d2d(0x75a)](_0x1f26fe);},Game_Action[_0x46c6a8(0x669)]['setCustomDamageFormula']=function(_0x3519ec){const _0x476338=_0x46c6a8;this[_0x476338(0x149)]=_0x3519ec;},Game_Action['prototype']['customDamageFormula']=function(_0x4dc84d){const _0x130ccc=_0x46c6a8,_0x52491c=this['item'](),_0x4f57e7=_0x52491c['damage']['formula'];_0x52491c['damage']['formula']=this[_0x130ccc(0x149)];let _0x2fe00a=VisuMZ[_0x130ccc(0xa74)][_0x130ccc(0x652)]['call'](this,_0x4dc84d);return _0x52491c[_0x130ccc(0xaca)][_0x130ccc(0x123)]=_0x4f57e7,_0x2fe00a;},Game_Action['prototype'][_0x46c6a8(0xb9f)]=function(){const _0x15e306=_0x46c6a8;if(this[_0x15e306(0x6e9)]()[_0x15e306(0xb03)][_0x15e306(0x712)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x3be4c4=String(RegExp['$1'])[_0x15e306(0x85e)]()['trim']();return _0x3be4c4;}return _0x15e306(0x151);},Game_Action['prototype'][_0x46c6a8(0x75a)]=function(_0x2f58df){const _0x211571=_0x46c6a8,_0x5bb8bd=DataManager[_0x211571(0x704)](this[_0x211571(0x6e9)]()),_0x4ac22c=VisuMZ[_0x211571(0x5a3)][_0x5bb8bd];try{return _0x4ac22c[_0x211571(0x474)][_0x211571(0x515)](this,_0x2f58df);}catch(_0x4d965a){if($gameTemp[_0x211571(0x7a4)]())console[_0x211571(0x221)](_0x4d965a);return VisuMZ[_0x211571(0xa74)][_0x211571(0x652)][_0x211571(0x515)](this);}},Game_Action[_0x46c6a8(0x669)]['applyArmorModifiers']=function(_0x383dc7,_0x26cddc){const _0x58e8af=_0x46c6a8;if(this['isCertainHit']())return _0x26cddc;const _0x2dbce8=this['subject'](),_0x4fa431=_0x383dc7;let _0x4f6b95=[],_0x597038=[];_0x4f6b95[_0x58e8af(0x78c)](this[_0x58e8af(0xa79)]['arPenFlat'],this[_0x58e8af(0xa79)][_0x58e8af(0x700)]),_0x597038[_0x58e8af(0x78c)](this[_0x58e8af(0xa79)][_0x58e8af(0xc5a)],this[_0x58e8af(0xa79)][_0x58e8af(0x2e1)]);const _0x194ea2=this[_0x58e8af(0x2ef)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x57aec5=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x1840c7=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x3626af=this[_0x58e8af(0x2ef)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x4f6b95=_0x4f6b95[_0x58e8af(0x5ba)](_0x4fa431[_0x58e8af(0x5af)]()[_0x58e8af(0x883)](_0x4a142a=>_0x4a142a&&_0x4a142a['note'][_0x58e8af(0x712)](_0x194ea2)?Number(RegExp['$1']):0x0)),_0x597038=_0x597038[_0x58e8af(0x5ba)](_0x4fa431[_0x58e8af(0x5af)]()[_0x58e8af(0x883)](_0x205dec=>_0x205dec&&_0x205dec[_0x58e8af(0xb03)][_0x58e8af(0x712)](_0x57aec5)?Number(RegExp['$1'])/0x64:0x0)),_0x4f6b95=_0x4f6b95['concat'](_0x2dbce8[_0x58e8af(0x5af)]()['map'](_0x1e1d67=>_0x1e1d67&&_0x1e1d67[_0x58e8af(0xb03)][_0x58e8af(0x712)](_0x1840c7)?Number(RegExp['$1']):0x0)),_0x597038=_0x597038['concat'](_0x2dbce8[_0x58e8af(0x5af)]()[_0x58e8af(0x883)](_0x43ec74=>_0x43ec74&&_0x43ec74['note'][_0x58e8af(0x712)](_0x3626af)?Number(RegExp['$1'])/0x64:0x0)),this['item']()[_0x58e8af(0xb03)][_0x58e8af(0x712)](_0x1840c7)&&_0x4f6b95[_0x58e8af(0x78c)](Number(RegExp['$1'])),this[_0x58e8af(0x6e9)]()[_0x58e8af(0xb03)][_0x58e8af(0x712)](_0x3626af)&&_0x597038['push'](Number(RegExp['$1'])),_0x26cddc=_0x4f6b95[_0x58e8af(0xa37)]((_0x1ade14,_0x30bc1e)=>_0x1ade14-_0x30bc1e,_0x26cddc),_0x26cddc>0x0&&(_0x26cddc=_0x597038[_0x58e8af(0xa37)]((_0x1a8f29,_0x20b7be)=>_0x1a8f29*(0x1-_0x20b7be),_0x26cddc)),_0x26cddc;},VisuMZ[_0x46c6a8(0xa74)]['Game_Action_executeDamage']=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x8a3)],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x8a3)]=function(_0x10754f,_0x56c065){const _0x255550=_0x46c6a8;_0x56c065=_0x56c065*this['_multipliers']['damageRate'],_0x56c065+=this[_0x255550(0x842)][_0x255550(0x1d8)]*(_0x56c065>=0x0?0x1:-0x1),_0x56c065=this[_0x255550(0xaf9)](_0x255550(0xb1e),_0x10754f,_0x56c065,![]),_0x56c065=this[_0x255550(0x80c)](_0x56c065),_0x56c065>0x0?_0x56c065=Math['ceil'](_0x56c065):_0x56c065=Math[_0x255550(0x2f2)](_0x56c065),this[_0x255550(0x7b5)]=_0x56c065,this[_0x255550(0x5bb)]=this['_totalValue']||0x0,this[_0x255550(0x5bb)]+=_0x56c065,VisuMZ[_0x255550(0xa74)][_0x255550(0xb88)][_0x255550(0x515)](this,_0x10754f,_0x56c065),this[_0x255550(0xaf9)]('PostDamage%1JS',_0x10754f,_0x56c065,!![]);},Game_Action[_0x46c6a8(0x669)]['applyDamageCaps']=function(_0x32c9f8){const _0x3c7afc=_0x46c6a8;if(this[_0x3c7afc(0x668)]())return _0x32c9f8;return _0x32c9f8=this[_0x3c7afc(0x2c4)](_0x32c9f8),_0x32c9f8=this[_0x3c7afc(0x46b)](_0x32c9f8),_0x32c9f8;},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x668)]=function(){const _0x2b132d=_0x46c6a8,_0x3480cf=/<BYPASS DAMAGE CAP>/i;if(this['item']()['note'][_0x2b132d(0x712)](_0x3480cf))return!![];if(this[_0x2b132d(0x1d5)]()[_0x2b132d(0x5af)]()[_0x2b132d(0x4a4)](_0x2562e8=>_0x2562e8&&_0x2562e8[_0x2b132d(0xb03)][_0x2b132d(0x712)](_0x3480cf)))return!![];return!VisuMZ[_0x2b132d(0xa74)][_0x2b132d(0x154)]['Damage'][_0x2b132d(0xb79)];},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x2c4)]=function(_0x516d09){const _0x55b2a7=_0x46c6a8;if(!VisuMZ[_0x55b2a7(0xa74)][_0x55b2a7(0x154)]['Damage'][_0x55b2a7(0x931)])return _0x516d09;const _0x43d946=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()[_0x55b2a7(0xb03)][_0x55b2a7(0x712)](_0x43d946))return _0x516d09;if(this[_0x55b2a7(0x1d5)]()['traitObjects']()[_0x55b2a7(0x4a4)](_0x2309eb=>_0x2309eb&&_0x2309eb['note'][_0x55b2a7(0x712)](_0x43d946)))return _0x516d09;const _0x349eb2=_0x516d09<0x0?-0x1:0x1;_0x516d09=Math['abs'](_0x516d09);let _0x2b878b=this[_0x55b2a7(0x1d5)]()[_0x55b2a7(0x10f)]();this[_0x55b2a7(0x6e9)]()[_0x55b2a7(0xb03)]['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x2b878b+=Number(RegExp['$1'])/0x64);_0x2b878b=_0x2b878b[_0x55b2a7(0xbf6)](0.01,0x1);const _0x1c3a93=this[_0x55b2a7(0x9d2)](),_0x4ead25=_0x2b878b*_0x1c3a93;if(_0x516d09>_0x4ead25&&_0x1c3a93>_0x4ead25){_0x516d09-=_0x4ead25;const _0x559590=VisuMZ['BattleCore']['Settings']['Damage']['DefaultSoftScaler'],_0x100f2b=Math[_0x55b2a7(0x968)](0x1-_0x516d09/((_0x1c3a93-_0x4ead25)*_0x559590+_0x516d09),0.01);_0x516d09*=_0x100f2b,_0x516d09+=_0x4ead25;}return _0x516d09*_0x349eb2;},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x9d2)]=function(){const _0x3d04e9=_0x46c6a8;return this[_0x3d04e9(0x6e9)]()['note'][_0x3d04e9(0x712)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x3d04e9(0x1d5)]()[_0x3d04e9(0x60b)]();},Game_Action['prototype'][_0x46c6a8(0x46b)]=function(_0x5b4b2e){const _0x532d89=_0x46c6a8;let _0x3792a9=this[_0x532d89(0x9d2)]();return _0x5b4b2e[_0x532d89(0xbf6)](-_0x3792a9,_0x3792a9);},Game_Action[_0x46c6a8(0x669)]['shouldDisperseDamage']=function(){const _0x2e37e5=_0x46c6a8;if(!this['item']())return![];if(!$gameParty[_0x2e37e5(0x73e)]())return![];return(this[_0x2e37e5(0x6e9)]()[_0x2e37e5(0xb03)]||'')[_0x2e37e5(0x712)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x35f)]=function(_0x4310a9){const _0xc00f13=_0x46c6a8;if(this[_0xc00f13(0x686)]()){let _0x3f6b51=BattleManager[_0xc00f13(0x4b4)];_0x4310a9/=_0x3f6b51[_0xc00f13(0x50d)],this[_0xc00f13(0x3a9)]()&&(_0x4310a9*=this['subject']()['attackTimesAdd']()+0x1),_0x4310a9=_0x4310a9>0x0?Math[_0xc00f13(0x182)](_0x4310a9):Math[_0xc00f13(0x2f2)](_0x4310a9);}return _0x4310a9;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xb43)]=Game_Action['prototype']['makeDamageValue'],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x5be)]=function(_0x58a7db,_0x39be08){const _0xecfd23=_0x46c6a8;let _0x378e4e=VisuMZ[_0xecfd23(0xa74)][_0xecfd23(0xb43)][_0xecfd23(0x515)](this,_0x58a7db,_0x39be08);return this[_0xecfd23(0x35f)](_0x378e4e);},Game_Action[_0x46c6a8(0x669)]['itemEffectRecoverHp']=function(_0x2ed603,_0x503892){const _0x33a8b3=_0x46c6a8;let _0x43a727=(_0x2ed603[_0x33a8b3(0xba0)]*_0x503892[_0x33a8b3(0x55c)]+_0x503892[_0x33a8b3(0x584)])*_0x2ed603['rec'];_0x43a727=this[_0x33a8b3(0x35f)](_0x43a727),this[_0x33a8b3(0x994)]()&&(_0x43a727*=this[_0x33a8b3(0x1d5)]()['pha']),_0x43a727=Math['floor'](_0x43a727),_0x43a727!==0x0&&(_0x2ed603['gainHp'](_0x43a727),this['makeSuccess'](_0x2ed603));},Game_Action[_0x46c6a8(0x669)]['itemEffectRecoverMp']=function(_0x26d9e4,_0x1f3c89){const _0x5f0622=_0x46c6a8;let _0x563000=(_0x26d9e4[_0x5f0622(0xb10)]*_0x1f3c89[_0x5f0622(0x55c)]+_0x1f3c89[_0x5f0622(0x584)])*_0x26d9e4[_0x5f0622(0x2c0)];_0x563000=this[_0x5f0622(0x35f)](_0x563000),this['isItem']()&&(_0x563000*=this[_0x5f0622(0x1d5)]()[_0x5f0622(0x866)]),_0x563000=Math['floor'](_0x563000),_0x563000!==0x0&&(_0x26d9e4[_0x5f0622(0x985)](_0x563000),this['makeSuccess'](_0x26d9e4));},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x4c0)]=function(_0x4460fa,_0x59de9f){const _0x29bbc2=_0x46c6a8;let _0x5f13c8=Math['floor'](_0x59de9f[_0x29bbc2(0x55c)]);_0x5f13c8=this['disperseDamage'](_0x5f13c8),_0x5f13c8!==0x0&&(_0x4460fa[_0x29bbc2(0x1b1)](_0x5f13c8),this[_0x29bbc2(0x4ce)](_0x4460fa));},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x654)]=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x89e)],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x89e)]=function(_0x3575ad){const _0x476b0b=_0x46c6a8;if(_0x3575ad&&_0x3575ad['isEnemy']())_0x3575ad[_0x476b0b(0xb9d)]();this[_0x476b0b(0xaf9)](_0x476b0b(0x628),_0x3575ad,0x0,!![]),VisuMZ[_0x476b0b(0xa74)][_0x476b0b(0x654)][_0x476b0b(0x515)](this,_0x3575ad),this[_0x476b0b(0xaf9)](_0x476b0b(0x22a),_0x3575ad,this[_0x476b0b(0x7b5)]||0x0,!![]),this[_0x476b0b(0x8f7)](_0x3575ad);},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xaf9)]=function(_0x4926bf,_0x539251,_0x35926f,_0x2c0c38){const _0x41fe39=_0x46c6a8;if(this[_0x41fe39(0x8d0)]||this[_0x41fe39(0xc47)])return;_0x35926f=_0x35926f||0x0;const _0x5bf3f0=_0x35926f,_0x61bf83=VisuMZ[_0x41fe39(0xa74)][_0x41fe39(0x154)][_0x41fe39(0x3f8)],_0x2e9314=_0x4926bf[_0x41fe39(0x1ba)]('');if(_0x61bf83[_0x2e9314]){_0x35926f=_0x61bf83[_0x2e9314][_0x41fe39(0x515)](this,_0x35926f,_0x539251);if(_0x2c0c38)_0x35926f=_0x5bf3f0;}let _0x4174f6=VisuMZ[_0x41fe39(0xa74)]['createKeyJS'](this['item'](),_0x4926bf[_0x41fe39(0x1ba)](''));if(VisuMZ[_0x41fe39(0xa74)]['JS'][_0x4174f6]){_0x35926f=VisuMZ[_0x41fe39(0xa74)]['JS'][_0x4174f6][_0x41fe39(0x515)](this,this[_0x41fe39(0x1d5)](),_0x539251,this[_0x41fe39(0x6e9)](),_0x35926f);if(_0x2c0c38)_0x35926f=_0x5bf3f0;}for(const _0xaaddf7 of this[_0x41fe39(0x1d5)]()[_0x41fe39(0x5af)]()){if(!_0xaaddf7)continue;_0x4174f6=VisuMZ['BattleCore'][_0x41fe39(0x916)](_0xaaddf7,_0x4926bf['format']('AsUser'));if(VisuMZ[_0x41fe39(0xa74)]['JS'][_0x4174f6]){_0x35926f=VisuMZ['BattleCore']['JS'][_0x4174f6][_0x41fe39(0x515)](this,this['subject'](),_0x539251,_0xaaddf7,_0x35926f);if(_0x2c0c38)_0x35926f=_0x5bf3f0;}}for(const _0x415afa of _0x539251[_0x41fe39(0x5af)]()){if(!_0x415afa)continue;_0x4174f6=VisuMZ['BattleCore'][_0x41fe39(0x916)](_0x415afa,_0x4926bf[_0x41fe39(0x1ba)](_0x41fe39(0x291)));if(VisuMZ['BattleCore']['JS'][_0x4174f6]){_0x35926f=VisuMZ['BattleCore']['JS'][_0x4174f6][_0x41fe39(0x515)](this,this[_0x41fe39(0x1d5)](),_0x539251,_0x415afa,_0x35926f);if(_0x2c0c38)_0x35926f=_0x5bf3f0;}}return _0x35926f;},Game_Action['prototype'][_0x46c6a8(0x62f)]=function(_0x1d4fea){const _0x1d2cc1=_0x46c6a8,_0xc1c496=this[_0x1d2cc1(0x5bb)]||0x0,_0x465a54=VisuMZ['BattleCore']['Settings'][_0x1d2cc1(0x3f8)],_0x54757a=_0x1d4fea[_0x1d2cc1(0x1ba)]('');_0x465a54[_0x54757a]&&_0x465a54[_0x54757a][_0x1d2cc1(0x515)](this,_0xc1c496);let _0x2954c6=VisuMZ[_0x1d2cc1(0xa74)]['createKeyJS'](this[_0x1d2cc1(0x6e9)](),_0x1d4fea);VisuMZ['BattleCore']['JS'][_0x2954c6]&&VisuMZ[_0x1d2cc1(0xa74)]['JS'][_0x2954c6]['call'](this,this[_0x1d2cc1(0x1d5)](),this['subject'](),this[_0x1d2cc1(0x6e9)](),_0xc1c496);for(const _0xaa39c7 of this['subject']()[_0x1d2cc1(0x5af)]()){if(!_0xaa39c7)continue;_0x2954c6=VisuMZ[_0x1d2cc1(0xa74)]['createKeyJS'](_0xaa39c7,_0x1d4fea),VisuMZ[_0x1d2cc1(0xa74)]['JS'][_0x2954c6]&&VisuMZ['BattleCore']['JS'][_0x2954c6][_0x1d2cc1(0x515)](this,this['subject'](),this[_0x1d2cc1(0x1d5)](),_0xaa39c7,_0xc1c496);}},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x31d)]=function(){const _0x282a13=_0x46c6a8;return VisuMZ['BattleCore'][_0x282a13(0x154)]['Mechanics'][_0x282a13(0x632)][_0x282a13(0x515)](this);},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xae6)]=function(){const _0x348cb1=_0x46c6a8;return VisuMZ['BattleCore'][_0x348cb1(0x154)][_0x348cb1(0x3f8)]['AllowRandomSpeed'];},Game_Action[_0x46c6a8(0x669)]['isCustomBattleScope']=function(){const _0x1eebf7=_0x46c6a8;if(this['_targetBattlerKey']===_0x1eebf7(0x560))return![];if(this[_0x1eebf7(0x7ab)]==='all\x20enemies')return![];if(!this[_0x1eebf7(0x6e9)]())return![];return this['item']()[_0x1eebf7(0xb03)][_0x1eebf7(0x712)](/<JS TARGETS>/i);},Game_Action[_0x46c6a8(0x669)]['isBattleCoreTargetScope']=function(){const _0x595113=_0x46c6a8;if(this[_0x595113(0x7ab)]===_0x595113(0x560))return![];if(this[_0x595113(0x7ab)]===_0x595113(0x63d))return![];if(!this['_forcing']&&this[_0x595113(0x1d5)]()['isConfused']())return![];if(this['isCustomBattleScope']())return!![];if(!this[_0x595113(0x6e9)]())return![];return typeof this[_0x595113(0x6e9)]()['scope']==='string';},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x260)]=Game_Action['prototype']['isForOpponent'],Game_Action[_0x46c6a8(0x669)]['isForOpponent']=function(){const _0x5aaf41=_0x46c6a8;if(this[_0x5aaf41(0x7ab)]==='all\x20actors')return![];if(this[_0x5aaf41(0x7ab)]==='all\x20enemies')return!![];return this['isBattleCoreTargetScope']()&&!this[_0x5aaf41(0xa46)]()?this[_0x5aaf41(0x7de)]():VisuMZ[_0x5aaf41(0xa74)][_0x5aaf41(0x260)][_0x5aaf41(0x515)](this);},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x7de)]=function(){const _0x3d95f2=_0x46c6a8,_0x2264a1=String(this[_0x3d95f2(0x6e9)]()['scope']);if(_0x2264a1[_0x3d95f2(0x712)](/ANY/i))return!![];return _0x2264a1[_0x3d95f2(0x712)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x46c6a8(0xa74)]['Game_Action_isForFriend']=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xa45)],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xa45)]=function(){const _0x2c49c5=_0x46c6a8;if(this['_targetBattlerKey']==='all\x20actors')return!![];if(this[_0x2c49c5(0x7ab)]===_0x2c49c5(0x63d))return![];return this[_0x2c49c5(0x2f3)]()&&!this[_0x2c49c5(0xa46)]()?this[_0x2c49c5(0xa91)]():VisuMZ[_0x2c49c5(0xa74)][_0x2c49c5(0x2b9)][_0x2c49c5(0x515)](this);},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xa91)]=function(){const _0x701b8c=_0x46c6a8,_0x96db77=String(this[_0x701b8c(0x6e9)]()[_0x701b8c(0x476)]);return _0x96db77['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x9ae)]=function(){const _0x55fafc=_0x46c6a8;if(this[_0x55fafc(0x2f3)]()&&!this[_0x55fafc(0xa46)]()){const _0x563097=String(this[_0x55fafc(0x6e9)]()[_0x55fafc(0x476)]);return _0x563097['match'](/(?:ENEMY|FOE)/i)&&_0x563097[_0x55fafc(0x712)](/OR/i)&&_0x563097[_0x55fafc(0x712)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action['prototype'][_0x46c6a8(0x6a5)]=function(){const _0x2ee2e8=_0x46c6a8;if(this[_0x2ee2e8(0x9ae)]()){const _0x58436f=String(this[_0x2ee2e8(0x6e9)]()[_0x2ee2e8(0x476)]);if(_0x58436f[_0x2ee2e8(0x712)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xc34)]=function(){const _0x5ce066=_0x46c6a8;if(this[_0x5ce066(0x9ae)]()){const _0x581313=String(this[_0x5ce066(0x6e9)]()[_0x5ce066(0x476)]);if(_0x581313['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ['BattleCore'][_0x46c6a8(0x8cc)]=Game_Action['prototype'][_0x46c6a8(0x8fa)],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x8fa)]=function(){const _0x4a1eca=_0x46c6a8;if(this[_0x4a1eca(0x7ab)]===_0x4a1eca(0x560))return!![];return this[_0x4a1eca(0x2f3)]()&&!this['isCustomBattleScope']()?this[_0x4a1eca(0xa3b)]():VisuMZ[_0x4a1eca(0xa74)][_0x4a1eca(0x8cc)][_0x4a1eca(0x515)](this);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x1c6)]=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x839)],Game_Action['prototype']['isForDeadFriend']=function(){const _0x390edc=_0x46c6a8;if(this[_0x390edc(0x7ab)]===_0x390edc(0x560))return VisuMZ[_0x390edc(0xa74)][_0x390edc(0x1c6)][_0x390edc(0x515)](this);return VisuMZ[_0x390edc(0xa74)][_0x390edc(0x1c6)][_0x390edc(0x515)](this);},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xa3b)]=function(){if(this['isForAnyone']())return!![];return![];},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xb2b)]=function(){const _0x444ea8=_0x46c6a8;return this[_0x444ea8(0x6e9)]()&&this[_0x444ea8(0x6e9)]()[_0x444ea8(0xb03)][_0x444ea8(0x712)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x331)]=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x50e)],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x50e)]=function(){const _0x9158e8=_0x46c6a8;if(this['_targetBattlerKey']===_0x9158e8(0x560))return![];if(this[_0x9158e8(0x7ab)]==='all\x20enemies')return![];return this[_0x9158e8(0x2f3)]()&&!this[_0x9158e8(0xa46)]()?this[_0x9158e8(0x981)]():VisuMZ[_0x9158e8(0xa74)][_0x9158e8(0x331)][_0x9158e8(0x515)](this);},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x981)]=function(){if(this['isForAnyone']())return!![];return![];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xc29)]=Game_Action[_0x46c6a8(0x669)]['isForRandom'],Game_Action['prototype'][_0x46c6a8(0x2ba)]=function(){const _0x3e7d0e=_0x46c6a8;if(this['_targetBattlerKey']===_0x3e7d0e(0x560))return![];if(this[_0x3e7d0e(0x7ab)]===_0x3e7d0e(0x63d))return![];return this[_0x3e7d0e(0x2f3)]()&&!this[_0x3e7d0e(0xa46)]()?this[_0x3e7d0e(0xa0d)]():VisuMZ['BattleCore'][_0x3e7d0e(0xc29)][_0x3e7d0e(0x515)](this);},Game_Action[_0x46c6a8(0x669)]['isForRandomBattleCore']=function(){const _0x1c3b7f=_0x46c6a8,_0x22c21c=String(this[_0x1c3b7f(0x6e9)]()[_0x1c3b7f(0x476)]);return _0x22c21c[_0x1c3b7f(0x712)](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore'][_0x46c6a8(0x8e9)]=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x330)],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x330)]=function(){const _0x25cd68=_0x46c6a8;if(this[_0x25cd68(0x7ab)]===_0x25cd68(0x560))return!![];if(this[_0x25cd68(0x7ab)]===_0x25cd68(0x63d))return!![];return VisuMZ[_0x25cd68(0xa74)][_0x25cd68(0x8e9)][_0x25cd68(0x515)](this);},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x861)]=function(){const _0x1d567f=_0x46c6a8;if(!this[_0x1d567f(0x6e9)]())return![];if(this[_0x1d567f(0x839)]())return![];return(this[_0x1d567f(0x6e9)]()[_0x1d567f(0xb03)]||'')[_0x1d567f(0x712)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xbca)]=Game_Action[_0x46c6a8(0x669)]['testApply'],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x436)]=function(_0x4121cc){const _0x18927d=_0x46c6a8;if(this[_0x18927d(0xb2b)]()&&_0x4121cc===this[_0x18927d(0x1d5)]())return![];return VisuMZ['BattleCore'][_0x18927d(0xbca)][_0x18927d(0x515)](this,_0x4121cc);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x473)]=Game_Action['prototype'][_0x46c6a8(0x1a4)],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x1a4)]=function(){const _0x302b89=_0x46c6a8,_0x9d0315=VisuMZ['BattleCore']['Game_Action_itemTargetCandidates']['call'](this);if(this[_0x302b89(0xb2b)]())_0x9d0315[_0x302b89(0x45d)](this[_0x302b89(0x1d5)]());return _0x9d0315;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x696)]=Game_Action[_0x46c6a8(0x669)]['needsSelection'],Game_Action[_0x46c6a8(0x669)]['needsSelection']=function(){const _0x40bff0=_0x46c6a8;return this[_0x40bff0(0x2f3)]()&&!this[_0x40bff0(0xa46)]()?this['needsSelectionBattleCore']():VisuMZ['BattleCore'][_0x40bff0(0x696)][_0x40bff0(0x515)](this);},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xbf5)]=function(){const _0x131408=_0x46c6a8,_0x421f8d=String(this[_0x131408(0x6e9)]()['scope']);if(_0x421f8d[_0x131408(0x712)](/RANDOM/i))return![];if(_0x421f8d[_0x131408(0x712)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x421f8d[_0x131408(0x712)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x421f8d[_0x131408(0x712)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x421f8d[_0x131408(0x712)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x131408(0xa74)][_0x131408(0x696)]['call'](this);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xacd)]=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x94c)],Game_Action[_0x46c6a8(0x669)]['makeTargets']=function(){const _0x1361c5=_0x46c6a8;let _0xed97b4=[];return this[_0x1361c5(0x2f3)]()?this[_0x1361c5(0xa46)]()?_0xed97b4=this['makeTargetsBattleCoreJS']():_0xed97b4=this[_0x1361c5(0x678)]():_0xed97b4=VisuMZ[_0x1361c5(0xa74)]['Game_Action_makeTargets'][_0x1361c5(0x515)](this),_0xed97b4=this[_0x1361c5(0x4a1)](_0xed97b4),_0xed97b4;},Game_Action[_0x46c6a8(0x669)]['isSubjectValidForAnyoneSelect']=function(){const _0x231fc1=_0x46c6a8;return this[_0x231fc1(0x1d5)]()['isActor']()&&!this['subject']()[_0x231fc1(0x39b)]();},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x22e)]=function(){const _0x50df9a=_0x46c6a8,_0x7b1a7c=VisuMZ['BattleCore'][_0x50df9a(0x916)](this[_0x50df9a(0x6e9)](),_0x50df9a(0x6b5));if(VisuMZ[_0x50df9a(0xa74)]['JS'][_0x7b1a7c]){targets=VisuMZ[_0x50df9a(0xa74)][_0x50df9a(0xacd)][_0x50df9a(0x515)](this);const _0x62e03e=VisuMZ[_0x50df9a(0xa74)]['createKeyJS'](this['item'](),_0x50df9a(0x6b5));return targets=VisuMZ[_0x50df9a(0xa74)]['JS'][_0x62e03e]['call'](this,this[_0x50df9a(0x1d5)](),targets),this['repeatTargets'](targets);}return this['makeTargetsBattleCore']();},Game_Action[_0x46c6a8(0x669)]['makeTargetsBattleCore']=function(){const _0x4b1787=_0x46c6a8;let _0xc5a542=[];const _0x438917=String(this['item']()[_0x4b1787(0x476)]);if(this[_0x4b1787(0xc34)]())return this[_0x4b1787(0x74f)]()?(_0xc5a542=this[_0x4b1787(0x796)](),this['repeatTargets'](_0xc5a542)):(this[_0x4b1787(0x80a)]=-0x1,_0xc5a542[_0x4b1787(0x78c)](...this['targetsForOpponents']()),this['repeatTargets'](_0xc5a542));if(this[_0x4b1787(0x6a5)]()){if(this[_0x4b1787(0x74f)]())return _0xc5a542=this[_0x4b1787(0x796)](),this[_0x4b1787(0xc01)](_0xc5a542);else{if(Imported['VisuMZ_3_BattleAI']){if(VisuMZ['BattleAI'][_0x4b1787(0x9d7)]<1.19){let _0x2b6ea9='';_0x2b6ea9+=_0x4b1787(0x720),_0x2b6ea9+=_0x4b1787(0x68f),_0x2b6ea9+=_0x4b1787(0xb41),alert(_0x2b6ea9),SceneManager['exit']();}}return this[_0x4b1787(0x80a)]=-0x1,_0xc5a542['push'](...this[_0x4b1787(0x762)]()),this[_0x4b1787(0xc01)](_0xc5a542);}}if(_0x438917[_0x4b1787(0x712)](/(\d+) RANDOM ANY/i)){let _0x582b68=Number(RegExp['$1']);while(_0x582b68--){const _0x55f78e=Math[_0x4b1787(0xafb)](0x2)===0x0?this[_0x4b1787(0x19a)]():this[_0x4b1787(0x8a2)]();_0xc5a542['push'](_0x55f78e[_0x4b1787(0x828)]());}return this[_0x4b1787(0xc01)](_0xc5a542);}if(_0x438917[_0x4b1787(0x712)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x3a1a69=Number(RegExp['$1']);while(_0x3a1a69--){_0xc5a542[_0x4b1787(0x78c)](this['opponentsUnit']()[_0x4b1787(0x828)]());}return this[_0x4b1787(0xc01)](_0xc5a542);}if(_0x438917[_0x4b1787(0x712)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x40a2d4=Number(RegExp['$1']);while(_0x40a2d4--){_0xc5a542[_0x4b1787(0x78c)](this[_0x4b1787(0x8a2)]()[_0x4b1787(0x828)]());}return this[_0x4b1787(0xc01)](_0xc5a542);}if(_0x438917[_0x4b1787(0x712)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0xc5a542[_0x4b1787(0x78c)](...this[_0x4b1787(0x8a2)]()[_0x4b1787(0xa1f)]()[_0x4b1787(0x2ed)](_0x677b8b=>_0x677b8b!==this[_0x4b1787(0x1d5)]())),this[_0x4b1787(0xc01)](_0xc5a542);return VisuMZ[_0x4b1787(0xa74)][_0x4b1787(0xacd)][_0x4b1787(0x515)](this);},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x76d)]=function(_0x5f205b){const _0x2c03db=_0x46c6a8,_0x5acdb1=[];for(let _0x1a0db6=0x0;_0x1a0db6<this[_0x2c03db(0x6cc)]();_0x1a0db6++){_0x5acdb1[_0x2c03db(0x78c)](_0x5f205b[_0x2c03db(0x828)]());}return _0x5acdb1;},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x4a1)]=function(_0x1c826c){const _0xbd9ced=_0x46c6a8;if(!this[_0xbd9ced(0x6e9)]())return _0x1c826c;const _0x339eee=this['item']()[_0xbd9ced(0xb03)];if(this[_0xbd9ced(0xb2b)]()){this['isForAll']()&&_0x1c826c[_0xbd9ced(0x45d)](this[_0xbd9ced(0x1d5)]());if(_0x1c826c[_0xbd9ced(0x4a3)](this[_0xbd9ced(0x1d5)]())){const _0x4722a0=this[_0xbd9ced(0x8a2)]()['aliveMembers']()[_0xbd9ced(0x45d)](this[_0xbd9ced(0x1d5)]());if(_0x4722a0[_0xbd9ced(0x50d)]>0x0){_0x4722a0[_0xbd9ced(0x2fe)]((_0xa46d33,_0x54ae1f)=>_0xa46d33[_0xbd9ced(0x1f7)]()-_0x54ae1f[_0xbd9ced(0x1f7)]());while(_0x1c826c[_0xbd9ced(0x4a3)](this['subject']())){const _0x3a05d4=_0x1c826c[_0xbd9ced(0x3bd)](this['subject']());_0x1c826c[_0x3a05d4]=_0x4722a0[Math[_0xbd9ced(0xafb)](_0x4722a0[_0xbd9ced(0x50d)])];}}else _0x1c826c[_0xbd9ced(0x45d)](this[_0xbd9ced(0x1d5)]());}}return _0x1c826c;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x109)]=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x578)],Game_Action['prototype'][_0x46c6a8(0x578)]=function(_0x1f40b7,_0x53630d){const _0x550112=_0x46c6a8;VisuMZ['BattleCore']['Game_Action_itemEffectAddAttackState']['call'](this,_0x1f40b7,_0x53630d);if(!_0x1f40b7[_0x550112(0x592)]())return;for(const _0x229c14 of this[_0x550112(0x1d5)]()[_0x550112(0xb9e)]()){if(_0x229c14===_0x1f40b7[_0x550112(0x348)]()){let _0x5128b8=_0x53630d[_0x550112(0x55c)];_0x5128b8*=_0x1f40b7[_0x550112(0x6d6)](_0x229c14),_0x5128b8*=this[_0x550112(0x1d5)]()[_0x550112(0xbd7)](_0x229c14),_0x5128b8*=this['lukEffectRate'](_0x1f40b7),Math[_0x550112(0x758)]()<_0x5128b8&&(_0x1f40b7[_0x550112(0xc5b)]=!![],this['makeSuccess'](_0x1f40b7));}}},VisuMZ[_0x46c6a8(0xa74)]['Game_Action_itemEffectAddNormalState']=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x6c7)],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x6c7)]=function(_0x510304,_0x2279d9){const _0xea5535=_0x46c6a8;VisuMZ['BattleCore'][_0xea5535(0x354)][_0xea5535(0x515)](this,_0x510304,_0x2279d9);if(!_0x510304[_0xea5535(0x592)]())return;if(_0x2279d9[_0xea5535(0x1a8)]!==_0x510304['deathStateId']())return;let _0x1dce83=_0x2279d9[_0xea5535(0x55c)];!this[_0xea5535(0x8b1)]()&&(_0x1dce83*=_0x510304[_0xea5535(0x6d6)](_0x2279d9[_0xea5535(0x1a8)]),_0x1dce83*=this[_0xea5535(0x53b)](_0x510304)),Math[_0xea5535(0x758)]()<_0x1dce83&&(_0x510304[_0xea5535(0xc5b)]=!![],this['makeSuccess'](_0x510304));},VisuMZ['BattleCore']['Game_Action_applyGlobal']=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x4b5)],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x4b5)]=function(){const _0x194857=_0x46c6a8;VisuMZ['BattleCore']['Game_Action_applyGlobal'][_0x194857(0x515)](this),this[_0x194857(0xb4d)](),this[_0x194857(0x501)]();},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xb4d)]=function(){const _0x1b7f61=_0x46c6a8;if(!SceneManager[_0x1b7f61(0x849)]())return;const _0x26fec0=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x12112a=this[_0x1b7f61(0x6e9)]()[_0x1b7f61(0xb03)]['match'](_0x26fec0);if(_0x12112a)for(const _0x58a3fe of _0x12112a){if(!_0x58a3fe)continue;_0x58a3fe[_0x1b7f61(0x712)](_0x26fec0);const _0x572d6d=String(RegExp['$1'])[_0x1b7f61(0x7cb)](',')[_0x1b7f61(0x883)](_0x3b3edf=>String(_0x3b3edf)['trim']()),_0x276409=_0x572d6d[_0x1b7f61(0x883)](_0x3a7c97=>DataManager[_0x1b7f61(0xbe1)](_0x3a7c97));for(const _0x2118fb of _0x276409){const _0x4edf0c=$dataCommonEvents[_0x2118fb];_0x4edf0c&&$gameTemp['reserveCommonEvent'](_0x2118fb);}}},DataManager[_0x46c6a8(0xbe1)]=function(_0x4d53c6){const _0x3caa1b=_0x46c6a8;_0x4d53c6=_0x4d53c6[_0x3caa1b(0x85e)]()['trim'](),this['_commonEventIDs']=this[_0x3caa1b(0x140)]||{};if(this[_0x3caa1b(0x140)][_0x4d53c6])return this[_0x3caa1b(0x140)][_0x4d53c6];for(const _0x5d6796 of $dataCommonEvents){if(!_0x5d6796)continue;let _0x5cb9fc=_0x5d6796[_0x3caa1b(0x106)];_0x5cb9fc=_0x5cb9fc[_0x3caa1b(0xa75)](/\x1I\[(\d+)\]/gi,''),_0x5cb9fc=_0x5cb9fc[_0x3caa1b(0xa75)](/\\I\[(\d+)\]/gi,''),this[_0x3caa1b(0x140)][_0x5cb9fc[_0x3caa1b(0x85e)]()[_0x3caa1b(0xa28)]()]=_0x5d6796['id'];}return this['_commonEventIDs'][_0x4d53c6]||0x0;},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x501)]=function(){const _0x43e847=_0x46c6a8;if(!SceneManager[_0x43e847(0x849)]())return;const _0x145755=VisuMZ[_0x43e847(0xa74)][_0x43e847(0x154)]['Mechanics'];_0x145755[_0x43e847(0x1fa)]&&$gameSwitches[_0x43e847(0x67a)](_0x145755[_0x43e847(0x1fa)],![]),_0x145755[_0x43e847(0xc18)]&&$gameSwitches[_0x43e847(0x67a)](_0x145755[_0x43e847(0xc18)],![]),_0x145755['VariableDmg']&&$gameVariables['setValue'](_0x145755[_0x43e847(0x928)],0x0),_0x145755[_0x43e847(0x68c)]&&$gameVariables['setValue'](_0x145755[_0x43e847(0x68c)],0x0);},Game_Action['prototype'][_0x46c6a8(0x8f7)]=function(_0x596534){const _0x7163c=_0x46c6a8;if(!SceneManager[_0x7163c(0x849)]())return;if(!_0x596534)return;const _0x19f8b6=_0x596534[_0x7163c(0x600)](),_0x1584e2=VisuMZ[_0x7163c(0xa74)][_0x7163c(0x154)][_0x7163c(0x3f8)];_0x1584e2[_0x7163c(0x1fa)]&&_0x19f8b6[_0x7163c(0x580)]&&$gameSwitches['setValue'](_0x1584e2['SwitchCritical'],!![]);_0x1584e2[_0x7163c(0xc18)]&&(_0x19f8b6[_0x7163c(0x54d)]||_0x19f8b6[_0x7163c(0x97e)])&&$gameSwitches[_0x7163c(0x67a)](_0x1584e2['SwitchMissEvade'],!![]);if(_0x1584e2['VariableDmg']){let _0x4fdf18=$gameVariables[_0x7163c(0x6ea)](_0x1584e2[_0x7163c(0x928)]);_0x19f8b6['hpDamage']>0x0&&(_0x4fdf18+=Math[_0x7163c(0xc59)](_0x19f8b6['hpDamage'])),$gameVariables[_0x7163c(0x67a)](_0x1584e2['VariableDmg'],_0x4fdf18);}if(_0x1584e2[_0x7163c(0x68c)]){let _0x27e486=$gameVariables[_0x7163c(0x6ea)](_0x1584e2['VariableHeal']);_0x19f8b6[_0x7163c(0x820)]<0x0&&(_0x27e486+=Math['abs'](_0x19f8b6['hpDamage'])),$gameVariables['setValue'](_0x1584e2['VariableHeal'],_0x27e486);}},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x903)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ['BattleCore']['Game_Action_executeHpDamage']=Game_Action[_0x46c6a8(0x669)]['executeHpDamage'],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x680)]=function(_0x11134e,_0x56652e){const _0x3abc7d=_0x46c6a8;VisuMZ[_0x3abc7d(0xa74)][_0x3abc7d(0xba4)][_0x3abc7d(0x515)](this,_0x11134e,_0x56652e);!this[_0x3abc7d(0x45e)]()&&_0x11134e&&_0x11134e['result']()[_0x3abc7d(0x820)]>0x0&&this['performLifeSteal']('HP',_0x11134e,_0x11134e['result']()[_0x3abc7d(0x820)]);if(_0x11134e){this[_0x3abc7d(0x976)]=this[_0x3abc7d(0x976)]||{};const _0x5baf01=_0x11134e['battlerKey']();this['_executeHpDamage'][_0x5baf01]=_0x56652e;}},Game_Action['prototype'][_0x46c6a8(0xbcd)]=function(_0x8ee789){const _0x1cb34e=_0x46c6a8;this[_0x1cb34e(0x976)]=this[_0x1cb34e(0x976)]||{};const _0x2aa3d3=_0x8ee789[_0x1cb34e(0xb12)]();return this['_executeHpDamage'][_0x2aa3d3]||0x0;},VisuMZ['BattleCore'][_0x46c6a8(0x9bf)]=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x232)],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x232)]=function(_0x144282,_0x30bf36){const _0x58ddcf=_0x46c6a8;VisuMZ[_0x58ddcf(0xa74)]['Game_Action_executeMpDamage'][_0x58ddcf(0x515)](this,_0x144282,_0x30bf36),!this['isDrain']()&&_0x144282&&_0x144282[_0x58ddcf(0x600)]()[_0x58ddcf(0x36e)]>0x0&&this[_0x58ddcf(0x859)]('MP',_0x144282,_0x144282['result']()['mpDamage']);},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x859)]=function(_0x4b306c,_0x39c410,_0x25dcba){const _0x32a904=_0x46c6a8;_0x4b306c=_0x4b306c[_0x32a904(0x85e)]()[_0x32a904(0xa28)]();const _0x1d103e=this[_0x32a904(0xac4)](_0x4b306c,_0x39c410);if(_0x1d103e<=0x0)return;const _0x2fe931=Math[_0x32a904(0xa5e)](_0x25dcba*_0x1d103e);if(_0x2fe931<=0x0)return;let _0x2479c5=this[_0x32a904(0x1d5)]();if(this[_0x32a904(0x15e)])_0x2479c5=this['_reflectionTarget'];const _0x165066=_0x39c410[_0x32a904(0x9cf)](_0x4b306c)?-0x1:0x1;if(_0x4b306c==='HP')_0x2479c5[_0x32a904(0x7d9)](_0x165066*_0x2fe931);if(_0x4b306c==='MP')_0x2479c5[_0x32a904(0x985)](_0x165066*_0x2fe931);},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xac4)]=function(_0x2a1b5,_0x4594c1){const _0x1e934e=_0x46c6a8;if(this['isCancelLifeSteal'](_0x2a1b5))return 0x0;if(this[_0x1e934e(0x1d5)]()[_0x1e934e(0x526)](_0x2a1b5))return 0x0;if(_0x4594c1[_0x1e934e(0x571)](_0x2a1b5))return 0x0;let _0xb9dc6f=0x0;return _0xb9dc6f+=this[_0x1e934e(0x885)](_0x2a1b5),_0xb9dc6f+=this[_0x1e934e(0x1d5)]()[_0x1e934e(0xac4)](_0x2a1b5,this[_0x1e934e(0x6e9)]()[_0x1e934e(0xc13)]),_0xb9dc6f['clamp'](0x0,0x1);},Game_Action['prototype']['isCancelLifeSteal']=function(_0x364da4){const _0x31e40b=_0x46c6a8;_0x364da4=_0x364da4[_0x31e40b(0x85e)]()[_0x31e40b(0xa28)]();const _0x4733c4=VisuMZ[_0x31e40b(0xa74)][_0x31e40b(0x903)],_0x21c978=this[_0x31e40b(0x6e9)]()[_0x31e40b(0xb03)]||'';if(_0x21c978[_0x31e40b(0x712)](_0x4733c4[_0x31e40b(0x243)]))return!![];if(_0x364da4==='HP'&&_0x21c978[_0x31e40b(0x712)](_0x4733c4[_0x31e40b(0x475)]))return!![];if(_0x364da4==='MP'&&_0x21c978[_0x31e40b(0x712)](_0x4733c4[_0x31e40b(0x6ed)]))return!![];return![];},Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x885)]=function(_0x214099){const _0x1094df=_0x46c6a8,_0xace768=VisuMZ[_0x1094df(0xa74)]['LifeStealRegExp'],_0x47b840=this['item']()['note']||'';_0x214099=_0x214099[_0x1094df(0x85e)]()[_0x1094df(0xa28)]();const _0x5cb21c=_0x47b840[_0x1094df(0x712)](_0xace768[_0x1094df(0x441)]);if(_0x5cb21c)for(const _0x3eca93 of _0x5cb21c){_0x3eca93[_0x1094df(0x712)](_0xace768[_0x1094df(0x441)]);const _0x1f4101=String(RegExp['$1'])[_0x1094df(0x85e)]()[_0x1094df(0xa28)](),_0x4dac0d=Number(RegExp['$2'])*0.01;if(_0x1f4101!==_0x214099)continue;return _0x4dac0d;}return 0x0;},Game_BattlerBase[_0x46c6a8(0x669)]['lifeStealRate']=function(_0x48dfdd,_0x49579f){const _0x58bccb=_0x46c6a8,_0x2911e7=VisuMZ['BattleCore'][_0x58bccb(0x903)];let _0xebc32a=0x0;_0x48dfdd=_0x48dfdd['toUpperCase']()[_0x58bccb(0xa28)]();for(const _0x5d0c24 of this[_0x58bccb(0x5af)]()){if(!_0x5d0c24)continue;const _0x3bcff5=_0x5d0c24['note']||'',_0x4250b7=_0x3bcff5[_0x58bccb(0x712)](_0x2911e7[_0x58bccb(0x464)]);if(_0x4250b7)for(const _0x4360c0 of _0x4250b7){_0x4360c0[_0x58bccb(0x712)](_0x2911e7[_0x58bccb(0x464)]);const _0x6a19a0=String(RegExp['$1'])[_0x58bccb(0x85e)]()[_0x58bccb(0xa28)](),_0x331b5a=String(RegExp['$2']),_0x2f9bf3=Number(RegExp['$3'])*0.01;if(_0x6a19a0!==_0x48dfdd)continue;if(_0x49579f===Game_Action[_0x58bccb(0xc67)]&&_0x331b5a[_0x58bccb(0x712)](/CERTAIN/i))_0xebc32a+=_0x2f9bf3;else{if(_0x49579f===Game_Action[_0x58bccb(0x3c6)]&&_0x331b5a[_0x58bccb(0x712)](/PHYS/i))_0xebc32a+=_0x2f9bf3;else _0x49579f===Game_Action[_0x58bccb(0x44d)]&&_0x331b5a['match'](/MAGIC/i)&&(_0xebc32a+=_0x2f9bf3);}}}return _0xebc32a;},Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x526)]=function(_0xb4cb4b){const _0x1278ec=_0x46c6a8;_0xb4cb4b=_0xb4cb4b[_0x1278ec(0x85e)]()['trim']();const _0x295451=VisuMZ[_0x1278ec(0xa74)][_0x1278ec(0x903)];for(const _0x41a382 of this[_0x1278ec(0x5af)]()){if(!_0x41a382)continue;const _0x340bab=_0x41a382[_0x1278ec(0xb03)]||'';if(_0x340bab[_0x1278ec(0x712)](_0x295451[_0x1278ec(0x81f)]))return!![];if(_0xb4cb4b==='HP'&&_0x340bab[_0x1278ec(0x712)](_0x295451['disarmHpLifeSteal']))return!![];if(_0xb4cb4b==='MP'&&_0x340bab[_0x1278ec(0x712)](_0x295451[_0x1278ec(0x813)]))return!![];}return![];},Game_BattlerBase['prototype'][_0x46c6a8(0x9cf)]=function(_0x4180bf){const _0x4ce79b=_0x46c6a8;_0x4180bf=_0x4180bf[_0x4ce79b(0x85e)]()['trim']();const _0x11b2e5=VisuMZ[_0x4ce79b(0xa74)][_0x4ce79b(0x903)];for(const _0xadf7 of this[_0x4ce79b(0x5af)]()){if(!_0xadf7)continue;const _0x1e20bb=_0xadf7[_0x4ce79b(0xb03)]||'';if(_0x1e20bb[_0x4ce79b(0x712)](_0x11b2e5[_0x4ce79b(0xa56)]))return!![];if(_0x4180bf==='HP'&&_0x1e20bb[_0x4ce79b(0x712)](_0x11b2e5['negativeHpLifeSteal']))return!![];if(_0x4180bf==='MP'&&_0x1e20bb[_0x4ce79b(0x712)](_0x11b2e5['negativeMpLifeSteal']))return!![];}return![];},Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x571)]=function(_0x13720c){const _0x562254=_0x46c6a8;_0x13720c=_0x13720c[_0x562254(0x85e)]()['trim']();const _0x30c53c=VisuMZ['BattleCore'][_0x562254(0x903)];for(const _0x48fe96 of this['traitObjects']()){if(!_0x48fe96)continue;const _0x13aa06=_0x48fe96['note']||'';if(_0x13aa06['match'](_0x30c53c[_0x562254(0x677)]))return!![];if(_0x13720c==='HP'&&_0x13aa06[_0x562254(0x712)](_0x30c53c['guardHpLifeSteal']))return!![];if(_0x13720c==='MP'&&_0x13aa06[_0x562254(0x712)](_0x30c53c[_0x562254(0x590)]))return!![];}return![];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x456)]=Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x8c3)],Game_BattlerBase[_0x46c6a8(0x669)]['initMembers']=function(){const _0x2404d9=_0x46c6a8;VisuMZ[_0x2404d9(0xa74)][_0x2404d9(0x456)]['call'](this),this[_0x2404d9(0x4d3)]();},Game_BattlerBase['prototype'][_0x46c6a8(0x4d3)]=function(){const _0x42bf58=_0x46c6a8;this[_0x42bf58(0xab8)]=![];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x4dc)]=Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x233)],Game_BattlerBase['prototype'][_0x46c6a8(0x233)]=function(){const _0x1c7c6d=_0x46c6a8;this[_0x1c7c6d(0xba9)]={},VisuMZ[_0x1c7c6d(0xa74)][_0x1c7c6d(0x4dc)][_0x1c7c6d(0x515)](this);},Game_BattlerBase[_0x46c6a8(0x669)]['checkCacheKey']=function(_0x157b46){const _0x2b7385=_0x46c6a8;return this[_0x2b7385(0xba9)]=this[_0x2b7385(0xba9)]||{},this[_0x2b7385(0xba9)][_0x157b46]!==undefined;},Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x60b)]=function(){const _0x4de0de=_0x46c6a8;if(this[_0x4de0de(0xba9)][_0x4de0de(0x60b)]!==undefined)return this[_0x4de0de(0xba9)][_0x4de0de(0x60b)];const _0x16e5dd=/<DAMAGE CAP:[ ](\d+)>/i,_0x2a521c=this[_0x4de0de(0x5af)]()[_0x4de0de(0x883)](_0x1e7bfc=>_0x1e7bfc&&_0x1e7bfc[_0x4de0de(0xb03)][_0x4de0de(0x712)](_0x16e5dd)?Number(RegExp['$1']):0x0);let _0x131306=_0x2a521c[_0x4de0de(0x50d)]>0x0?Math[_0x4de0de(0x968)](..._0x2a521c):0x0;if(_0x131306<=0x0)_0x131306=VisuMZ[_0x4de0de(0xa74)][_0x4de0de(0x154)][_0x4de0de(0x1df)][_0x4de0de(0x172)];return this[_0x4de0de(0xba9)][_0x4de0de(0x60b)]=_0x131306,this['_cache'][_0x4de0de(0x60b)];},Game_BattlerBase['prototype'][_0x46c6a8(0x10f)]=function(){const _0x4e9e5c=_0x46c6a8;if(this[_0x4e9e5c(0xba9)]['softDamageCap']!==undefined)return this[_0x4e9e5c(0xba9)][_0x4e9e5c(0x784)];let _0x3c6576=VisuMZ[_0x4e9e5c(0xa74)][_0x4e9e5c(0x154)][_0x4e9e5c(0x1df)]['DefaultSoftCap'];const _0xd0f97e=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x43b723=this[_0x4e9e5c(0x5af)]()[_0x4e9e5c(0x883)](_0x54f59d=>_0x54f59d&&_0x54f59d[_0x4e9e5c(0xb03)][_0x4e9e5c(0x712)](_0xd0f97e)?Number(RegExp['$1'])/0x64:0x0);return _0x3c6576=_0x43b723['reduce']((_0x43ec09,_0x478aa8)=>_0x43ec09+_0x478aa8,_0x3c6576),this[_0x4e9e5c(0xba9)][_0x4e9e5c(0x784)]=_0x3c6576,this[_0x4e9e5c(0xba9)][_0x4e9e5c(0x784)][_0x4e9e5c(0xbf6)](0.01,0x1);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x1a0)]=Game_BattlerBase[_0x46c6a8(0x669)]['die'],Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x9f3)]=function(){const _0x149d92=_0x46c6a8;VisuMZ[_0x149d92(0xa74)]['Game_BattlerBase_die'][_0x149d92(0x515)](this),SceneManager[_0x149d92(0x849)]()&&(this[_0x149d92(0x191)]('dead'),this[_0x149d92(0x7e3)]=undefined);},Game_BattlerBase['prototype'][_0x46c6a8(0x62d)]=function(){const _0x63c8eb=_0x46c6a8;if(!SceneManager[_0x63c8eb(0x849)]())return null;if(!SceneManager['_scene'][_0x63c8eb(0x81e)])return null;return SceneManager[_0x63c8eb(0x7a7)][_0x63c8eb(0x81e)][_0x63c8eb(0x71a)](this);},Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x3f9)]=function(){const _0x5a83cc=_0x46c6a8;return VisuMZ[_0x5a83cc(0xa74)][_0x5a83cc(0x154)][_0x5a83cc(0xa6f)][_0x5a83cc(0x162)];},Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x32f)]=function(){const _0x18a072=_0x46c6a8;return VisuMZ[_0x18a072(0xa74)][_0x18a072(0x154)][_0x18a072(0xa6f)]['AnchorY'];},Game_BattlerBase['prototype']['svBattlerShadowVisible']=function(){const _0x48dc51=_0x46c6a8;return this[_0x48dc51(0x4ec)]&&this['isActor']()?VisuMZ[_0x48dc51(0xa74)][_0x48dc51(0x154)][_0x48dc51(0xa6f)][_0x48dc51(0x231)]:VisuMZ[_0x48dc51(0xa74)][_0x48dc51(0x154)][_0x48dc51(0x6de)][_0x48dc51(0x231)];},Game_BattlerBase[_0x46c6a8(0x669)]['battlerSmoothImage']=function(){return!![];},Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0xb8f)]=function(){return 0x0;},Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0xaba)]=function(){return 0x0;},Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0xa3d)]=function(_0x24abc9){const _0x586797=_0x46c6a8;if(!_0x24abc9)return 0x0;let _0x33888e=0x0;const _0x2d4725=_0x24abc9['note'];return _0x2d4725[_0x586797(0x712)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x33888e+=Number(RegExp['$1'])),_0x2d4725['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x33888e+=Number(RegExp['$1'])),_0x33888e;},Game_BattlerBase['prototype']['createBattleUIOffsetY']=function(_0x131389){const _0xb3290c=_0x46c6a8;if(!_0x131389)return 0x0;let _0x5e4fed=0x0;const _0x16c512=_0x131389[_0xb3290c(0xb03)];return _0x16c512[_0xb3290c(0x712)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x5e4fed+=Number(RegExp['$1'])),_0x16c512[_0xb3290c(0x712)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x5e4fed+=Number(RegExp['$2'])),_0x5e4fed;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x1bb)]=Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x175)],Game_BattlerBase['prototype'][_0x46c6a8(0x175)]=function(_0x5545be){const _0x1c010c=_0x46c6a8;if(_0x5545be===this[_0x1c010c(0x348)]()&&this['isImmortal']())return!![];return VisuMZ[_0x1c010c(0xa74)][_0x1c010c(0x1bb)][_0x1c010c(0x515)](this,_0x5545be);},Game_BattlerBase['prototype'][_0x46c6a8(0x592)]=function(){const _0x1eddd8=_0x46c6a8;return this[_0x1eddd8(0xab8)];},Game_BattlerBase['prototype'][_0x46c6a8(0x41a)]=function(_0x42a17d){const _0x38ce88=_0x46c6a8;_0x42a17d?this[_0x38ce88(0x8c4)]():this[_0x38ce88(0x1f0)]();},Game_BattlerBase['prototype'][_0x46c6a8(0x8c4)]=function(){const _0x45ea7c=_0x46c6a8;if(this['isDead']())return;this[_0x45ea7c(0xab8)]=!![],this[_0x45ea7c(0xc5b)]=![];},Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x1f0)]=function(){const _0x4d5509=_0x46c6a8,_0x431c87=this[_0x4d5509(0x3d5)]();this[_0x4d5509(0xab8)]=![],_0x431c87&&this[_0x4d5509(0xc5b)]&&this['die'](),this[_0x4d5509(0xc5b)]=![],this['refresh'](),this[_0x4d5509(0xa10)]()&&_0x431c87&&(this[_0x4d5509(0x31b)](),this['requestMotionRefresh']());},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x408)]=Game_Action['prototype']['numRepeats'],Game_Action['prototype']['numRepeats']=function(){const _0x5129cb=_0x46c6a8;return this[_0x5129cb(0x6e9)]()?VisuMZ[_0x5129cb(0xa74)][_0x5129cb(0x408)][_0x5129cb(0x515)](this):0x0;},VisuMZ[_0x46c6a8(0xa74)]['Game_Action_setAttack']=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xa13)],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0xa13)]=function(){const _0x1cca29=_0x46c6a8;if(this[_0x1cca29(0x1d5)]()&&this['subject']()['canAttack']())VisuMZ['BattleCore'][_0x1cca29(0x8a0)]['call'](this);else BattleManager['_bypassCanCounterCheck']?VisuMZ['BattleCore'][_0x1cca29(0x8a0)][_0x1cca29(0x515)](this):this[_0x1cca29(0x518)]();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x18c)]=Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x58d)],Game_BattlerBase[_0x46c6a8(0x669)]['canAttack']=function(){const _0x9b57ca=_0x46c6a8;if(!this['canAttackBattleCore']())return![];return VisuMZ[_0x9b57ca(0xa74)]['Game_BattlerBase_canAttack'][_0x9b57ca(0x515)](this);},Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x767)]=function(){const _0x2c2bf2=_0x46c6a8;for(const _0x211c1c of this['traitObjects']()){if(!_0x211c1c)continue;if(_0x211c1c[_0x2c2bf2(0xb03)][_0x2c2bf2(0x712)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ['BattleCore'][_0x46c6a8(0x267)]=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x134)],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x134)]=function(){const _0x4d68c4=_0x46c6a8;this[_0x4d68c4(0x1d5)]()[_0x4d68c4(0x400)]()&&VisuMZ[_0x4d68c4(0xa74)][_0x4d68c4(0x267)][_0x4d68c4(0x515)](this);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x57a)]=Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x400)],Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x400)]=function(){const _0x237122=_0x46c6a8;if(!this[_0x237122(0x12c)]())return![];return VisuMZ[_0x237122(0xa74)][_0x237122(0x57a)]['call'](this);},Game_BattlerBase[_0x46c6a8(0x669)]['canGuardBattleCore']=function(){const _0x51daf0=_0x46c6a8;for(const _0x57cd2d of this['traitObjects']()){if(!_0x57cd2d)continue;if(_0x57cd2d[_0x51daf0(0xb03)][_0x51daf0(0x712)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0xa70)]=function(){const _0x53435c=_0x46c6a8;for(const _0x7bc1d2 of this[_0x53435c(0x5af)]()){if(!_0x7bc1d2)continue;if(_0x7bc1d2[_0x53435c(0xb03)][_0x53435c(0x712)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x587)]=Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x566)],Game_BattlerBase[_0x46c6a8(0x669)]['meetsUsableItemConditions']=function(_0x237b60){const _0x17ef4c=_0x46c6a8;if(_0x237b60&&_0x237b60[_0x17ef4c(0xb03)][_0x17ef4c(0x712)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x1f1b96=this[_0x17ef4c(0x8a2)]()['aliveMembers']();if(_0x1f1b96['length']===0x1&&_0x1f1b96[0x0]===this)return![];}return VisuMZ[_0x17ef4c(0xa74)]['Game_BattlerBase_meetsUsableItemConditions'][_0x17ef4c(0x515)](this,_0x237b60);},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xae6)]=function(){const _0x119f3e=_0x46c6a8;return VisuMZ[_0x119f3e(0xa74)][_0x119f3e(0x154)][_0x119f3e(0x3f8)][_0x119f3e(0x300)];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xa18)]=Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x4e6)],Game_Battler['prototype']['regenerateAll']=function(){const _0x1a636e=_0x46c6a8;if(SceneManager[_0x1a636e(0x849)]()){if(BattleManager[_0x1a636e(0x57d)]()){if(this['turnCount']()<=0x0)return;}else{if($gameTroop['turnCount']()<=0x0)return;}}if(SceneManager['isSceneBattle']()&&BattleManager[_0x1a636e(0x57d)]()&&this[_0x1a636e(0xc4f)]===Graphics[_0x1a636e(0xab3)])return;this[_0x1a636e(0xc4f)]=Graphics[_0x1a636e(0xab3)],SceneManager[_0x1a636e(0x849)]()&&this[_0x1a636e(0x194)]('PreRegenerateJS'),VisuMZ[_0x1a636e(0xa74)]['Game_Battler_regenerateAll'][_0x1a636e(0x515)](this),SceneManager[_0x1a636e(0x849)]()&&(this['regenerateAllBattleCore'](),this[_0x1a636e(0x194)](_0x1a636e(0x8b6)));},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x9a5)]=function(){const _0x3f8907=_0x46c6a8;if(SceneManager[_0x3f8907(0x849)]())for(const _0x31736d of this['traitObjects']()){if(!_0x31736d)continue;this[_0x3f8907(0x89b)](_0x31736d);}},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x89b)]=function(_0x41a88a){const _0xeb9f0a=_0x46c6a8;if(!Imported['VisuMZ_0_CoreEngine'])return;if(!SceneManager[_0xeb9f0a(0x849)]())return;if(this[_0xeb9f0a(0xa10)]())return;if(this[_0xeb9f0a(0xc2e)]())return;if(_0x41a88a['note'][_0xeb9f0a(0x712)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x16d4af=Number(RegExp['$1']);$gameTemp[_0xeb9f0a(0x871)]([this],_0x16d4af,![],![]);}},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x68a)]=Game_Battler['prototype'][_0x46c6a8(0x342)],Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x342)]=function(){const _0x33ea5c=_0x46c6a8;this[_0x33ea5c(0x194)]('PreStartTurnJS'),VisuMZ[_0x33ea5c(0xa74)][_0x33ea5c(0x68a)][_0x33ea5c(0x515)](this),this[_0x33ea5c(0x194)]('PostStartTurnJS');},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x7cc)]=Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x893)],Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x893)]=function(){const _0x158607=_0x46c6a8;this['processBattleCoreJS']('PreEndTurnJS'),VisuMZ['BattleCore'][_0x158607(0x7cc)][_0x158607(0x515)](this),VisuMZ[_0x158607(0xa74)]['Settings'][_0x158607(0x3f8)][_0x158607(0xb85)]&&this[_0x158607(0x42d)](),this['processBattleCoreJS'](_0x158607(0x217));},Game_Battler['prototype'][_0x46c6a8(0x194)]=function(_0x4762c6){const _0x22b47a=_0x46c6a8;if(this[_0x22b47a(0x8d0)]||this['_tempActor'])return;const _0x482e9b=VisuMZ['BattleCore'][_0x22b47a(0x154)]['Mechanics'];if(_0x482e9b[_0x4762c6])_0x482e9b[_0x4762c6]['call'](this);for(const _0x4d5762 of this[_0x22b47a(0x5af)]()){if(!_0x4d5762)continue;key=VisuMZ['BattleCore'][_0x22b47a(0x916)](_0x4d5762,_0x4762c6),VisuMZ['BattleCore']['JS'][key]&&VisuMZ[_0x22b47a(0xa74)]['JS'][key][_0x22b47a(0x515)](this,this,this,_0x4d5762,0x0);}},Game_Battler[_0x46c6a8(0x669)]['chantStyle']=function(){const _0xd9de09=_0x46c6a8;return VisuMZ['BattleCore'][_0xd9de09(0x154)][_0xd9de09(0xa6f)][_0xd9de09(0x884)]||![];},Game_Battler['prototype']['isChanting']=function(){const _0x593a8a=_0x46c6a8;if(this['isWaiting']()){if(this[_0x593a8a(0x3f4)]()){if(this['_actions']['some'](_0x105172=>_0x105172[_0x593a8a(0x6e9)]()&&_0x105172[_0x593a8a(0x220)]()))return!![];}else{if(this[_0x593a8a(0x98f)]['some'](_0x422a18=>_0x422a18[_0x593a8a(0x6e9)]()&&_0x422a18[_0x593a8a(0x53e)]()))return!![];}}if(BattleManager['isTpb']()&&this[_0x593a8a(0x573)]===_0x593a8a(0x827))return this[_0x593a8a(0x3f4)]()?this['currentAction']()&&this[_0x593a8a(0x645)]()[_0x593a8a(0x6e9)]()&&this[_0x593a8a(0x645)]()[_0x593a8a(0x220)]():this[_0x593a8a(0x645)]()&&this[_0x593a8a(0x645)]()['item']()&&this[_0x593a8a(0x645)]()[_0x593a8a(0x53e)]();return![];},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x5cf)]=function(){const _0x42c380=_0x46c6a8;if(BattleManager[_0x42c380(0x57d)]()&&this[_0x42c380(0x573)]==='casting')return this[_0x42c380(0x3f4)]()?this['currentAction']()&&this[_0x42c380(0x645)]()[_0x42c380(0x6e9)]()&&!this['currentAction']()[_0x42c380(0x220)]():this['currentAction']()&&this[_0x42c380(0x645)]()[_0x42c380(0x6e9)]()&&!this[_0x42c380(0x645)]()[_0x42c380(0x53e)]();return![];},VisuMZ['BattleCore'][_0x46c6a8(0xbaf)]=Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x9a7)],Game_Battler['prototype'][_0x46c6a8(0x9a7)]=function(){const _0x444eb8=_0x46c6a8;VisuMZ['BattleCore']['Game_Battler_clearDamagePopup'][_0x444eb8(0x515)](this),this['_damagePopupArray']=[];},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xb56)]=function(){const _0x51ba8d=_0x46c6a8;if(!this[_0x51ba8d(0x166)])this[_0x51ba8d(0x9a7)]();return this[_0x51ba8d(0x166)][_0x51ba8d(0x50d)]>0x0;},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x875)]=function(){const _0x5bebfb=_0x46c6a8;if(!SceneManager[_0x5bebfb(0x849)]())return;if(BattleManager[_0x5bebfb(0xad6)]())return;if(!this[_0x5bebfb(0x166)])this['clearDamagePopup']();this[_0x5bebfb(0x45a)]();const _0x27184f=this[_0x5bebfb(0x62d)]();if(_0x27184f)_0x27184f[_0x5bebfb(0x6d7)]();},Game_Battler[_0x46c6a8(0x669)]['createSeparateDamagePopups']=function(){const _0x2a9d90=_0x46c6a8,_0x27375b=this[_0x2a9d90(0x600)]();if(_0x27375b[_0x2a9d90(0x54d)]||_0x27375b[_0x2a9d90(0x97e)]){const _0x3d8a3a=JsonEx[_0x2a9d90(0x219)](_0x27375b);_0x3d8a3a['hpAffected']=![],_0x3d8a3a['mpDamage']=0x0,this[_0x2a9d90(0x166)][_0x2a9d90(0x78c)](_0x3d8a3a);if(!_0x27375b[_0x2a9d90(0x820)]&&!_0x27375b['mpDamage'])return;}if(_0x27375b[_0x2a9d90(0x5f9)]){const _0x34034b=JsonEx[_0x2a9d90(0x219)](_0x27375b);_0x34034b[_0x2a9d90(0x54d)]=![],_0x34034b['evaded']=![],_0x34034b[_0x2a9d90(0x36e)]=0x0,this[_0x2a9d90(0x166)][_0x2a9d90(0x78c)](_0x34034b);}if(_0x27375b[_0x2a9d90(0x36e)]!==0x0){const _0x24f2ec=JsonEx[_0x2a9d90(0x219)](_0x27375b);_0x24f2ec[_0x2a9d90(0x54d)]=![],_0x24f2ec[_0x2a9d90(0x97e)]=![],_0x24f2ec['hpAffected']=![],this['_damagePopupArray'][_0x2a9d90(0x78c)](_0x24f2ec);}},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x34b)]=function(){const _0x5abdde=_0x46c6a8;if(!this[_0x5abdde(0x166)])this['clearDamagePopup']();return VisuMZ[_0x5abdde(0xa74)][_0x5abdde(0x154)][_0x5abdde(0x1df)][_0x5abdde(0x23f)]?this[_0x5abdde(0x166)]['shift']():this['_damagePopupArray'][_0x5abdde(0x3c2)]();},Game_Battler[_0x46c6a8(0x669)]['setupTextPopup']=function(_0x122fc2,_0x34615d){const _0x5ee6ec=_0x46c6a8;if(!SceneManager[_0x5ee6ec(0x849)]())return;if(BattleManager[_0x5ee6ec(0xad6)]())return;if(!this[_0x5ee6ec(0x62d)]())return;if(_0x122fc2['length']<=0x0)return;_0x34615d=_0x34615d||{},_0x34615d[_0x5ee6ec(0x2d8)]=_0x34615d[_0x5ee6ec(0x2d8)]||_0x5ee6ec(0x47c),_0x34615d[_0x5ee6ec(0x111)]=_0x34615d[_0x5ee6ec(0x111)]||[0x0,0x0,0x0,0x0],_0x34615d[_0x5ee6ec(0x5a8)]=_0x34615d[_0x5ee6ec(0x5a8)]||0x0,this[_0x5ee6ec(0x62d)]()[_0x5ee6ec(0x31f)](_0x122fc2,_0x34615d);},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x17b)]=function(_0x5ae71e,_0x1703f4,_0x55f974){const _0x56bb34=_0x46c6a8;if(!SceneManager[_0x56bb34(0x849)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x56bb34(0x62d)]())return;if(_0x1703f4[_0x56bb34(0x50d)]<=0x0)return;_0x55f974=_0x55f974||{},_0x55f974[_0x56bb34(0x2d8)]=_0x55f974[_0x56bb34(0x2d8)]||_0x56bb34(0x47c),_0x55f974['flashColor']=_0x55f974[_0x56bb34(0x111)]||[0x0,0x0,0x0,0x0],_0x55f974[_0x56bb34(0x5a8)]=_0x55f974[_0x56bb34(0x5a8)]||0x0,this[_0x56bb34(0x62d)]()[_0x56bb34(0x17b)](_0x5ae71e,_0x1703f4,_0x55f974);},Game_Battler[_0x46c6a8(0x669)]['notFocusValid']=function(){const _0x589a68=_0x46c6a8;if(this['isHidden']())return![];if(this['isAlive']()&&this['isAppeared']())return!![];if(this[_0x589a68(0x8de)]()&&this[_0x589a68(0x548)]()){if(this['isDead']()&&this[_0x589a68(0xa26)]())return![];}else{if(this[_0x589a68(0xa10)]())return![];}return!![];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x62c)]=Game_Battler['prototype'][_0x46c6a8(0x355)],Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x355)]=function(){const _0x24f63a=_0x46c6a8;VisuMZ['BattleCore'][_0x24f63a(0x62c)][_0x24f63a(0x515)](this),this[_0x24f63a(0x756)]();},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xb07)]=function(){return!![];},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x438)]=function(){return![];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xaa6)]=Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x2a2)],Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x2a2)]=function(_0x516658){const _0x1e4688=_0x46c6a8;VisuMZ[_0x1e4688(0xa74)][_0x1e4688(0xaa6)][_0x1e4688(0x515)](this,_0x516658),this[_0x1e4688(0x596)](_0x516658),this['clearDamagePopup']();},Game_Battler['prototype'][_0x46c6a8(0x596)]=function(_0x35bd3c){const _0x246801=_0x46c6a8;this[_0x246801(0x4ad)](![]),this['_forcedHomeX']=undefined,this[_0x246801(0x7c7)]=undefined;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x349)]=Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x27d)],Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x27d)]=function(){const _0x5f53d0=_0x46c6a8;VisuMZ[_0x5f53d0(0xa74)][_0x5f53d0(0x349)][_0x5f53d0(0x515)](this),this[_0x5f53d0(0xac3)]();},Game_Battler[_0x46c6a8(0x669)]['onBattleEndBattleCore']=function(){const _0x12cce7=_0x46c6a8;this[_0x12cce7(0xa99)]=undefined,this[_0x12cce7(0x7c7)]=undefined;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x351)]=Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x975)],Game_Battler['prototype'][_0x46c6a8(0x975)]=function(_0xaede8b){const _0x39ddba=_0x46c6a8;VisuMZ[_0x39ddba(0xa74)][_0x39ddba(0x351)][_0x39ddba(0x515)](this,_0xaede8b);if(!_0xaede8b[_0x39ddba(0x93c)]()){const _0x12a5a5=this['battler']();_0x12a5a5&&_0x12a5a5['stepForward']();}this[_0x39ddba(0x4ad)](![]);},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xae0)]=function(){const _0x199405=_0x46c6a8;this[_0x199405(0x7e3)]=undefined;const _0x26bb0d=this[_0x199405(0x77b)];this[_0x199405(0x77b)]=![];if(BattleManager['isActiveTpb']()&&this['isInputting']()){const _0x12540a=this['battler']();if(_0x12540a&&_0x26bb0d)_0x12540a[_0x199405(0x94f)]();return;}const _0x59f80e=this[_0x199405(0x62d)]();if(_0x59f80e)_0x59f80e[_0x199405(0x6be)]();this[_0x199405(0x4ad)](![]),this[_0x199405(0x64a)]();},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x344)]=function(_0x523da0){const _0x259ac5=_0x46c6a8;if(_0x523da0[_0x259ac5(0x3a9)]())this[_0x259ac5(0x9e9)]();else{if(_0x523da0['isGuard']())this[_0x259ac5(0x191)](_0x259ac5(0x930));else{if(_0x523da0[_0x259ac5(0x220)]())this[_0x259ac5(0x191)](_0x259ac5(0x3d4));else{if(_0x523da0[_0x259ac5(0x66a)]())[0x1,0x2,0x5,0x6][_0x259ac5(0x4a3)](_0x523da0[_0x259ac5(0x6e9)]()[_0x259ac5(0xaca)][_0x259ac5(0xaa8)])?this[_0x259ac5(0x9e9)]():this['requestMotion'](_0x259ac5(0x7c2));else _0x523da0[_0x259ac5(0x994)]()&&this[_0x259ac5(0x191)]('item');}}}},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x740)]=function(){const _0x1aff5e=_0x46c6a8;return $dataSystem[_0x1aff5e(0x110)][0x0];},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xb7e)]=function(){const _0x490a75=_0x46c6a8,_0x3082ca=this[_0x490a75(0x740)]();return _0x3082ca?_0x3082ca[_0x490a75(0x67d)]:0x0;},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x588)]=function(_0x50f0ce){const _0x4ec018=_0x46c6a8;if(!$gameSystem[_0x4ec018(0x33c)]())return;const _0x270911=this[_0x4ec018(0x62d)](),_0x715e41=_0x50f0ce[_0x4ec018(0x62d)]();if(!_0x270911||!_0x715e41)return;const _0x5d6944=_0x715e41['_baseX'],_0x3d52fe=_0x715e41[_0x4ec018(0x960)];this[_0x4ec018(0x120)](_0x5d6944,_0x3d52fe,0x0,![],'Linear',-0x1),_0x270911[_0x4ec018(0x28b)]();const _0x3d737a=VisuMZ[_0x4ec018(0xa74)][_0x4ec018(0x154)][_0x4ec018(0x3bf)];let _0x1c96e5=(_0x715e41[_0x4ec018(0x1e1)]+_0x270911[_0x4ec018(0x1e1)])/0x2;_0x1c96e5*=this['isActor']()?0x1:-0x1;let _0x438cc2=_0x3d737a['StepDistanceY']*(this[_0x4ec018(0x4ec)]()?0x1:-0x1);_0x50f0ce[_0x4ec018(0x3b7)](_0x1c96e5,_0x438cc2,0x0,![],_0x4ec018(0x3de)),_0x715e41[_0x4ec018(0x28b)]();},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x191)]=function(_0x5cd732){const _0x28e1f0=_0x46c6a8;if(SceneManager[_0x28e1f0(0x849)]()){const _0x44a688=this[_0x28e1f0(0x62d)]();_0x44a688&&(_0x44a688[_0x28e1f0(0x6a7)](_0x5cd732),['swing',_0x28e1f0(0x5bd),_0x28e1f0(0x6a0)][_0x28e1f0(0x4a3)](_0x5cd732)&&this[_0x28e1f0(0x658)]());}this[_0x28e1f0(0x756)]();},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x658)]=function(){},Game_Battler[_0x46c6a8(0x669)]['startWeaponAnimation']=function(_0x5ba58e){const _0x516f03=_0x46c6a8;if(SceneManager[_0x516f03(0x849)]()){const _0x38f661=this[_0x516f03(0x62d)]();if(_0x38f661)_0x38f661[_0x516f03(0x673)](_0x5ba58e);}},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x69f)]=function(){const _0x10cd69=_0x46c6a8;if(SceneManager['isSceneBattle']()){const _0x3aaee1=this['getAttackWeaponAnimationId']();this[_0x10cd69(0xb51)](_0x3aaee1);}},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xbc4)]=function(_0x1f9083,_0x18503d){const _0x545435=_0x46c6a8;if(!_0x1f9083)return;if(!_0x1f9083['item']())return;if(_0x1f9083[_0x545435(0x3a9)]())return;if(_0x1f9083[_0x545435(0x93c)]())return;if(_0x1f9083[_0x545435(0x994)]())return;if($gameTemp['_playTestFastMode'])return;let _0x7e1bcb=0x0;const _0x54c877=VisuMZ['BattleCore']['Settings'][_0x545435(0x3bf)],_0x419b2e=_0x1f9083[_0x545435(0x6e9)]()[_0x545435(0xb03)];if(_0x419b2e[_0x545435(0x712)](/<CAST ANIMATION: (\d+)>/i))_0x7e1bcb=Number(RegExp['$1']);else{if(_0x419b2e[_0x545435(0x712)](/<NO CAST ANIMATION>/i))return;else{if(_0x1f9083[_0x545435(0x8b1)]())_0x7e1bcb=_0x54c877[_0x545435(0x56d)];else{if(_0x1f9083[_0x545435(0x2ef)]())_0x7e1bcb=_0x54c877[_0x545435(0x743)];else _0x1f9083['isMagical']()&&(_0x7e1bcb=_0x54c877[_0x545435(0xbb5)]);}}}_0x7e1bcb>0x0&&$gameTemp[_0x545435(0x56e)]([this],_0x7e1bcb,!!_0x18503d);},Game_Battler['prototype']['performReflection']=function(){const _0x2ee8b7=_0x46c6a8;SoundManager[_0x2ee8b7(0x88e)]();let _0xa98d2d=VisuMZ['BattleCore'][_0x2ee8b7(0x154)][_0x2ee8b7(0x3bf)][_0x2ee8b7(0x9f7)];_0xa98d2d>0x0&&(Imported[_0x2ee8b7(0x12b)]?$gameTemp[_0x2ee8b7(0x871)]([this],_0xa98d2d):$gameTemp[_0x2ee8b7(0x56e)]([this],_0xa98d2d));},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x509)]=function(){const _0x41cb9f=_0x46c6a8;if(!$gameSystem[_0x41cb9f(0x33c)]())return![];if(!BattleManager['isActiveTpb']())return![];if(!this[_0x41cb9f(0x3d5)]())return![];if(this[_0x41cb9f(0x653)]())return!![];if(this[_0x41cb9f(0x865)]())return!![];if(this[_0x41cb9f(0xc07)]>=0x1)return!![];return![];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xb32)]=Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x833)],Game_Battler['prototype']['performDamage']=function(){const _0x34c877=_0x46c6a8;this[_0x34c877(0x509)]()&&(this['_performDamageMotion']=!![]),VisuMZ[_0x34c877(0xa74)][_0x34c877(0xb32)][_0x34c877(0x515)](this),this[_0x34c877(0x729)](),this[_0x34c877(0x54f)]();},VisuMZ['BattleCore'][_0x46c6a8(0x950)]=Game_Battler['prototype'][_0x46c6a8(0xa07)],Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xa07)]=function(){const _0x5c4aeb=_0x46c6a8;this[_0x5c4aeb(0x509)]()&&(this['_performDamageMotion']=!![]),VisuMZ[_0x5c4aeb(0xa74)][_0x5c4aeb(0x950)]['call'](this),this['performFlinch']();},VisuMZ['BattleCore'][_0x46c6a8(0x478)]=Game_Battler['prototype'][_0x46c6a8(0x956)],Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x956)]=function(){const _0x228d49=_0x46c6a8;this[_0x228d49(0x509)]()&&(this[_0x228d49(0x7e3)]=!![]),VisuMZ[_0x228d49(0xa74)][_0x228d49(0x478)]['call'](this),this[_0x228d49(0x729)]();},Game_Battler[_0x46c6a8(0x669)]['performFlinch']=function(){const _0x1fc432=_0x46c6a8;if(!$gameSystem['isSideView']())return;if(this[_0x1fc432(0x77b)])return;this[_0x1fc432(0x77b)]=!![];const _0x1f9eb0=this['battler']();if(_0x1f9eb0)_0x1f9eb0[_0x1fc432(0x79d)]();},Game_Battler['prototype'][_0x46c6a8(0x54f)]=function(){const _0x3b6110=_0x46c6a8;if(!this[_0x3b6110(0xb07)]())return;const _0xcb2ea7=VisuMZ[_0x3b6110(0xa74)]['Settings']['Actor'];if(!(_0xcb2ea7['ShakeFlinch']??![]))return;if(!this[_0x3b6110(0x16f)]&&!this[_0x3b6110(0x900)]&&!this['_lastTpDamage'])return;const _0x22b931=this[_0x3b6110(0x62d)]();if(_0x22b931){let _0x3753fd=0x0;if(this['_lastHpDamage']>0x0){const _0x4ededd=this['_lastHpDamage'];_0x3753fd=_0x4ededd/(this[_0x3b6110(0xba0)]||0x1);}else{if(this[_0x3b6110(0x900)]>0x0){const _0x16c69f=this[_0x3b6110(0x900)];_0x3753fd=_0x16c69f/(this['mmp']||0x1);}else{if(this['_lastTpDamage']>0x0){const _0x4f71d7=this[_0x3b6110(0xa81)];_0x3753fd=_0x4f71d7/(this[_0x3b6110(0x2cd)]()||0x1);}}}_0x3753fd=_0x3753fd['clamp'](0.8,0x1);const _0x4bc41b=_0xcb2ea7[_0x3b6110(0x244)]??0x30,_0x59a94e=_0x3753fd*_0x4bc41b;_0x22b931[_0x3b6110(0xba3)](_0x59a94e,_0x3753fd);}},Game_Battler[_0x46c6a8(0x669)]['requestMotionRefresh']=function(){const _0x20fd79=_0x46c6a8;if(this[_0x20fd79(0xa10)]()&&this[_0x20fd79(0x598)]!=='dead'){this[_0x20fd79(0x191)]('dead');return;}if(this[_0x20fd79(0xa10)]()&&this[_0x20fd79(0x598)]==='dead')return;if(!!this['_freezeMotionData'])return;if(this[_0x20fd79(0x8de)]()){if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager[_0x20fd79(0x80d)]){if(this[_0x20fd79(0x62d)]())this['battler']()[_0x20fd79(0xa61)]();}this[_0x20fd79(0x756)]();return;}if(this[_0x20fd79(0x598)]===_0x20fd79(0x6e7))return;if(this[_0x20fd79(0x598)]===_0x20fd79(0x7e8)&&!BattleManager[_0x20fd79(0x653)]())return;if(this[_0x20fd79(0x598)]===_0x20fd79(0x930)&&!BattleManager[_0x20fd79(0x653)]())return;this[_0x20fd79(0x355)]();if(BattleManager['isActiveTpb']()&&this===BattleManager[_0x20fd79(0x80d)])return;if(this[_0x20fd79(0x62d)]()&&BattleManager[_0x20fd79(0x653)]()){this[_0x20fd79(0x62d)]()[_0x20fd79(0xa61)](),this['clearFreezeMotion']();return;}},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x46c)]=function(){const _0x94148=_0x46c6a8;if(!this[_0x94148(0x548)]())return![];const _0x280037=this[_0x94148(0x62d)]();if(!_0x280037)return![];const _0x47d496=_0x280037[_0x94148(0xaae)];if(!_0x47d496)return![];const _0x27e753=_0x47d496[_0x94148(0x9ea)];return _0x27e753&&!_0x27e753[_0x94148(0x3fc)];},Game_Battler['prototype'][_0x46c6a8(0x6fb)]=function(){return this['_isBattlerFlipped'];},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x4ad)]=function(_0x42b69d){const _0x27a40b=_0x46c6a8;if(!$gameSystem[_0x27a40b(0x33c)]())return;this['_isBattlerFlipped']=_0x42b69d;const _0x49a703=this[_0x27a40b(0x62d)]();if(_0x49a703)_0x49a703[_0x27a40b(0x29f)]();},Game_Battler['prototype']['setBattlerFacePoint']=function(_0x1b7b33,_0x2652e5,_0x2d8486){const _0x7cba79=_0x46c6a8;if(!$gameSystem['isSideView']())return;const _0x45c4ec=this[_0x7cba79(0x62d)]();if(!_0x45c4ec)return;if(_0x1b7b33===_0x45c4ec[_0x7cba79(0xc31)])return;let _0x33a051=![];if(this[_0x7cba79(0x4ec)]()){if(_0x1b7b33>_0x45c4ec[_0x7cba79(0xc31)])_0x33a051=!![];if(_0x1b7b33<_0x45c4ec[_0x7cba79(0xc31)])_0x33a051=![];}else{if(this['isEnemy']()){if(_0x1b7b33>_0x45c4ec[_0x7cba79(0xc31)])_0x33a051=![];if(_0x1b7b33<_0x45c4ec[_0x7cba79(0xc31)])_0x33a051=!![];}};this['setBattlerFlip'](_0x2d8486?!_0x33a051:_0x33a051),_0x45c4ec[_0x7cba79(0x29f)]();},Game_Battler['prototype'][_0x46c6a8(0x3b7)]=function(_0x52211e,_0x4b4011,_0x13dd8f,_0x5f3c18,_0xb246d5){const _0x3b349c=_0x46c6a8;if(!$gameSystem[_0x3b349c(0x33c)]())return;const _0x5839a1=this[_0x3b349c(0x62d)]();if(!_0x5839a1)return;if(_0x5f3c18)this['setBattlerFacePoint'](_0x52211e+_0x5839a1[_0x3b349c(0xc31)],_0x4b4011+_0x5839a1[_0x3b349c(0x960)],![]);_0x52211e+=_0x5839a1['_baseX']-_0x5839a1[_0x3b349c(0x637)],_0x4b4011+=_0x5839a1['_baseY']-_0x5839a1[_0x3b349c(0x128)],_0x5839a1['startMove'](_0x52211e,_0x4b4011,_0x13dd8f);if(Imported[_0x3b349c(0x12b)])_0x5839a1[_0x3b349c(0x92f)](_0xb246d5||_0x3b349c(0x3de));},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x120)]=function(_0x541ad4,_0x41f766,_0x4058b9,_0xb1f1a9,_0x33935d,_0x8e8ce7){const _0x4d8fec=_0x46c6a8;if(!$gameSystem[_0x4d8fec(0x33c)]())return;const _0x2dab0d=this['battler']();if(!_0x2dab0d)return;if(_0x541ad4===Infinity||_0x41f766===Infinity)return;if(isNaN(_0x541ad4)||isNaN(_0x41f766))return;_0x8e8ce7=_0x8e8ce7||0x0;if(_0x8e8ce7>0x0){if(_0x2dab0d[_0x4d8fec(0xc31)]>_0x541ad4)_0x541ad4+=_0x2dab0d[_0x4d8fec(0x1e1)]/0x2+_0x8e8ce7;if(_0x2dab0d[_0x4d8fec(0xc31)]<_0x541ad4)_0x541ad4-=_0x2dab0d[_0x4d8fec(0x1e1)]/0x2+_0x8e8ce7;}if(_0xb1f1a9)this['setBattlerFacePoint'](_0x541ad4,_0x41f766,![]);_0x541ad4-=_0x2dab0d[_0x4d8fec(0x637)],_0x41f766-=_0x2dab0d[_0x4d8fec(0x128)],_0x2dab0d[_0x4d8fec(0x4c7)](_0x541ad4,_0x41f766,_0x4058b9);if(Imported['VisuMZ_0_CoreEngine'])_0x2dab0d[_0x4d8fec(0x92f)](_0x33935d||'Linear');},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x424)]=function(_0x52b262,_0xb22a95,_0x508400,_0x430a10,_0x49afc2){const _0x34437d=_0x46c6a8;if(!$gameSystem[_0x34437d(0x33c)]())return;const _0x560459=this['battler']();if(!_0x560459)return;if(_0x430a10)this['setBattlerFacePoint'](_0x52b262+_0x560459[_0x34437d(0xc31)],_0xb22a95+_0x560459[_0x34437d(0x960)],![]);_0x52b262+=_0x560459[_0x34437d(0x637)],_0xb22a95+=_0x560459[_0x34437d(0x128)],_0x560459[_0x34437d(0x34a)](_0x52b262,_0xb22a95,_0x508400,_0x49afc2),this[_0x34437d(0xa99)]=_0x52b262,this['_forcedHomeY']=_0xb22a95;},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xc14)]=function(_0x2d931e,_0x15ca2a,_0x259436,_0x498e66,_0x495ca8,_0x4dc809){const _0x48478b=_0x46c6a8;if(!$gameSystem[_0x48478b(0x33c)]())return;const _0x1d6ce1=this[_0x48478b(0x62d)]();if(!_0x1d6ce1)return;_0x4dc809=_0x4dc809||0x0;if(_0x4dc809>0x0){if(_0x1d6ce1['_baseX']>_0x2d931e)_0x2d931e+=_0x1d6ce1['width']/0x2+_0x4dc809;if(_0x1d6ce1[_0x48478b(0xc31)]<_0x2d931e)_0x2d931e-=_0x1d6ce1[_0x48478b(0x1e1)]/0x2+_0x4dc809;}if(_0x498e66)this[_0x48478b(0x717)](_0x2d931e,_0x15ca2a,![]);_0x1d6ce1[_0x48478b(0x34a)](_0x2d931e,_0x15ca2a,_0x259436,_0x495ca8),this[_0x48478b(0xa99)]=_0x2d931e,this['_forcedHomeY']=_0x15ca2a;},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x1e4)]=function(_0x445419,_0x55f69f,_0x209e1d){const _0x45d1c2=_0x46c6a8;if(!$gameSystem[_0x45d1c2(0x33c)]())return;const _0x4ff1ea=this[_0x45d1c2(0x62d)]();if(!_0x4ff1ea)return;_0x4ff1ea['startFloat'](_0x445419,_0x55f69f,_0x209e1d);},Game_Battler['prototype'][_0x46c6a8(0x7ff)]=function(_0x1fb3bf,_0x16863c){const _0x2068c9=_0x46c6a8;if(!$gameSystem['isSideView']())return;const _0x9ca5a2=this['battler']();if(!_0x9ca5a2)return;_0x9ca5a2[_0x2068c9(0xb01)](_0x1fb3bf,_0x16863c);},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x919)]=function(_0x209d7a,_0x46a37b,_0x42a2dd,_0x5d4f1c){const _0x37f9cf=_0x46c6a8;if(!$gameSystem[_0x37f9cf(0x33c)]())return;const _0x323eca=this[_0x37f9cf(0x62d)]();if(!_0x323eca)return;_0x323eca[_0x37f9cf(0x834)](_0x209d7a,_0x46a37b,_0x42a2dd,_0x5d4f1c);},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x8ab)]=function(_0x42f968,_0x3030dc,_0x410c4c,_0x3fe56f){const _0x165ce3=_0x46c6a8;if(!$gameSystem[_0x165ce3(0x33c)]())return;const _0x1533de=this[_0x165ce3(0x62d)]();if(!_0x1533de)return;this[_0x165ce3(0x4ec)]()&&(_0x42f968*=-0x1,_0x3030dc*=-0x1),_0x1533de['startSkew'](_0x42f968,_0x3030dc,_0x410c4c,_0x3fe56f);},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x5d0)]=function(_0x2e0459,_0x4c5d80,_0x2d51b7,_0x3afc31){const _0x49488a=_0x46c6a8;if(!$gameSystem[_0x49488a(0x33c)]())return;const _0x3ec5ee=this[_0x49488a(0x62d)]();if(!_0x3ec5ee)return;_0x3ec5ee[_0x49488a(0x48d)](_0x2e0459,_0x4c5d80,_0x2d51b7,_0x3afc31);},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x7e0)]=function(_0x580971,_0x531750,_0x539596){const _0x3d0e85=_0x46c6a8;if(!$gameSystem[_0x3d0e85(0x33c)]())return;const _0x3871f8=this[_0x3d0e85(0x62d)]();if(!_0x3871f8)return;_0x3871f8[_0x3d0e85(0x58f)](_0x580971,_0x531750,_0x539596);},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x756)]=function(){const _0x11947e=_0x46c6a8,_0x40e8d9=!!this[_0x11947e(0xa0b)];this['_freezeMotionData']=undefined,_0x40e8d9&&(this[_0x11947e(0x64a)](),this[_0x11947e(0xa3f)]());},Game_Battler[_0x46c6a8(0x669)]['clearFreezeMotionForWeapons']=function(){const _0x1ddf7c=_0x46c6a8;if(!SceneManager[_0x1ddf7c(0x849)]())return;const _0x2e14be=this['battler']();if(!_0x2e14be)return;let _0x4d5872=this[_0x1ddf7c(0x4ec)]()?_0x2e14be[_0x1ddf7c(0x3a0)]:_0x2e14be[_0x1ddf7c(0xaae)]['_weaponSprite'];_0x4d5872&&_0x4d5872[_0x1ddf7c(0x208)](0x0);},Game_Battler['prototype'][_0x46c6a8(0xba8)]=function(_0x391267,_0x3363bf,_0x30f95d){const _0x4f95e9=_0x46c6a8;if(this[_0x4f95e9(0x8de)]()&&!this[_0x4f95e9(0x548)]())return;let _0x1492d6=0x0,_0x4ff70a=0x0;_0x391267[_0x4f95e9(0x712)](/ATTACK[ ](\d+)/i)&&(_0x4ff70a=Number(RegExp['$1']),_0x4ff70a--);if(this[_0x4f95e9(0x4ec)]()){const _0x5aa827=this['weapons']();_0x1492d6=_0x5aa827[_0x4ff70a]?_0x5aa827[_0x4ff70a][_0x4f95e9(0x8f2)]:0x0;}else this[_0x4f95e9(0x8de)]()&&(_0x1492d6=this[_0x4f95e9(0xc00)]()['wtypeId']||0x0);const _0x3c205c=$dataSystem[_0x4f95e9(0x110)][_0x1492d6];_0x391267[_0x4f95e9(0x712)](/attack/i)&&(_0x391267=[_0x4f95e9(0x5bd),_0x4f95e9(0x380),_0x4f95e9(0x6a0)][_0x3c205c[_0x4f95e9(0xaa8)]]||_0x4f95e9(0x380)),this['_freezeMotionData']={'motionType':_0x391267,'weaponImageId':_0x3363bf?_0x3c205c[_0x4f95e9(0x67d)]:0x0,'pattern':_0x30f95d};},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xb6f)]=function(_0x89ae7c){const _0x40395d=_0x46c6a8;if(!_0x89ae7c)return![];return _0x89ae7c[_0x40395d(0x8a2)]()===this[_0x40395d(0x8a2)]();},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x4ba)]=function(_0x5f48ee){const _0x49f540=_0x46c6a8;if(!_0x5f48ee)return![];return _0x5f48ee['opponentsUnit']()===this[_0x49f540(0x8a2)]();},Game_Battler[_0x46c6a8(0x669)]['hasStaticSvBattler']=function(){return![];},Game_Actor['prototype'][_0x46c6a8(0xa4b)]=function(){const _0x568728=_0x46c6a8;return this[_0x568728(0x4f8)]()['match'](/\$/i);},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0xa4b)]=function(){const _0xecfa0=_0x46c6a8;return this[_0xecfa0(0x548)]()&&this[_0xecfa0(0x295)]()[_0xecfa0(0x712)](/\$/i);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x184)]=Game_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x208)],Game_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x208)]=function(_0x19bc1b){const _0x3e075c=_0x46c6a8;VisuMZ[_0x3e075c(0xa74)][_0x3e075c(0x184)][_0x3e075c(0x515)](this,_0x19bc1b),this['initBattlePortrait']();},Game_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x21d)]=function(){const _0x37d14e=_0x46c6a8;this[_0x37d14e(0x644)]='',this[_0x37d14e(0x185)]()&&this[_0x37d14e(0x185)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x37d14e(0x644)]=String(RegExp['$1']));},Game_Actor['prototype']['getBattlePortraitFilename']=function(){const _0x5a6b36=_0x46c6a8;if(this[_0x5a6b36(0x9fe)]()!=='')return this['getBattlePortrait']();else{if(Imported[_0x5a6b36(0xc32)]&&this[_0x5a6b36(0x65d)]()!=='')return this[_0x5a6b36(0x65d)]();}return'';},Game_Actor['prototype'][_0x46c6a8(0x9fe)]=function(){const _0x2a360c=_0x46c6a8;if(this[_0x2a360c(0x644)]===undefined)this[_0x2a360c(0x21d)]();return this[_0x2a360c(0x644)];},Game_Actor['prototype']['setBattlePortrait']=function(_0x41aed7){const _0x3bd662=_0x46c6a8;if(this['_battlePortrait']===undefined)this[_0x3bd662(0x21d)]();this[_0x3bd662(0x644)]=_0x41aed7;if(SceneManager[_0x3bd662(0x849)]()&&$gameParty[_0x3bd662(0x198)]()[_0x3bd662(0x4a3)](this)){const _0x39643f=SceneManager[_0x3bd662(0x7a7)]['_statusWindow'];_0x39643f&&_0x39643f['refreshActorPortrait'](this);}},Game_Actor[_0x46c6a8(0x669)]['isSpriteVisible']=function(){return!![];},Game_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x39b)]=function(){const _0x1205c3=_0x46c6a8;if(!this[_0x1205c3(0x3d3)]()&&BattleManager[_0x1205c3(0x6d9)])return!![];return Game_Battler['prototype'][_0x1205c3(0x39b)][_0x1205c3(0x515)](this);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x491)]=Game_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x147)],Game_Actor[_0x46c6a8(0x669)]['makeActionList']=function(){const _0x43feb4=_0x46c6a8;if(BattleManager[_0x43feb4(0x6d9)]&&!ConfigManager[_0x43feb4(0x6fe)])return this['makeActionListAutoAttack']();else{return VisuMZ['BattleCore'][_0x43feb4(0x491)][_0x43feb4(0x515)](this);;}},Game_Actor['prototype']['makeActionListAutoAttack']=function(){const _0x502131=_0x46c6a8,_0x2ebc1b=[],_0x4e34d1=new Game_Action(this);return _0x4e34d1['setAttack'](),_0x2ebc1b[_0x502131(0x78c)](_0x4e34d1),_0x2ebc1b;},Game_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x8e7)]=function(){const _0x10e876=_0x46c6a8;return this[_0x10e876(0x4ea)]()[_0x10e876(0xb03)][_0x10e876(0x712)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x10e876(0x7cb)](/[\r\n]+/):VisuMZ[_0x10e876(0xa74)]['Settings'][_0x10e876(0x17a)]['BattleCmdList'];},Game_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x3f9)]=function(){const _0x630781=_0x46c6a8;if(this[_0x630781(0xba9)]['svAnchorX']!==undefined)return this[_0x630781(0xba9)]['svAnchorX'];return this['actor']()[_0x630781(0xb03)][_0x630781(0x712)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x630781(0xba9)][_0x630781(0x5d2)]=eval(RegExp['$1']),this[_0x630781(0xba9)][_0x630781(0x5e8)]=eval(RegExp['$2'])):this[_0x630781(0xba9)][_0x630781(0x5d2)]=Game_Battler[_0x630781(0x669)][_0x630781(0x3f9)][_0x630781(0x515)](this),this['_cache']['svAnchorX'];},Game_Actor['prototype'][_0x46c6a8(0x32f)]=function(){const _0x2b1143=_0x46c6a8;if(this[_0x2b1143(0xba9)][_0x2b1143(0x5e8)]!==undefined)return this['_cache'][_0x2b1143(0x5e8)];return this[_0x2b1143(0x185)]()['note'][_0x2b1143(0x712)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x2b1143(0xba9)][_0x2b1143(0x5d2)]=eval(RegExp['$1']),this[_0x2b1143(0xba9)]['svAnchorY']=eval(RegExp['$2'])):this['_cache'][_0x2b1143(0x5e8)]=Game_Battler[_0x2b1143(0x669)][_0x2b1143(0x32f)][_0x2b1143(0x515)](this),this[_0x2b1143(0xba9)][_0x2b1143(0x5e8)];},Game_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x71c)]=function(){const _0x4d5459=_0x46c6a8;if(this[_0x4d5459(0xba9)][_0x4d5459(0x47e)]!==undefined)return this[_0x4d5459(0xba9)][_0x4d5459(0x47e)];if(this[_0x4d5459(0x185)]()[_0x4d5459(0xb03)][_0x4d5459(0x712)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x4d5459(0xba9)]['svShadow']=!![];else this['actor']()[_0x4d5459(0xb03)]['match'](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x4d5459(0xba9)][_0x4d5459(0x47e)]=![]:this[_0x4d5459(0xba9)][_0x4d5459(0x47e)]=Game_Battler['prototype']['svBattlerShadowVisible'][_0x4d5459(0x515)](this);return this['_cache']['svShadow'];},Game_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x603)]=function(){const _0x34de92=_0x46c6a8;return VisuMZ[_0x34de92(0xa74)][_0x34de92(0x154)][_0x34de92(0xa6f)][_0x34de92(0x609)];},Game_Actor['prototype'][_0x46c6a8(0x658)]=function(){const _0x222142=_0x46c6a8,_0x31e3da=this['weapons'](),_0x3cb81e=_0x31e3da[0x0]?_0x31e3da[0x0][_0x222142(0x8f2)]:0x0,_0x16be3d=$dataSystem[_0x222142(0x110)][_0x3cb81e];_0x16be3d&&this[_0x222142(0xb51)](_0x16be3d[_0x222142(0x67d)]);},Game_Actor[_0x46c6a8(0x669)]['performAction']=function(_0xca8393){const _0x3d2b82=_0x46c6a8;Game_Battler[_0x3d2b82(0x669)][_0x3d2b82(0x1ee)]['call'](this,_0xca8393),this['performActionMotions'](_0xca8393);},Game_Actor['prototype'][_0x46c6a8(0x740)]=function(){const _0x39fe7f=_0x46c6a8,_0x3062ad=this[_0x39fe7f(0x363)](),_0x177100=_0x3062ad[0x0]?_0x3062ad[0x0][_0x39fe7f(0x8f2)]:0x0;return $dataSystem[_0x39fe7f(0x110)][_0x177100];},Game_Actor['prototype'][_0x46c6a8(0x32c)]=function(_0x3701bc){const _0x1522ab=_0x46c6a8;_0x3701bc=_0x3701bc||0x1,_0x3701bc--;const _0x1ea3a2=this[_0x1522ab(0x363)]();return _0x1ea3a2[_0x3701bc]?_0x1ea3a2[_0x3701bc][_0x1522ab(0x815)]:0x0;},Game_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x1de)]=function(_0x125351){const _0x110a6e=_0x46c6a8;_0x125351=_0x125351||0x1,_0x125351--;const _0x52d689=this[_0x110a6e(0x363)](),_0x21053c=_0x52d689[_0x125351]?_0x52d689[_0x125351][_0x110a6e(0x8f2)]:0x0;return $dataSystem['attackMotions'][_0x21053c];},Game_Actor['prototype'][_0x46c6a8(0xab5)]=function(_0x1469f8){const _0x196beb=_0x46c6a8;_0x1469f8=_0x1469f8||0x1,_0x1469f8--;const _0x332ebb=this[_0x196beb(0x363)](),_0xe3bab3=_0x332ebb[_0x1469f8]?_0x332ebb[_0x1469f8]['wtypeId']:0x0,_0x299718=$dataSystem[_0x196beb(0x110)][_0xe3bab3];if(_0x299718){if(_0x299718['type']===0x0)this[_0x196beb(0x191)]('thrust');else{if(_0x299718[_0x196beb(0xaa8)]===0x1)this[_0x196beb(0x191)](_0x196beb(0x380));else _0x299718[_0x196beb(0xaa8)]===0x2&&this[_0x196beb(0x191)](_0x196beb(0x6a0));}this[_0x196beb(0xb51)](_0x299718[_0x196beb(0x67d)]);}},Game_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x397)]=function(_0x544757){const _0x31fb91=_0x46c6a8;if(this[_0x31fb91(0x4ec)]()){const _0x47876b=this[_0x31fb91(0x363)]();if(_0x47876b[_0x31fb91(0x50d)]>0x0){const _0x36bfae=_0x47876b[_0x544757];if(_0x36bfae)_0x544757=this['equips']()['indexOf'](_0x36bfae);}}this[_0x31fb91(0xc39)]=_0x544757||0x0,this[_0x31fb91(0xba9)]={};},Game_Battler[_0x46c6a8(0x669)]['nextActiveWeaponSlot']=function(){const _0x407d89=_0x46c6a8;this[_0x407d89(0xc39)]=this['_activeWeaponSlot']||0x0,this[_0x407d89(0xc39)]++,this[_0x407d89(0xba9)]={};},Game_Battler['prototype'][_0x46c6a8(0x6d1)]=function(){const _0x631be9=_0x46c6a8;this[_0x631be9(0xc39)]=undefined,this[_0x631be9(0xba9)]={};},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xbb3)]=Game_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x789)],Game_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x789)]=function(){const _0x4c9821=_0x46c6a8;let _0x58fc72=VisuMZ['BattleCore']['Game_Actor_equips']['call'](this);if(this['_tempEquipCheck'])return _0x58fc72;if(this[_0x4c9821(0xc39)]!==undefined){this['_tempEquipCheck']=!![];const _0x138045=this[_0x4c9821(0x926)]();for(let _0x269874=0x0;_0x269874<_0x138045[_0x4c9821(0x50d)];_0x269874++){_0x138045[_0x269874]===0x1&&this[_0x4c9821(0xc39)]!==_0x269874&&(_0x58fc72[_0x269874]=null);}this[_0x4c9821(0x4b8)]=undefined;}return _0x58fc72;},VisuMZ['BattleCore'][_0x46c6a8(0xc41)]=Game_BattlerBase['prototype'][_0x46c6a8(0x4c3)],Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x4c3)]=function(_0x1cdbe3){const _0x16f075=_0x46c6a8;this[_0x16f075(0xc39)]!==undefined&&[0x0,0x1]['includes'](_0x1cdbe3)&&(this['_tempEquipCheck']=!![]);const _0x277844=VisuMZ[_0x16f075(0xa74)][_0x16f075(0xc41)][_0x16f075(0x515)](this,_0x1cdbe3);return this[_0x16f075(0xc39)]!==undefined&&[0x0,0x1]['includes'](_0x1cdbe3)&&(this[_0x16f075(0x4b8)]=![]),_0x277844;},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x75c)]=function(_0x53c696){const _0x2e3f3d=_0x46c6a8;return _0x53c696[_0x2e3f3d(0x4ec)]()?_0x53c696[_0x2e3f3d(0x363)]()[_0x2e3f3d(0x50d)]||0x1:0x1;},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x1fe)]=function(_0x468f09,_0x1f8ecd){const _0xcf9bf9=_0x46c6a8;_0x468f09&&_0x468f09['isActor']()&&_0x468f09['setActiveWeaponSlot'](_0x1f8ecd),this[_0xcf9bf9(0xbb4)]();},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0xa48)]=function(_0x1ce4cf){const _0x265c72=_0x46c6a8;_0x1ce4cf&&_0x1ce4cf[_0x265c72(0x4ec)]()&&_0x1ce4cf[_0x265c72(0x6d1)](),this[_0x265c72(0xbb4)]();},Game_Actor['prototype'][_0x46c6a8(0xb8f)]=function(){const _0x2d5a73=_0x46c6a8;let _0x48b08e=_0x2d5a73(0xb8f);if(this[_0x2d5a73(0x500)](_0x48b08e))return this[_0x2d5a73(0xba9)][_0x48b08e];return this['_cache'][_0x48b08e]=this[_0x2d5a73(0xa3d)](this['actor']()),this[_0x2d5a73(0xba9)][_0x48b08e];},Game_Actor['prototype'][_0x46c6a8(0xaba)]=function(){const _0x2cfc07=_0x46c6a8;let _0x35dc96=_0x2cfc07(0xaba);if(this[_0x2cfc07(0x500)](_0x35dc96))return this[_0x2cfc07(0xba9)][_0x35dc96];return this[_0x2cfc07(0xba9)][_0x35dc96]=this['createBattleUIOffsetY'](this[_0x2cfc07(0x185)]()),this[_0x2cfc07(0xba9)][_0x35dc96];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xbb1)]=Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x208)],Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x208)]=function(_0x373191,_0x579011,_0x31170d){const _0x373167=_0x46c6a8;_0x373191=DataManager[_0x373167(0x5b6)](_0x373191),VisuMZ['BattleCore']['Game_Enemy_setup'][_0x373167(0x515)](this,_0x373191,_0x579011,_0x31170d),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x373167(0x402)](),this[_0x373167(0xaac)](),this['setupBattleCoreData'](),this[_0x373167(0xb5e)](),Imported[_0x373167(0x21a)]&&this['recoverAll']();},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0xaac)]=function(){const _0x5ddf70=_0x46c6a8,_0x9ea4dc=VisuMZ[_0x5ddf70(0xa74)][_0x5ddf70(0x154)][_0x5ddf70(0x6de)];this[_0x5ddf70(0x7c1)]=_0x9ea4dc[_0x5ddf70(0x999)],this[_0x5ddf70(0xb62)]={},this[_0x5ddf70(0xb9d)]();},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x43f)]=function(){const _0x2f6465=_0x46c6a8,_0x586750=VisuMZ[_0x2f6465(0xa74)]['Settings'][_0x2f6465(0x6de)],_0x310f60=this[_0x2f6465(0x78f)]()[_0x2f6465(0xb03)];this[_0x2f6465(0xb62)]={'name':'','wtypeId':_0x586750[_0x2f6465(0x649)],'collapse':_0x586750[_0x2f6465(0xb77)],'motionIdle':_0x586750['MotionIdle'],'width':_0x586750['Width']||0x40,'height':_0x586750['Height']||0x40,'anchorX':_0x586750[_0x2f6465(0x162)]||0x0,'anchorY':_0x586750[_0x2f6465(0xbba)]||0x0,'shadow':_0x586750[_0x2f6465(0x231)]};_0x310f60[_0x2f6465(0x712)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this['_attackAnimationId']=Number(RegExp['$1']));const _0x3e042b=this[_0x2f6465(0xb62)];if(_0x310f60['match'](/<SIDEVIEW BATTLER: (.*)>/i))_0x3e042b['name']=String(RegExp['$1']);else{if(_0x310f60[_0x2f6465(0x712)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x4b7e68=String(RegExp['$1'])[_0x2f6465(0x7cb)](/[\r\n]+/)['remove']('');_0x3e042b[_0x2f6465(0x106)]=DataManager['processRandomizedData'](_0x4b7e68);}}_0x310f60[_0x2f6465(0x712)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x3e042b['anchorX']=eval(RegExp['$1']),_0x3e042b[_0x2f6465(0x636)]=eval(RegExp['$2']));if(_0x310f60[_0x2f6465(0x712)](/<SIDEVIEW COLLAPSE>/i))_0x3e042b[_0x2f6465(0xb6d)]=!![];else _0x310f60[_0x2f6465(0x712)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x3e042b[_0x2f6465(0xb6d)]=![]);if(_0x310f60[_0x2f6465(0x712)](/<SIDEVIEW SHOW SHADOW>/i))_0x3e042b[_0x2f6465(0x5c7)]=!![];else _0x310f60[_0x2f6465(0x712)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x3e042b[_0x2f6465(0x5c7)]=![]);if(_0x310f60[_0x2f6465(0x712)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x3e042b['motionIdle']=String(RegExp['$1'])[_0x2f6465(0x4ed)]()['trim']();else{if(_0x310f60[_0x2f6465(0x712)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x250c8e=String(RegExp['$1'])[_0x2f6465(0x7cb)](/[\r\n]+/)[_0x2f6465(0x45d)]('');_0x3e042b[_0x2f6465(0x679)]=DataManager[_0x2f6465(0x70b)](_0x250c8e);}}_0x310f60['match'](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x3e042b[_0x2f6465(0x1e1)]=Number(RegExp['$1']),_0x3e042b[_0x2f6465(0x1fc)]=Number(RegExp['$2']));if(_0x310f60[_0x2f6465(0x712)](/<SIDEVIEW WEAPON: (.*)>/i))_0x3e042b['wtypeId']=DataManager[_0x2f6465(0xb57)](RegExp['$1']);else{if(_0x310f60[_0x2f6465(0x712)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x1082f0=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x2f6465(0x45d)](''),_0x17a1e2=DataManager[_0x2f6465(0x70b)](_0x1082f0);_0x3e042b['wtypeId']=DataManager[_0x2f6465(0xb57)](_0x17a1e2);}}if(Imported[_0x2f6465(0x21a)]){const _0x351ae0=this[_0x2f6465(0x4f3)]();for(const _0x3e530c of _0x351ae0){const _0x7670d8=this[_0x2f6465(0x910)](_0x3e530c)['Name'][_0x2f6465(0x85e)]()[_0x2f6465(0xa28)](),_0x346359=_0x3e530c[_0x2f6465(0x85e)]()[_0x2f6465(0xa28)]();if(_0x310f60[_0x2f6465(0x712)](VisuMZ[_0x2f6465(0xbea)][_0x2f6465(0x710)][_0x2f6465(0x6f9)[_0x2f6465(0x1ba)](_0x346359,_0x7670d8)]))_0x3e042b[_0x2f6465(0x106)]=String(RegExp['$1']);else{if(_0x310f60[_0x2f6465(0x712)](VisuMZ[_0x2f6465(0xbea)][_0x2f6465(0x710)][_0x2f6465(0x1e9)[_0x2f6465(0x1ba)](_0x346359,_0x7670d8)])){const _0x586d89=String(RegExp['$1'])[_0x2f6465(0x7cb)](/[\r\n]+/)[_0x2f6465(0x45d)]('');_0x3e042b[_0x2f6465(0x106)]=DataManager['processRandomizedData'](_0x586d89);}}if(_0x310f60[_0x2f6465(0x712)](VisuMZ[_0x2f6465(0xbea)][_0x2f6465(0x710)]['SvWeaponSolo-%1-%2'['format'](_0x346359,_0x7670d8)]))_0x3e042b['wtypeId']=DataManager[_0x2f6465(0xb57)](RegExp['$1']);else{if(_0x310f60[_0x2f6465(0x712)](VisuMZ['ElementStatusCore']['RegExp']['SvWeaponMass-%1-%2'[_0x2f6465(0x1ba)](_0x346359,_0x7670d8)])){const _0xfdf56f=String(RegExp['$1'])[_0x2f6465(0x7cb)](/[\r\n]+/)[_0x2f6465(0x45d)](''),_0x480ec9=DataManager['processRandomizedData'](_0xfdf56f);_0x3e042b[_0x2f6465(0x8f2)]=DataManager['getWtypeIdWithName'](_0x480ec9);}}if(_0x310f60['match'](VisuMZ[_0x2f6465(0xbea)][_0x2f6465(0x710)][_0x2f6465(0x28e)[_0x2f6465(0x1ba)](_0x346359,_0x7670d8)]))_0x3e042b[_0x2f6465(0x679)]=String(RegExp['$1'])[_0x2f6465(0x4ed)]()[_0x2f6465(0xa28)]();else{if(_0x310f60['match'](VisuMZ[_0x2f6465(0xbea)]['RegExp'][_0x2f6465(0xb52)['format'](_0x346359,_0x7670d8)])){const _0x7e7bb1=String(RegExp['$1'])[_0x2f6465(0x7cb)](/[\r\n]+/)[_0x2f6465(0x45d)]('');_0x3e042b[_0x2f6465(0x679)]=DataManager[_0x2f6465(0x70b)](_0x7e7bb1);}}}}},Game_Enemy['prototype']['attackAnimationId1']=function(){return this['_attackAnimationId']||0x0;},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x9d1)]=function(){return this['attackAnimationId1']();},Game_Enemy[_0x46c6a8(0x669)]['attackAnimationIdSlot']=function(_0x5d33e1){const _0xe50d26=_0x46c6a8;return this[_0xe50d26(0x722)]();},Game_Enemy['prototype'][_0x46c6a8(0xb07)]=function(){const _0x3c1274=_0x46c6a8;if(this['enemy']()['note'][_0x3c1274(0x712)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler['prototype'][_0x3c1274(0xb07)][_0x3c1274(0x515)](this);},Game_Enemy['prototype'][_0x46c6a8(0x438)]=function(){const _0x28a579=_0x46c6a8;if(this[_0x28a579(0x78f)]()[_0x28a579(0xb03)][_0x28a579(0x712)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x84f)]=function(){const _0x4661a4=_0x46c6a8,_0x15bcd0=[];for(const _0x2872b0 of this['enemy']()[_0x4661a4(0x991)]){const _0x484410=$dataSkills[_0x2872b0[_0x4661a4(0x595)]];if(_0x484410&&!_0x15bcd0['includes'](_0x484410))_0x15bcd0[_0x4661a4(0x78c)](_0x484410);}return _0x15bcd0;},Game_Enemy['prototype'][_0x46c6a8(0xb8f)]=function(){const _0x2fe4c5=_0x46c6a8;let _0x392e92=_0x2fe4c5(0xb8f);if(this['checkCacheKey'](_0x392e92))return this['_cache'][_0x392e92];return this[_0x2fe4c5(0xba9)][_0x392e92]=this['createBattleUIOffsetX'](this[_0x2fe4c5(0x78f)]()),this[_0x2fe4c5(0xba9)][_0x392e92];},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0xaba)]=function(){const _0x5331bf=_0x46c6a8;let _0xfaafe2='battleUIOffsetY';if(this[_0x5331bf(0x500)](_0xfaafe2))return this[_0x5331bf(0xba9)][_0xfaafe2];return this['_cache'][_0xfaafe2]=this[_0x5331bf(0xa57)](this[_0x5331bf(0x78f)]()),this['_cache'][_0xfaafe2];},Game_Enemy[_0x46c6a8(0x669)]['svBattlerData']=function(){const _0x416f77=_0x46c6a8;if(this[_0x416f77(0xb62)]!==undefined)return this['_svBattlerData'];return this['setupBattleCoreData'](),this[_0x416f77(0xb62)];},Game_Enemy[_0x46c6a8(0x669)]['hasSvBattler']=function(){const _0x577f7f=_0x46c6a8;return this[_0x577f7f(0xc00)]()['name']!=='';},Game_Enemy[_0x46c6a8(0x669)]['svBattlerName']=function(){const _0x328c29=_0x46c6a8;return this['svBattlerData']()[_0x328c29(0x106)];},Game_Enemy[_0x46c6a8(0x669)]['battlerSmoothImage']=function(){const _0x6b2f59=_0x46c6a8;return this[_0x6b2f59(0x548)]()?VisuMZ[_0x6b2f59(0xa74)][_0x6b2f59(0x154)][_0x6b2f59(0xa6f)]['SmoothImage']:VisuMZ[_0x6b2f59(0xa74)]['Settings'][_0x6b2f59(0x6de)][_0x6b2f59(0x609)];},Game_Enemy['prototype'][_0x46c6a8(0x1ee)]=function(_0x1b9dcd){const _0x37930f=_0x46c6a8;Game_Battler[_0x37930f(0x669)][_0x37930f(0x1ee)][_0x37930f(0x515)](this,_0x1b9dcd);if(this[_0x37930f(0x548)]())this[_0x37930f(0x344)](_0x1b9dcd);},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x9e9)]=function(){const _0x1b1bad=_0x46c6a8,_0x375f13=this[_0x1b1bad(0xc00)]()[_0x1b1bad(0x8f2)]||0x0,_0x9ac284=$dataSystem[_0x1b1bad(0x110)][_0x375f13];if(_0x9ac284){if(_0x9ac284[_0x1b1bad(0xaa8)]===0x0)this[_0x1b1bad(0x191)](_0x1b1bad(0x5bd));else{if(_0x9ac284['type']===0x1)this[_0x1b1bad(0x191)]('swing');else _0x9ac284[_0x1b1bad(0xaa8)]===0x2&&this[_0x1b1bad(0x191)](_0x1b1bad(0x6a0));}}},Game_Enemy['prototype'][_0x46c6a8(0x658)]=function(){const _0x447a81=_0x46c6a8,_0x27d9b9=this[_0x447a81(0xc00)]()['wtypeId']||0x0,_0x45c8fb=$dataSystem[_0x447a81(0x110)][_0x27d9b9];_0x45c8fb&&this[_0x447a81(0xb51)](_0x45c8fb[_0x447a81(0x67d)]);},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x740)]=function(){const _0x564a9b=_0x46c6a8,_0x498a4d=this[_0x564a9b(0xc00)]()[_0x564a9b(0x8f2)]||0x0;return $dataSystem['attackMotions'][_0x498a4d];},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x1de)]=function(_0x2814dd){const _0x3b54f6=_0x46c6a8;return this[_0x3b54f6(0x740)]();},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x833)]=function(){const _0x4d702a=_0x46c6a8;Game_Battler[_0x4d702a(0x669)][_0x4d702a(0x833)]['call'](this),this[_0x4d702a(0x591)]()&&this['hasSvBattler']()&&this[_0x4d702a(0x191)](_0x4d702a(0xaca)),SoundManager[_0x4d702a(0x30d)]();},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x956)]=function(){const _0x356e55=_0x46c6a8;Game_Battler[_0x356e55(0x669)]['performEvasion'][_0x356e55(0x515)](this),this[_0x356e55(0x191)](_0x356e55(0x929));},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x37c)]=function(){const _0x53cbb0=_0x46c6a8;Game_Battler[_0x53cbb0(0x669)]['performMagicEvasion'][_0x53cbb0(0x515)](this),this['requestMotion'](_0x53cbb0(0x929));},Game_Enemy[_0x46c6a8(0x669)]['performCounter']=function(){const _0x5777f6=_0x46c6a8;Game_Battler['prototype'][_0x5777f6(0x8c7)]['call'](this),this[_0x5777f6(0x9e9)]();},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0xa26)]=function(){const _0x3c032f=_0x46c6a8;if(this[_0x3c032f(0x548)]()){if(this[_0x3c032f(0x396)]()>=0x1)return!![];return this['svBattlerData']()[_0x3c032f(0xb6d)];}else return!![];},Game_Enemy[_0x46c6a8(0x669)]['svBattlerAnchorX']=function(){const _0x546b9c=_0x46c6a8;return this[_0x546b9c(0xc00)]()[_0x546b9c(0x862)];},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x32f)]=function(){const _0x4d2a56=_0x46c6a8;return this[_0x4d2a56(0xc00)]()[_0x4d2a56(0x636)];},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x71c)]=function(){const _0x240dcd=_0x46c6a8;return this[_0x240dcd(0xc00)]()[_0x240dcd(0x5c7)];},VisuMZ[_0x46c6a8(0xa74)]['Game_Enemy_transform']=Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x242)],Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x242)]=function(_0x54b27a){const _0x440c38=_0x46c6a8;VisuMZ[_0x440c38(0xa74)][_0x440c38(0x5f6)][_0x440c38(0x515)](this,_0x54b27a),this[_0x440c38(0xaac)](),this[_0x440c38(0x43f)]();const _0x1cd0f3=this[_0x440c38(0x62d)]();_0x1cd0f3&&(_0x1cd0f3[_0x440c38(0xc30)]=undefined,_0x1cd0f3[_0x440c38(0x585)](this));},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0xb9d)]=function(){const _0x622337=_0x46c6a8,_0x16cbb7=VisuMZ[_0x622337(0xa74)]['Settings']['Enemy'];this['_nameTempVisibleDuration']=_0x16cbb7['NameDamageVisibility']??0x0;},Game_Enemy['prototype']['isNameTemporarilyVisible']=function(){const _0x4d1a1a=_0x46c6a8;return this[_0x4d1a1a(0x69b)]&&this[_0x4d1a1a(0x69b)]>0x0;},Game_Enemy[_0x46c6a8(0x669)]['updateNameTempVisibility']=function(){const _0x3a432f=_0x46c6a8;this['_nameTempVisibleDuration']&&this[_0x3a432f(0x69b)]>0x0&&this[_0x3a432f(0x69b)]--;},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0xb8c)]=function(){const _0x3c2f95=_0x46c6a8;this[_0x3c2f95(0x69b)]=0x0;},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0xb5e)]=function(){const _0x4ec9a0=_0x46c6a8;this[_0x4ec9a0(0x28c)]();const _0xceba3f=this['enemy']()[_0x4ec9a0(0xb03)]||'';if(_0xceba3f['match'](/<ASPECT NAME:[ ](.*)>/i)){const _0x98ddfe=String(RegExp['$1']);this[_0x4ec9a0(0x7f6)]()[_0x4ec9a0(0x106)]=_0x98ddfe[_0x4ec9a0(0x1ba)](this[_0x4ec9a0(0x392)]());}_0xceba3f['match'](/<ASPECT ICON:[ ](\d+)>/i)&&(this['getAspectData']()['iconIndex']=Number(RegExp['$1'])),_0xceba3f[_0x4ec9a0(0x712)](/<ASPECT COLOR:[ ](.*)>/i)&&(this['getAspectData']()['nameColor']=String(RegExp['$1'])),_0xceba3f['match'](/<ASPECT DESCRIPTION>\s*([\s\S]*)\s*<\/ASPECT DESCRIPTION>/i)&&(this[_0x4ec9a0(0x7f6)]()[_0x4ec9a0(0x56a)]=String(RegExp['$1']));},Game_Enemy[_0x46c6a8(0x669)]['clearBattleCoreAspects']=function(){const _0x49e66e=_0x46c6a8,_0x552969=VisuMZ[_0x49e66e(0xa74)][_0x49e66e(0x154)][_0x49e66e(0x6de)][_0x49e66e(0x7b4)]??_0x49e66e(0xc55);this[_0x49e66e(0x67b)]={'name':_0x552969[_0x49e66e(0x1ba)](this['originalName']()),'iconIndex':VisuMZ[_0x49e66e(0xa74)][_0x49e66e(0x154)][_0x49e66e(0x6de)][_0x49e66e(0x9ee)]??0x1a,'nameColor':VisuMZ[_0x49e66e(0xa74)]['Settings'][_0x49e66e(0x6de)][_0x49e66e(0x65b)]??'2','description':''};},Game_Enemy['prototype'][_0x46c6a8(0x7f6)]=function(){const _0x21844b=_0x46c6a8;if(this[_0x21844b(0x67b)]===undefined)this['setupBattleCoreAspects']();return this[_0x21844b(0x67b)];},Game_Enemy[_0x46c6a8(0x669)]['hasAspectData']=function(){const _0x24c44c=_0x46c6a8;return(this['getAspectData']()[_0x24c44c(0x56a)]||'')[_0x24c44c(0x50d)]>0x0;},Game_BattlerBase['prototype'][_0x46c6a8(0x1dd)]=function(){const _0x17a174=_0x46c6a8;return VisuMZ[_0x17a174(0xa74)][_0x17a174(0x154)]['Damage']['PopupPosition'];},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x1dd)]=function(){const _0x5b9bbb=_0x46c6a8,_0x2d133c=this['enemy']()?this[_0x5b9bbb(0x78f)]()[_0x5b9bbb(0xb03)]||'':'';if(_0x2d133c['match'](/<POPUP POSITION: HEAD>/i))return _0x5b9bbb(0x366);else{if(_0x2d133c['match'](/<POPUP POSITION: CENTER>/i))return'center';else{if(_0x2d133c[_0x5b9bbb(0x712)](/<POPUP POSITION: BASE>/i))return'base';}}return Game_BattlerBase[_0x5b9bbb(0x669)][_0x5b9bbb(0x1dd)][_0x5b9bbb(0x515)](this);},Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0xa35)]=function(){return 0x0;},Game_Enemy['prototype']['damagePopupOffsetX']=function(){const _0x4b4079=_0x46c6a8,_0x243b5a=this[_0x4b4079(0x78f)]()?this[_0x4b4079(0x78f)]()[_0x4b4079(0xb03)]||'':'';if(_0x243b5a['match'](/<POPUP OFFSET X: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x4b4079(0x669)][_0x4b4079(0xa35)][_0x4b4079(0x515)](this);},Game_BattlerBase['prototype']['damagePopupOffsetY']=function(){return 0x0;},Game_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x9b0)]=function(){const _0x2216fa=_0x46c6a8,_0x390bc6=this[_0x2216fa(0x78f)]()?this[_0x2216fa(0x78f)]()['note']||'':'';if(_0x390bc6[_0x2216fa(0x712)](/<POPUP OFFSET Y: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x2216fa(0x669)][_0x2216fa(0x9b0)][_0x2216fa(0x515)](this);},Game_Unit['prototype']['processBattleCoreJS']=function(_0xe8f4b4){const _0x3dc43a=_0x46c6a8;for(const _0x4933c2 of this[_0x3dc43a(0x24a)]()){if(_0x4933c2)_0x4933c2['processBattleCoreJS'](_0xe8f4b4);}},Game_Unit[_0x46c6a8(0x669)]['trueRandomTarget']=function(){const _0x167c28=_0x46c6a8,_0x2691e7=this[_0x167c28(0xa1f)]();return _0x2691e7[Math[_0x167c28(0xafb)](_0x2691e7['length'])];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x8b8)]=Game_Party[_0x46c6a8(0x669)][_0x46c6a8(0x727)],Game_Party[_0x46c6a8(0x669)][_0x46c6a8(0x727)]=function(_0x1b0516){const _0x2bc325=_0x46c6a8;VisuMZ['BattleCore']['Game_Party_addActor'][_0x2bc325(0x515)](this,_0x1b0516),BattleManager['refreshStatusWindow']();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x360)]=Game_Party[_0x46c6a8(0x669)]['removeActor'],Game_Party['prototype'][_0x46c6a8(0x40e)]=function(_0x156a50){const _0x5595f7=_0x46c6a8;VisuMZ[_0x5595f7(0xa74)][_0x5595f7(0x360)][_0x5595f7(0x515)](this,_0x156a50),BattleManager[_0x5595f7(0x3fd)]();},VisuMZ['BattleCore'][_0x46c6a8(0xb4a)]=Game_Troop[_0x46c6a8(0x669)][_0x46c6a8(0x208)],Game_Troop[_0x46c6a8(0x669)][_0x46c6a8(0x208)]=function(_0x28416b){const _0x5cbf2c=_0x46c6a8;$gameTemp[_0x5cbf2c(0x993)](),$gameTemp[_0x5cbf2c(0x4bb)](_0x28416b),VisuMZ[_0x5cbf2c(0xa74)][_0x5cbf2c(0xb4a)][_0x5cbf2c(0x515)](this,_0x28416b),this[_0x5cbf2c(0x2a6)]();},VisuMZ['BattleCore']['Game_Troop_expTotal']=Game_Troop[_0x46c6a8(0x669)][_0x46c6a8(0x5e2)],Game_Troop[_0x46c6a8(0x669)][_0x46c6a8(0x5e2)]=function(){const _0x5b4d9d=_0x46c6a8;let _0x1fd0d5=VisuMZ['BattleCore'][_0x5b4d9d(0x1ae)]['call'](this);return this[_0x5b4d9d(0x5e0)]&&(_0x1fd0d5*=this[_0x5b4d9d(0x5e0)]()),Math[_0x5b4d9d(0x182)](_0x1fd0d5);},Game_Troop['prototype']['expRate']=function(){return 0x1;},Game_Troop['prototype']['extendTroopMembers']=function(){const _0x471f56=_0x46c6a8,_0x1179ab=DataManager[_0x471f56(0x93d)](this[_0x471f56(0x5dd)]()['id']);if(_0x1179ab[_0x471f56(0x712)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x3144a2=RegExp['$1'][_0x471f56(0x7cb)](',')[_0x471f56(0x883)](_0x1b74ca=>Number(_0x1b74ca));this[_0x471f56(0xb7a)](),this[_0x471f56(0x949)](_0x3144a2);}},Game_Troop['prototype'][_0x46c6a8(0xb7a)]=function(){const _0x4b7725=_0x46c6a8;let _0x19825d=_0x4b7725(0x41b)+'\x0a';_0x19825d+=_0x4b7725(0x47b),Imported['VisuMZ_2_BattleSystemBTB']&&(VisuMZ['BattleSystemBTB']['version']<1.11&&(alert(_0x19825d[_0x4b7725(0x1ba)]('BTB')),SceneManager[_0x4b7725(0x761)]())),Imported[_0x4b7725(0x6d0)]&&(VisuMZ[_0x4b7725(0x786)][_0x4b7725(0x9d7)]<1.19&&(alert(_0x19825d['format']('CTB')),SceneManager[_0x4b7725(0x761)]())),Imported[_0x4b7725(0x14c)]&&(VisuMZ[_0x4b7725(0xbfb)][_0x4b7725(0x9d7)]<1.15&&(alert(_0x19825d[_0x4b7725(0x1ba)]('STB')),SceneManager[_0x4b7725(0x761)]()));},Game_Troop[_0x46c6a8(0x669)][_0x46c6a8(0x949)]=function(_0x8e049){const _0xccf7b2=_0x46c6a8;this[_0xccf7b2(0x9c2)]={};for(const _0x4e9993 of this[_0xccf7b2(0x24a)]()){if(!_0x4e9993)continue;_0x4e9993[_0xccf7b2(0x2fa)]('');}for(const _0x3eca53 of _0x8e049){const _0xdc90e4=$dataTroops[_0x3eca53];if(_0xdc90e4)this[_0xccf7b2(0x965)](_0xdc90e4);}this[_0xccf7b2(0x96e)]();},Game_Troop[_0x46c6a8(0x669)][_0x46c6a8(0x965)]=function(_0x107a21){const _0x34ce2a=_0x46c6a8;for(const _0x1c78d7 of _0x107a21['members']){if($dataEnemies[_0x1c78d7[_0x34ce2a(0xa4f)]]){const _0x1de03a=_0x1c78d7[_0x34ce2a(0xa4f)],_0x30cf2c=_0x1c78d7['x'],_0x317a11=_0x1c78d7['y'],_0x35205c=new Game_Enemy(_0x1de03a,_0x30cf2c,_0x317a11);_0x1c78d7[_0x34ce2a(0x982)]&&_0x35205c[_0x34ce2a(0x9dd)](),this[_0x34ce2a(0x97b)][_0x34ce2a(0x78c)](_0x35205c);}}},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x264)]=Game_Map[_0x46c6a8(0x669)][_0x46c6a8(0x20a)],Game_Map[_0x46c6a8(0x669)][_0x46c6a8(0x20a)]=function(){const _0x1e591e=_0x46c6a8;VisuMZ['BattleCore'][_0x1e591e(0x264)][_0x1e591e(0x515)](this),this[_0x1e591e(0x4df)]();},Game_Map[_0x46c6a8(0x669)][_0x46c6a8(0x4df)]=function(){const _0x46e147=_0x46c6a8;this['_regionBattleback1']={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x53106d=$dataMap['note'];if(!_0x53106d)return;const _0x162f7a=_0x53106d[_0x46e147(0x712)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x162f7a)for(const _0x2fb1d5 of _0x162f7a){_0x2fb1d5[_0x46e147(0x712)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x3c77a2=Number(RegExp['$1']),_0x13ff72=Number(RegExp['$2']),_0x9c7256=_0x13ff72===0x1?this[_0x46e147(0xbb2)]:this[_0x46e147(0x89d)],_0x979f79=String(RegExp['$3']);_0x9c7256[_0x3c77a2]=_0x979f79;}},VisuMZ['BattleCore'][_0x46c6a8(0xa6e)]=Game_Map[_0x46c6a8(0x669)][_0x46c6a8(0x927)],Game_Map[_0x46c6a8(0x669)][_0x46c6a8(0x927)]=function(){const _0xeabfbf=_0x46c6a8;if(!BattleManager[_0xeabfbf(0x6a3)]()){const _0x22ffd4=$gamePlayer[_0xeabfbf(0x6f6)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0xeabfbf(0xbb2)]&&this[_0xeabfbf(0xbb2)][_0x22ffd4])return this[_0xeabfbf(0xbb2)][_0x22ffd4];}return VisuMZ['BattleCore'][_0xeabfbf(0xa6e)][_0xeabfbf(0x515)](this);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x65a)]=Game_Map[_0x46c6a8(0x669)][_0x46c6a8(0x8f5)],Game_Map['prototype']['battleback2Name']=function(){const _0x34ef73=_0x46c6a8;if(!BattleManager[_0x34ef73(0x6a3)]()){const _0x15af0f=$gamePlayer[_0x34ef73(0x6f6)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x34ef73(0xbb2)]&&this[_0x34ef73(0x89d)][_0x15af0f])return this[_0x34ef73(0x89d)][_0x15af0f];}return VisuMZ[_0x34ef73(0xa74)][_0x34ef73(0x65a)]['call'](this);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x6ee)]=Game_Map[_0x46c6a8(0x669)][_0x46c6a8(0x11d)],Game_Map[_0x46c6a8(0x669)][_0x46c6a8(0x11d)]=function(){const _0x18de73=_0x46c6a8;let _0x93b093=JsonEx[_0x18de73(0x219)](VisuMZ[_0x18de73(0xa74)]['Game_Map_encounterList'][_0x18de73(0x515)](this));return VisuMZ[_0x18de73(0xa74)][_0x18de73(0x604)](_0x93b093);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x604)]=function(_0x3ffaef){const _0x500326=_0x46c6a8;var _0xb4897d,_0x42bd3a,_0x1bbef3;for(_0x1bbef3=_0x3ffaef[_0x500326(0x50d)]-0x1;_0x1bbef3>0x0;_0x1bbef3--){_0xb4897d=Math[_0x500326(0x2f2)](Math[_0x500326(0x758)]()*(_0x1bbef3+0x1)),_0x42bd3a=_0x3ffaef[_0x1bbef3],_0x3ffaef[_0x1bbef3]=_0x3ffaef[_0xb4897d],_0x3ffaef[_0xb4897d]=_0x42bd3a;}return _0x3ffaef;},VisuMZ['BattleCore'][_0x46c6a8(0xb71)]=Game_Interpreter[_0x46c6a8(0x669)][_0x46c6a8(0x8a1)],Game_Interpreter[_0x46c6a8(0x669)][_0x46c6a8(0x8a1)]=function(_0x203b5d){const _0x2e5dc7=_0x46c6a8;return $gameTemp['setLastPluginCommandInterpreter'](this),VisuMZ['BattleCore'][_0x2e5dc7(0xb71)][_0x2e5dc7(0x515)](this,_0x203b5d);},VisuMZ[_0x46c6a8(0xa74)]['Game_Interpreter_updateWaitMode']=Game_Interpreter[_0x46c6a8(0x669)][_0x46c6a8(0x290)],Game_Interpreter[_0x46c6a8(0x669)][_0x46c6a8(0x290)]=function(){const _0x511758=_0x46c6a8;if(SceneManager[_0x511758(0x849)]())switch(this[_0x511758(0x8e0)]){case'battleAngle':if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x511758(0x851)]()[_0x511758(0x890)]>0x0)return!![];this[_0x511758(0x8e0)]='';}break;case _0x511758(0x8a7):if(BattleManager[_0x511758(0x81e)]['isAnimationPlaying']())return!![];this['_waitMode']='';break;case _0x511758(0xb92):if(BattleManager['_spriteset'][_0x511758(0x19f)]())return!![];this[_0x511758(0x8e0)]='';break;case _0x511758(0x6f4):if(Imported[_0x511758(0x538)]){if($gameScreen[_0x511758(0x851)]()[_0x511758(0xb72)]>0x0)return!![];if($gameScreen[_0x511758(0x851)]()[_0x511758(0xc2f)]>0x0)return!![];this[_0x511758(0x8e0)]='';}break;case'battleEffect':if(BattleManager[_0x511758(0x81e)][_0x511758(0x493)]())return!![];this[_0x511758(0x8e0)]='';break;case _0x511758(0xba6):if(BattleManager['_spriteset'][_0x511758(0x136)]())return!![];this['_waitMode']='';break;case'battleJump':if(BattleManager['_spriteset'][_0x511758(0x1c8)]())return!![];this[_0x511758(0x8e0)]='';break;case _0x511758(0x7be):if(BattleManager[_0x511758(0x68b)]['isBusy']())return!![];this['_waitMode']='';break;case _0x511758(0x5da):if(BattleManager[_0x511758(0x81e)][_0x511758(0x150)]())return!![];this[_0x511758(0x8e0)]='';break;case'battleOpacity':if(BattleManager['_spriteset'][_0x511758(0x1cd)]())return!![];this[_0x511758(0x8e0)]='';break;case _0x511758(0x59c):if(BattleManager['_spriteset']['isAnyoneGrowing']())return!![];this[_0x511758(0x8e0)]='';break;case _0x511758(0xbfd):if(BattleManager['_spriteset'][_0x511758(0x2b5)]())return!![];this['_waitMode']='';break;case _0x511758(0x625):if(Imported[_0x511758(0x35b)]){if(BattleManager['_spriteset'][_0x511758(0x9b3)]())return!![];this[_0x511758(0x8e0)]='';}break;case _0x511758(0xaa9):if(Imported[_0x511758(0x538)]){if($gameScreen['battleCameraData']()[_0x511758(0x2a4)]>0x0)return!![];this['_waitMode']='';}break;case'battleSpin':if(BattleManager['_spriteset'][_0x511758(0x605)]())return!![];this[_0x511758(0x8e0)]='';break;case'battleZoom':if(Imported[_0x511758(0x538)]){if($gameScreen[_0x511758(0x851)]()['zoomDuration']>0x0)return!![];this[_0x511758(0x8e0)]='';}break;case _0x511758(0x1b0):if(Imported[_0x511758(0x9ec)]){if(BattleManager[_0x511758(0x81e)][_0x511758(0x313)]){if(BattleManager[_0x511758(0x81e)]['isAnyoneInjectAniPrepping']())return!![];this[_0x511758(0x8e0)]=_0x511758(0xbd0);}else this['_waitMode']='';break;}break;case'battleInjectAni':if(Imported[_0x511758(0x9ec)]){if(BattleManager[_0x511758(0x81e)]['isAnyoneInjectAnimating']())return!![];this[_0x511758(0x8e0)]='';}break;}return VisuMZ['BattleCore'][_0x511758(0x552)][_0x511758(0x515)](this);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x2cb)]=Game_Interpreter[_0x46c6a8(0x669)][_0x46c6a8(0x53a)],Game_Interpreter[_0x46c6a8(0x669)]['command301']=function(_0xa506d9){const _0x34e113=_0x46c6a8;return!$gameParty[_0x34e113(0x73e)]()?this[_0x34e113(0x31a)](_0xa506d9):VisuMZ[_0x34e113(0xa74)][_0x34e113(0x2cb)]['call'](this,_0xa506d9);},Game_Interpreter[_0x46c6a8(0x669)][_0x46c6a8(0x7e1)]=function(_0x3c12b4){const _0x277b0f=_0x46c6a8;return VisuMZ['BattleCore'][_0x277b0f(0x2cb)][_0x277b0f(0x515)](this,_0x3c12b4),BattleManager[_0x277b0f(0x36d)](_0x80003=>{const _0xcc607a=_0x277b0f;this['_branch'][this[_0xcc607a(0x495)]]=_0x80003;}),!![];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x889)]=function(_0x26c56e){const _0x2e5647=_0x46c6a8,_0x89cd74=$dataCommonEvents[_0x26c56e];if(!_0x89cd74)return![];if(_0x89cd74['list'][_0x2e5647(0x50d)]<=0x1)return![];return!![];},Game_Interpreter[_0x46c6a8(0x669)][_0x46c6a8(0x31a)]=function(_0x1f9dde){const _0xfa62e7=_0x46c6a8,_0x484bf1=VisuMZ[_0xfa62e7(0xa74)][_0xfa62e7(0x154)][_0xfa62e7(0x3f8)],_0x1cac54=_0x484bf1[_0xfa62e7(0x7cd)],_0x2468d5=$dataCommonEvents[_0x1cac54];if(_0x2468d5&&VisuMZ['BattleCore'][_0xfa62e7(0x889)](_0x1cac54)){const _0x1c9369=this[_0xfa62e7(0xabe)]()?this['_eventId']:0x0,_0x1c2509=_0x2468d5[_0xfa62e7(0x8b3)];this[_0xfa62e7(0xb54)](_0x1c2509,_0x1c9369),this[_0xfa62e7(0x1f3)]=JsonEx[_0xfa62e7(0x219)](this[_0xfa62e7(0x1f3)]);const _0x19a39e={'code':0xbc3,'indent':this[_0xfa62e7(0x495)],'parameters':JsonEx['makeDeepCopy'](_0x1f9dde)};return this[_0xfa62e7(0x1f3)][_0xfa62e7(0x27b)](this[_0xfa62e7(0x684)]+0x1,0x0,_0x19a39e),!![];}else return VisuMZ[_0xfa62e7(0xa74)][_0xfa62e7(0x2cb)]['call'](this,_0x1f9dde);},VisuMZ['BattleCore']['BattleManager_onEncounter']=BattleManager[_0x46c6a8(0x37e)],BattleManager[_0x46c6a8(0x37e)]=function(){const _0x2c1465=_0x46c6a8;VisuMZ[_0x2c1465(0xa74)][_0x2c1465(0x37f)][_0x2c1465(0x515)](this),this['onEncounterBattleCore']();},BattleManager[_0x46c6a8(0x61b)]=function(){const _0x1a49a3=_0x46c6a8,_0xcdcfeb=VisuMZ[_0x1a49a3(0xa74)][_0x1a49a3(0x154)][_0x1a49a3(0x3f8)],_0x5cc0c8=_0xcdcfeb['BattleStartEvent'];_0x5cc0c8&&VisuMZ['BattleCore'][_0x1a49a3(0x889)](_0x5cc0c8)&&(this[_0x1a49a3(0x4b7)]=!![],$gameTemp[_0x1a49a3(0xa54)](_0xcdcfeb[_0x1a49a3(0x7cd)]),$gameMap[_0x1a49a3(0x199)](),$gameMap[_0x1a49a3(0x835)][_0x1a49a3(0x6d5)]=!![]),_0xcdcfeb[_0x1a49a3(0xad1)]>0x0&&(this[_0x1a49a3(0x7f7)]=!![]);},VisuMZ['BattleCore'][_0x46c6a8(0x856)]=Scene_Map[_0x46c6a8(0x669)][_0x46c6a8(0x58e)],Scene_Map[_0x46c6a8(0x669)]['updateCallMenu']=function(){const _0x456059=_0x46c6a8;if(BattleManager[_0x456059(0x4b7)])return;VisuMZ[_0x456059(0xa74)][_0x456059(0x856)][_0x456059(0x515)](this);},VisuMZ[_0x46c6a8(0xa74)]['Scene_Map_launchBattle']=Scene_Map[_0x46c6a8(0x669)][_0x46c6a8(0xa66)],Scene_Map[_0x46c6a8(0x669)][_0x46c6a8(0xa66)]=function(){const _0x355f34=_0x46c6a8;BattleManager[_0x355f34(0x4b7)]?this['battleCorePreBattleCommonEvent']():VisuMZ[_0x355f34(0xa74)]['Scene_Map_launchBattle']['call'](this);},Scene_Map['prototype'][_0x46c6a8(0x465)]=function(){const _0x2667b7=_0x46c6a8;this[_0x2667b7(0x17e)]=!![];},VisuMZ['BattleCore'][_0x46c6a8(0x1e5)]=SceneManager[_0x46c6a8(0xb73)],SceneManager[_0x46c6a8(0xb73)]=function(){const _0xf51313=_0x46c6a8;if(BattleManager[_0xf51313(0x4b7)])return![];return VisuMZ['BattleCore'][_0xf51313(0x1e5)]['call'](this);},VisuMZ[_0x46c6a8(0xa74)]['Game_Interpreter_terminate']=Game_Interpreter[_0x46c6a8(0x669)][_0x46c6a8(0x539)],Game_Interpreter[_0x46c6a8(0x669)][_0x46c6a8(0x539)]=function(){const _0x1b8d06=_0x46c6a8;VisuMZ['BattleCore'][_0x1b8d06(0xaff)][_0x1b8d06(0x515)](this),this[_0x1b8d06(0x6d5)]&&(this[_0x1b8d06(0x6d5)]=undefined,SceneManager[_0x1b8d06(0x7a7)][_0x1b8d06(0x3bc)]());},Scene_Map[_0x46c6a8(0x669)][_0x46c6a8(0x3bc)]=function(){const _0x1ec53c=_0x46c6a8;BattleManager[_0x1ec53c(0x4b7)]=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this[_0x1ec53c(0x7f2)]();},VisuMZ[_0x46c6a8(0xa74)]['Scene_Map_initializeAfter']=Scene_Map[_0x46c6a8(0x669)][_0x46c6a8(0x82c)],Scene_Map[_0x46c6a8(0x669)][_0x46c6a8(0x82c)]=function(){const _0x1cf7d6=_0x46c6a8;VisuMZ[_0x1cf7d6(0xa74)][_0x1cf7d6(0x879)][_0x1cf7d6(0x515)](this),BattleManager[_0x1cf7d6(0x5e5)]&&(this['_active']=!![],BattleManager[_0x1cf7d6(0x5e5)]=undefined);},VisuMZ['BattleCore'][_0x46c6a8(0xb6e)]=Scene_Map['prototype']['initialize'],Scene_Map['prototype']['initialize']=function(){const _0x1cd46c=_0x46c6a8;VisuMZ[_0x1cd46c(0xa74)]['Scene_Map_initialize'][_0x1cd46c(0x515)](this),$gameTemp[_0x1cd46c(0x993)]();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x7bd)]=Scene_ItemBase[_0x46c6a8(0x669)][_0x46c6a8(0x906)],Scene_ItemBase['prototype'][_0x46c6a8(0x906)]=function(){const _0xe5cc02=_0x46c6a8;VisuMZ['BattleCore'][_0xe5cc02(0x7bd)]['call'](this);if(this[_0xe5cc02(0x6e9)]()[_0xe5cc02(0xb03)]['match'](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0xe5cc02(0x6e9)]()[_0xe5cc02(0xb03)][_0xe5cc02(0x712)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0xe5cc02(0xc6d)]=[]),DataManager[_0xe5cc02(0x155)](this[_0xe5cc02(0x6e9)]())&&($gameTemp[_0xe5cc02(0xc6d)]=[]);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x9f9)]=Scene_Options[_0x46c6a8(0x669)][_0x46c6a8(0x4ca)],Scene_Options['prototype'][_0x46c6a8(0x4ca)]=function(){const _0x12d18f=_0x46c6a8;let _0x596fe0=VisuMZ[_0x12d18f(0xa74)][_0x12d18f(0x9f9)]['call'](this);const _0x193487=VisuMZ[_0x12d18f(0xa74)][_0x12d18f(0x154)];if(_0x193487['AutoBattle'][_0x12d18f(0x93f)]&&_0x193487['AutoBattle']['AdjustRect'])_0x596fe0+=0x2;if(_0x193487[_0x12d18f(0xbd3)][_0x12d18f(0x93f)]&&_0x193487[_0x12d18f(0xbd3)]['AdjustRect'])_0x596fe0+=0x1;return _0x596fe0;},VisuMZ[_0x46c6a8(0xa74)]['Scene_Battle_initialize']=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x82c)],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x82c)]=function(){const _0x215d42=_0x46c6a8;VisuMZ[_0x215d42(0xa74)]['Scene_Battle_initialize'][_0x215d42(0x515)](this),this[_0x215d42(0x293)]();},VisuMZ[_0x46c6a8(0xa74)]['Scene_Battle_start']=Scene_Battle['prototype'][_0x46c6a8(0xa63)],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xa63)]=function(){const _0x3c12fa=_0x46c6a8;SceneManager[_0x3c12fa(0x529)]()?(Scene_Message['prototype'][_0x3c12fa(0xa63)][_0x3c12fa(0x515)](this),this[_0x3c12fa(0x81e)]&&this[_0x3c12fa(0x81e)][_0x3c12fa(0x50f)](),BattleManager[_0x3c12fa(0x3ed)]&&BattleManager['revertTpbCachedActor']()):(VisuMZ[_0x3c12fa(0xa74)][_0x3c12fa(0x74e)][_0x3c12fa(0x515)](this),$gameTroop[_0x3c12fa(0x81b)]());},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x782)]=Scene_Battle[_0x46c6a8(0x669)]['stop'],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x7f2)]=function(){const _0x1528fe=_0x46c6a8;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x1528fe(0x669)][_0x1528fe(0x7f2)][_0x1528fe(0x515)](this):VisuMZ[_0x1528fe(0xa74)]['Scene_Battle_stop']['call'](this);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x5e6)]=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x539)],Scene_Battle[_0x46c6a8(0x669)]['terminate']=function(){const _0x20f033=_0x46c6a8;SceneManager[_0x20f033(0x6bb)]()?Scene_Message[_0x20f033(0x669)][_0x20f033(0x539)][_0x20f033(0x515)](this):VisuMZ[_0x20f033(0xa74)][_0x20f033(0x5e6)][_0x20f033(0x515)](this),$gameTemp[_0x20f033(0x606)](),this[_0x20f033(0x293)]();},Scene_Battle[_0x46c6a8(0x669)]['isRightInputMode']=function(){const _0x40d598=_0x46c6a8;if(ConfigManager[_0x40d598(0x2a8)]&&ConfigManager['uiInputPosition']!==undefined)return ConfigManager[_0x40d598(0x5cb)];else{if(this[_0x40d598(0x753)]()==='border')return![];else{return Scene_Message[_0x40d598(0x669)]['isRightInputMode'][_0x40d598(0x515)](this);;}}},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x61c)]=Scene_Battle[_0x46c6a8(0x669)]['createCancelButton'],Scene_Battle['prototype']['createCancelButton']=function(){const _0x85d1c7=_0x46c6a8;VisuMZ[_0x85d1c7(0xa74)][_0x85d1c7(0x61c)][_0x85d1c7(0x515)](this),this[_0x85d1c7(0x753)]()===_0x85d1c7(0x9a1)&&this[_0x85d1c7(0x143)]();},Scene_Battle[_0x46c6a8(0x669)]['setVisibleUI']=function(_0x3da01f){const _0x3ded18=_0x46c6a8;_0x3da01f?(this[_0x3ded18(0xc65)]['x']=(Graphics[_0x3ded18(0x1e1)]-Graphics['boxWidth'])/0x2,this[_0x3ded18(0xc65)]['y']=(Graphics['height']-Graphics['boxHeight'])/0x2):(this[_0x3ded18(0xc65)]['x']=Graphics[_0x3ded18(0x1e1)]*0xa,this[_0x3ded18(0xc65)]['y']=Graphics[_0x3ded18(0x1fc)]*0xa);},VisuMZ['BattleCore'][_0x46c6a8(0x974)]=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x7d1)],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x7d1)]=function(){const _0x2c867a=_0x46c6a8,_0x3d5da5=BattleManager[_0x2c867a(0x185)]();VisuMZ[_0x2c867a(0xa74)]['Scene_Battle_selectNextCommand'][_0x2c867a(0x515)](this);if(_0x3d5da5){if(_0x3d5da5===BattleManager[_0x2c867a(0x185)]())return;if(_0x3d5da5===BattleManager[_0x2c867a(0x80d)])return;if(_0x3d5da5[_0x2c867a(0x62d)]())_0x3d5da5[_0x2c867a(0x62d)]()[_0x2c867a(0x6be)]();}},VisuMZ[_0x46c6a8(0xa74)]['Scene_Battle_selectPreviousCommand']=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xa3e)],Scene_Battle['prototype'][_0x46c6a8(0xa3e)]=function(){const _0x5a4cd6=_0x46c6a8,_0x82901f=BattleManager[_0x5a4cd6(0x185)]();if(_0x82901f&&_0x82901f[_0x5a4cd6(0x62d)])_0x82901f['battler']()[_0x5a4cd6(0x6be)]();VisuMZ[_0x5a4cd6(0xa74)]['Scene_Battle_selectPreviousCommand'][_0x5a4cd6(0x515)](this);},VisuMZ['BattleCore']['Scene_Battle_createAllWindows']=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x14d)],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x14d)]=function(){const _0x15128e=_0x46c6a8;this[_0x15128e(0xa6a)](),VisuMZ[_0x15128e(0xa74)][_0x15128e(0x2f4)]['call'](this),this[_0x15128e(0x728)]();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x455)]=Scene_Battle['prototype']['logWindowRect'],Scene_Battle[_0x46c6a8(0x669)]['logWindowRect']=function(){const _0x49f2cb=_0x46c6a8;if(VisuMZ['BattleCore'][_0x49f2cb(0x154)][_0x49f2cb(0x519)][_0x49f2cb(0x390)])return VisuMZ[_0x49f2cb(0xa74)][_0x49f2cb(0x154)][_0x49f2cb(0x519)]['BattleLogRectJS'][_0x49f2cb(0x515)](this);return VisuMZ[_0x49f2cb(0xa74)][_0x49f2cb(0x455)][_0x49f2cb(0x515)](this);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x353)]=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x8e2)],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x8e2)]=function(){const _0x247f27=_0x46c6a8;VisuMZ[_0x247f27(0xa74)][_0x247f27(0x353)][_0x247f27(0x515)](this),this[_0x247f27(0x99d)]();},Scene_Battle['prototype']['createPartyCommandWindowBattleCore']=function(){const _0x19989d=_0x46c6a8,_0x43fe18=this['_partyCommandWindow'];_0x43fe18[_0x19989d(0x226)](_0x19989d(0x581),this[_0x19989d(0x13b)][_0x19989d(0x5fa)](this)),_0x43fe18[_0x19989d(0x226)](_0x19989d(0x511),this[_0x19989d(0x9af)][_0x19989d(0x5fa)](this));const _0x1f2bfd=this[_0x19989d(0x753)]();switch(_0x1f2bfd){case'xp':case _0x19989d(0x23e):return this[_0x19989d(0x940)]['setBackgroundType'](0x1);break;}},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x13b)]=function(){const _0x13f79c=_0x46c6a8;BattleManager[_0x13f79c(0x6d9)]=!![],$gameParty[_0x13f79c(0x685)](),this[_0x13f79c(0x7d1)](),BattleManager[_0x13f79c(0x57d)]()&&(BattleManager[_0x13f79c(0x760)]=![]);},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x9af)]=function(){const _0x76f6e0=_0x46c6a8;this[_0x76f6e0(0x19d)]()?(this[_0x76f6e0(0xa05)]=!![],this[_0x76f6e0(0x68b)][_0x76f6e0(0x78c)](_0x76f6e0(0x386),VisuMZ[_0x76f6e0(0xa74)][_0x76f6e0(0x154)]['PartyCmd']['ActiveTpbOptionsMessage'])):this[_0x76f6e0(0x7db)]();},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x19d)]=function(){const _0x17f47a=_0x46c6a8;return BattleManager[_0x17f47a(0x93b)]();},Scene_Battle[_0x46c6a8(0x669)]['callOptions']=function(){const _0x14cd86=_0x46c6a8;this[_0x14cd86(0xa05)]=![],this[_0x14cd86(0x81e)][_0x14cd86(0x50f)](),this[_0x14cd86(0xc65)][_0x14cd86(0x6cb)]=![];if(BattleManager[_0x14cd86(0x6a3)]())($dataSystem[_0x14cd86(0x927)]||$dataSystem[_0x14cd86(0x8f5)])&&SceneManager['snapForBackground']();else($gameMap[_0x14cd86(0x927)]()||$gameMap['battleback2Name']())&&SceneManager[_0x14cd86(0x71e)]();SceneManager[_0x14cd86(0x78c)](Scene_Options),BattleManager[_0x14cd86(0x57d)]()&&(BattleManager['_tpbSceneChangeCacheActor']=BattleManager[_0x14cd86(0x185)]());},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x80f)]=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x694)],Scene_Battle['prototype']['updateBattleProcess']=function(){const _0x29ff54=_0x46c6a8;VisuMZ[_0x29ff54(0xa74)][_0x29ff54(0x80f)]['call'](this);if(this[_0x29ff54(0xa05)]&&!BattleManager[_0x29ff54(0x80d)])this[_0x29ff54(0x7db)]();},VisuMZ[_0x46c6a8(0xa74)]['Scene_Battle_update']=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x50f)],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x50f)]=function(){const _0x211d50=_0x46c6a8;VisuMZ[_0x211d50(0xa74)][_0x211d50(0x7a3)][_0x211d50(0x515)](this),this[_0x211d50(0xbdf)]();},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x728)]=function(){const _0x45709a=_0x46c6a8,_0x2f5629=this[_0x45709a(0xb38)]();this['_autoBattleWindow']=new Window_AutoBattleCancel(_0x2f5629),this[_0x45709a(0x3f2)][_0x45709a(0x9dd)](),this[_0x45709a(0xa85)](this[_0x45709a(0x3f2)]);},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xb38)]=function(){const _0x2c4869=_0x46c6a8;return VisuMZ['BattleCore'][_0x2c4869(0x154)]['AutoBattle'][_0x2c4869(0x86b)][_0x2c4869(0x515)](this);},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x293)]=function(){this['_onceParallelInterpreters']=[];},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xbdf)]=function(){const _0x59c24c=_0x46c6a8;if(!this['_onceParallelInterpreters'])return;for(const _0x40a57b of this['_onceParallelInterpreters']){_0x40a57b&&_0x40a57b[_0x59c24c(0x50f)]();}},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xa50)]=function(_0x1f551e){const _0xc099ec=_0x46c6a8,_0x47d540=$dataCommonEvents[_0x1f551e];if(!_0x47d540)return;const _0x45a060=new Game_BattleOnceParallelInterpreter();this[_0xc099ec(0x6d3)](_0x45a060),_0x45a060[_0xc099ec(0x990)](_0x1f551e);},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x6d3)]=function(_0x3beb8f){const _0x3321a7=_0x46c6a8;this[_0x3321a7(0x5fb)]=this[_0x3321a7(0x5fb)]||[],this[_0x3321a7(0x5fb)][_0x3321a7(0x78c)](_0x3beb8f);},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x29a)]=function(_0x4c2fc2){const _0x192484=_0x46c6a8;this[_0x192484(0x5fb)]=this[_0x192484(0x5fb)]||[],this[_0x192484(0x5fb)][_0x192484(0x45d)](_0x4c2fc2);},Game_Troop['prototype'][_0x46c6a8(0x81b)]=function(){const _0x53cf6f=_0x46c6a8;for(const _0x58b5e of this['troop']()['pages']){if(!this[_0x53cf6f(0xb50)](_0x58b5e))continue;SceneManager[_0x53cf6f(0x7a7)]['playOnceParallelTroopPage'](_0x58b5e);}},Game_Troop[_0x46c6a8(0x669)][_0x46c6a8(0xb50)]=function(_0x2382ea){const _0x11a810=_0x46c6a8;if(!_0x2382ea)return;for(const _0xfb607f of _0x2382ea[_0x11a810(0x8b3)]){if([0x6c,0x198][_0x11a810(0x4a3)](_0xfb607f[_0x11a810(0xb27)])){const _0x1ecdd7=_0xfb607f['parameters'][0x0];if(_0x1ecdd7['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x55b)]=function(_0x3a076e){const _0x36c7a9=_0x46c6a8;if(!_0x3a076e)return;const _0xb32de=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0xb32de),_0xb32de[_0x36c7a9(0x7eb)](_0x3a076e);};function Game_BattleOnceParallelInterpreter(){const _0x184cf6=_0x46c6a8;this[_0x184cf6(0x82c)](...arguments);}Game_BattleOnceParallelInterpreter[_0x46c6a8(0x669)]=Object[_0x46c6a8(0x4c2)](Game_Interpreter['prototype']),Game_BattleOnceParallelInterpreter['prototype'][_0x46c6a8(0x2cf)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x46c6a8(0x669)][_0x46c6a8(0x990)]=function(_0x329796){const _0x562d80=_0x46c6a8,_0x5e1f7a=$dataCommonEvents[_0x329796];_0x5e1f7a?this['setup'](_0x5e1f7a[_0x562d80(0x8b3)],0x0):this[_0x562d80(0x539)]();},Game_BattleOnceParallelInterpreter['prototype'][_0x46c6a8(0x539)]=function(){const _0x70abcf=_0x46c6a8;if(!SceneManager[_0x70abcf(0x849)]())return;SceneManager[_0x70abcf(0x7a7)][_0x70abcf(0x29a)](this),Game_Interpreter['prototype']['terminate'][_0x70abcf(0x515)](this);},Game_BattleOnceParallelInterpreter[_0x46c6a8(0x669)][_0x46c6a8(0x7eb)]=function(_0x3cd8d5){const _0x4e1be4=_0x46c6a8;_0x3cd8d5?this[_0x4e1be4(0x208)](_0x3cd8d5[_0x4e1be4(0x8b3)],0x0):this[_0x4e1be4(0x539)]();},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x72c)]=function(){const _0x312c00=_0x46c6a8;return VisuMZ[_0x312c00(0xa74)][_0x312c00(0x154)][_0x312c00(0x821)][_0x312c00(0xbcc)];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xb0c)]=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x6ff)],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x6ff)]=function(){const _0x2e254b=_0x46c6a8;this['isPartyCommandWindowDisabled']()?this['onDisabledPartyCommandSelection']():VisuMZ[_0x2e254b(0xa74)][_0x2e254b(0xb0c)]['call'](this);},Scene_Battle[_0x46c6a8(0x669)]['onDisabledPartyCommandSelection']=function(){const _0x256bd4=_0x46c6a8;if(BattleManager[_0x256bd4(0x49c)]())this[_0x256bd4(0x7d1)]();else BattleManager[_0x256bd4(0x57d)]()&&VisuMZ[_0x256bd4(0xa74)][_0x256bd4(0xb0c)][_0x256bd4(0x515)](this);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xc4e)]=Scene_Battle['prototype'][_0x46c6a8(0xb0d)],Scene_Battle['prototype']['commandFight']=function(){const _0x48e162=_0x46c6a8;BattleManager['isTpb']()?(this[_0x48e162(0xa7b)](),this[_0x48e162(0x2d3)]()):VisuMZ[_0x48e162(0xa74)]['Scene_Battle_commandFight']['call'](this);},Scene_Battle[_0x46c6a8(0x669)]['tpbCommandFight']=function(){const _0x137186=_0x46c6a8;if(!VisuMZ[_0x137186(0xa74)][_0x137186(0xbe6)])return;if(Imported[_0x137186(0x6d0)]&&BattleManager[_0x137186(0x410)]())return;const _0x5ca51d=$gameParty[_0x137186(0xa1f)]()['filter'](_0x32472d=>_0x32472d[_0x137186(0x36a)]()&&_0x32472d[_0x137186(0x119)]());BattleManager[_0x137186(0x568)]=_0x5ca51d[0x0]||null,BattleManager[_0x137186(0x568)]&&BattleManager[_0x137186(0x568)][_0x137186(0x6ce)](_0x137186(0x90f));},VisuMZ['BattleCore'][_0x46c6a8(0xb8b)]=Scene_Battle['prototype']['commandEscape'],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xa42)]=function(){const _0x2582fc=_0x46c6a8;VisuMZ[_0x2582fc(0xa74)][_0x2582fc(0xb8b)][_0x2582fc(0x515)](this);if(!BattleManager[_0x2582fc(0x57d)]())BattleManager[_0x2582fc(0x568)]=null;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x9c3)]=Scene_Battle['prototype'][_0x46c6a8(0x77a)],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x77a)]=function(){const _0x34ea6e=_0x46c6a8;VisuMZ[_0x34ea6e(0xa74)][_0x34ea6e(0x9c3)][_0x34ea6e(0x515)](this),this[_0x34ea6e(0xb02)]();},Scene_Battle[_0x46c6a8(0x669)]['createActorCommandWindowBattleCore']=function(){const _0x3e221d=_0x46c6a8,_0x3063aa=this['_actorCommandWindow'];_0x3063aa['setHandler'](_0x3e221d(0x7e8),this[_0x3e221d(0x64d)][_0x3e221d(0x5fa)](this)),_0x3063aa[_0x3e221d(0x226)](_0x3e221d(0x581),this['actorCommandAutoBattle']['bind'](this)),_0x3063aa['setHandler']('singleSkill',this['actorCommandSingleSkill']['bind'](this)),BattleManager['isTpb']()&&(this[_0x3e221d(0x72c)]()?delete _0x3063aa['_handlers']['cancel']:_0x3063aa[_0x3e221d(0x226)]('cancel',this['actorCommandCancelTPB'][_0x3e221d(0x5fa)](this)));},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x64d)]=function(){const _0x42afd2=_0x46c6a8;this[_0x42afd2(0xa42)]();},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xc38)]=function(){const _0xa65e10=_0x46c6a8;BattleManager['actor']()[_0xa65e10(0x7ef)](),BattleManager[_0xa65e10(0x962)](),BattleManager[_0xa65e10(0x9de)](),this[_0xa65e10(0x21f)]();},Scene_Battle[_0x46c6a8(0x669)]['actorCommandSingleSkill']=function(){const _0x41241e=_0x46c6a8,_0x127518=BattleManager[_0x41241e(0x819)](),_0x41ca59=this[_0x41241e(0x69c)][_0x41241e(0x1cb)]();_0x127518[_0x41241e(0xc3f)](_0x41ca59),BattleManager['actor']()[_0x41241e(0xaf2)]($dataSkills[_0x41ca59]),this[_0x41241e(0x2e7)]();},Scene_Battle['prototype'][_0x46c6a8(0x253)]=function(){const _0x35674b=_0x46c6a8;this[_0x35674b(0x8fd)]()?this['performTpbActiveCheckSwitch']():this[_0x35674b(0x6b8)]();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xbe6)]=![],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x8fd)]=function(){const _0x1cd53a=_0x46c6a8;if(Imported[_0x1cd53a(0x6d0)]&&BattleManager[_0x1cd53a(0x410)]())return![];else{if(!VisuMZ[_0x1cd53a(0xa74)][_0x1cd53a(0xbe6)])return![];const _0x4fb4f2=$gameParty[_0x1cd53a(0xa1f)]()[_0x1cd53a(0x2ed)](_0x13c37b=>_0x13c37b[_0x1cd53a(0x36a)]()&&_0x13c37b['canInput']());return _0x4fb4f2[_0x1cd53a(0x50d)]>0x0&&BattleManager[_0x1cd53a(0x185)]()!==_0x4fb4f2[_0x4fb4f2[_0x1cd53a(0x50d)]-0x1];}},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x2e5)]=function(){const _0x42a3a3=_0x46c6a8,_0x44442d=BattleManager['actor'](),_0x17459d=_0x44442d['battler']();if(_0x17459d)_0x17459d[_0x42a3a3(0x6be)]();const _0x2fb53d=$gameParty['aliveMembers']()[_0x42a3a3(0x2ed)](_0x2d204d=>_0x2d204d[_0x42a3a3(0x36a)]()&&_0x2d204d['canInput']()),_0x4584d3=_0x2fb53d['indexOf'](_0x44442d),_0x4af081=_0x2fb53d[_0x4584d3+0x1];BattleManager[_0x42a3a3(0x568)]=_0x4af081||null;if(_0x4af081)_0x4af081[_0x42a3a3(0x6ce)](_0x42a3a3(0x90f));_0x44442d[_0x42a3a3(0x6ce)](_0x42a3a3(0x8c1)),this['changeInputWindow']();},Scene_Battle['prototype'][_0x46c6a8(0x6b8)]=function(){const _0x399f07=_0x46c6a8;this['_partyCommandWindow'][_0x399f07(0x208)](),this[_0x399f07(0x69c)]['close']();if(!VisuMZ[_0x399f07(0xa74)][_0x399f07(0xbe6)])return;if(Imported[_0x399f07(0x6d0)]&&BattleManager['isCTB']())return;if(BattleManager[_0x399f07(0x568)]){BattleManager[_0x399f07(0x568)][_0x399f07(0x6ce)]('undecided');const _0x92ab82=BattleManager[_0x399f07(0x568)][_0x399f07(0x62d)]();if(_0x92ab82)_0x92ab82['stepBack']();}BattleManager['_currentActor']=null;},VisuMZ['BattleCore'][_0x46c6a8(0x223)]=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x90a)],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x90a)]=function(){const _0x3724b1=_0x46c6a8;VisuMZ[_0x3724b1(0xa74)][_0x3724b1(0x223)]['call'](this),this[_0x3724b1(0x83e)]();},Scene_Battle['prototype']['createHelpWindowBattleCore']=function(){const _0x1b4749=_0x46c6a8;this[_0x1b4749(0x69c)][_0x1b4749(0x3a8)](this['_helpWindow']),this[_0x1b4749(0x940)][_0x1b4749(0x3a8)](this[_0x1b4749(0xbc0)]);},Scene_Battle['prototype']['createEnemyNameContainer']=function(){const _0x36af5e=_0x46c6a8;if(!VisuMZ[_0x36af5e(0xa74)][_0x36af5e(0x154)][_0x36af5e(0x6de)][_0x36af5e(0x44a)])return;this['_enemyNameContainer']=new Sprite(),this[_0x36af5e(0x18b)]['x']=this['_windowLayer']['x'],this[_0x36af5e(0x18b)]['y']=this['_windowLayer']['y'];const _0x320a35=this['children'][_0x36af5e(0x3bd)](this['_windowLayer']);this[_0x36af5e(0x462)](this['_enemyNameContainer'],_0x320a35);for(let _0x36d40a=0x0;_0x36d40a<0x8;_0x36d40a++){const _0x291950=new Window_EnemyName(_0x36d40a);this[_0x36af5e(0x18b)][_0x36af5e(0xa85)](_0x291950);}},VisuMZ[_0x46c6a8(0xa74)]['Scene_Battle_createEnemyWindow']=Scene_Battle['prototype'][_0x46c6a8(0x14f)],Scene_Battle[_0x46c6a8(0x669)]['createEnemyWindow']=function(){const _0x158f94=_0x46c6a8;VisuMZ[_0x158f94(0xa74)][_0x158f94(0xbee)][_0x158f94(0x515)](this),this[_0x158f94(0xaa7)]();},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xaa7)]=function(){const _0x50cbde=_0x46c6a8;this[_0x50cbde(0x103)](!![]),this[_0x50cbde(0x103)](![]);},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x83b)]=function(_0x32eedb){const _0x2073a4=_0x46c6a8,_0x3d17bf=Window_BattleMultiTarget[_0x2073a4(0x10a)],_0x255df6=this['calcWindowHeight'](0x1,!![]);let _0x5681eb=_0x32eedb?Graphics['boxWidth']-_0x3d17bf:0x0;_0x5681eb+=_0x32eedb?Window_BattleMultiTarget[_0x2073a4(0x35c)]:Window_BattleMultiTarget[_0x2073a4(0x878)];const _0x20c457=[_0x2073a4(0x2c7)][_0x2073a4(0x4a3)](this[_0x2073a4(0x753)]())?0x0:this[_0x2073a4(0x624)][_0x2073a4(0x1fc)];let _0x357020=Graphics[_0x2073a4(0x187)]-_0x20c457-_0x255df6;return _0x357020+=_0x32eedb?Window_BattleMultiTarget[_0x2073a4(0x1c4)]:Window_BattleMultiTarget[_0x2073a4(0x482)],new Rectangle(_0x5681eb,_0x357020,_0x3d17bf,_0x255df6);},Scene_Battle[_0x46c6a8(0x669)]['createMultiTargetWindow']=function(_0x3e6a63){const _0x468eb2=_0x46c6a8,_0x27ff45=this[_0x468eb2(0x83b)](_0x3e6a63),_0x2535cd=new Window_BattleMultiTarget(_0x27ff45,_0x3e6a63);this['addWindow'](_0x2535cd),_0x3e6a63?this[_0x468eb2(0x157)]=_0x2535cd:this[_0x468eb2(0x52b)]=_0x2535cd;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xa34)]=Scene_Battle[_0x46c6a8(0x669)]['needsInputWindowChange'],Scene_Battle['prototype'][_0x46c6a8(0x6e3)]=function(){const _0x5571bc=_0x46c6a8;if(this['_inBattleStatusMode'])return![];return VisuMZ['BattleCore'][_0x5571bc(0xa34)][_0x5571bc(0x515)](this);},VisuMZ['BattleCore'][_0x46c6a8(0x13d)]=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x882)],Scene_Battle[_0x46c6a8(0x669)]['updateCancelButton']=function(){const _0x4f6ff4=_0x46c6a8;if(this[_0x4f6ff4(0x8c2)]&&this[_0x4f6ff4(0x4ac)]){this['_cancelButton'][_0x4f6ff4(0x6cb)]=!![];return;}VisuMZ[_0x4f6ff4(0xa74)][_0x4f6ff4(0x13d)][_0x4f6ff4(0x515)](this);},VisuMZ[_0x46c6a8(0xa74)]['Scene_Battle_isTimeActiveIBS']=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x26b)],Scene_Battle['prototype'][_0x46c6a8(0x26b)]=function(){const _0x3fc7c8=_0x46c6a8;if(this[_0x3fc7c8(0x4ac)])return![];return VisuMZ[_0x3fc7c8(0xa74)][_0x3fc7c8(0xb60)][_0x3fc7c8(0x515)](this);},VisuMZ['BattleCore'][_0x46c6a8(0x778)]=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x14d)],Scene_Battle['prototype'][_0x46c6a8(0x14d)]=function(){const _0x4154c5=_0x46c6a8;VisuMZ['BattleCore'][_0x4154c5(0x778)][_0x4154c5(0x515)](this),this[_0x4154c5(0x334)]();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x840)]=Scene_Battle['prototype']['createPartyCommandWindow'],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x8e2)]=function(){const _0xec5028=_0x46c6a8;VisuMZ[_0xec5028(0xa74)][_0xec5028(0x840)]['call'](this);const _0x29e1bf=this['_partyCommandWindow'];_0x29e1bf[_0xec5028(0x226)](_0xec5028(0x489),this[_0xec5028(0x413)][_0xec5028(0x5fa)](this,_0x29e1bf));},VisuMZ[_0x46c6a8(0xa74)]['Scene_Battle_createActorCommandWindowIBS']=Scene_Battle['prototype'][_0x46c6a8(0x77a)],Scene_Battle[_0x46c6a8(0x669)]['createActorCommandWindow']=function(){const _0x54718d=_0x46c6a8;VisuMZ['BattleCore']['Scene_Battle_createActorCommandWindowIBS'][_0x54718d(0x515)](this);const _0x28cb44=this[_0x54718d(0x69c)];_0x28cb44[_0x54718d(0x226)]('status',this[_0x54718d(0x413)][_0x54718d(0x5fa)](this,_0x28cb44));},Scene_Battle['prototype'][_0x46c6a8(0x334)]=function(){const _0x494bda=_0x46c6a8,_0x1a1e95=this[_0x494bda(0x525)](),_0x715ed=new Window_InBattleStatus(_0x1a1e95);this[_0x494bda(0x2a5)](_0x715ed),_0x715ed[_0x494bda(0x9dd)](),_0x715ed[_0x494bda(0x485)](),this[_0x494bda(0x2ac)]=_0x715ed;},Scene_Battle['prototype']['inBattleStatusWindowRect']=function(){const _0x2c2dae=_0x46c6a8;if(VisuMZ[_0x2c2dae(0xa74)][_0x2c2dae(0x154)][_0x2c2dae(0x305)][_0x2c2dae(0x6e5)])return VisuMZ[_0x2c2dae(0xa74)][_0x2c2dae(0x154)][_0x2c2dae(0x305)]['StatusWindow_RectJS'][_0x2c2dae(0x515)](this);const _0x3f9804=Graphics['boxWidth']>0x3e8?0x78:0x0,_0x27d757=this[_0x2c2dae(0xbc0)]['y']+this[_0x2c2dae(0xbc0)][_0x2c2dae(0x1fc)],_0x22b7f3=Graphics['boxWidth']-_0x3f9804*0x2,_0x26d756=Graphics[_0x2c2dae(0x187)]-_0x27d757-this[_0x2c2dae(0x80b)]();return new Rectangle(_0x3f9804,_0x27d757,_0x22b7f3,_0x26d756);},Scene_Battle['prototype'][_0x46c6a8(0x413)]=function(_0x87ee5){const _0x137151=_0x46c6a8;this[_0x137151(0x2a5)](this[_0x137151(0x2ac)]),this[_0x137151(0x4ac)]=!![],this[_0x137151(0xbc0)]['show']();const _0x20c57e=['xp',_0x137151(0x23e),_0x137151(0x9a1),_0x137151(0x56b),'frontview_ui'];let _0x2f3bcb=_0x20c57e['includes'](this[_0x137151(0x753)]());_0x2f3bcb&&(_0x87ee5[_0x137151(0x9dd)](),_0x87ee5['close']()),this[_0x137151(0x2ac)][_0x137151(0x585)](BattleManager[_0x137151(0x185)]()||$gameParty[_0x137151(0x198)]()[0x0]),this['_inBattleStatusWindow'][_0x137151(0xbf8)](_0x87ee5),this[_0x137151(0x2ac)][_0x137151(0xab7)](),this[_0x137151(0x2ac)][_0x137151(0x7a9)]();},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xa22)]=function(){const _0x3d4142=_0x46c6a8;this[_0x3d4142(0x4ac)]=![],this[_0x3d4142(0xbc0)][_0x3d4142(0x9dd)]();const _0x5d074a=this['_inBattleStatusWindow']['getReturnWindow']();_0x5d074a[_0x3d4142(0xab7)](),_0x5d074a['open'](),_0x5d074a[_0x3d4142(0xbf7)](),this[_0x3d4142(0x2ac)][_0x3d4142(0x9dd)](),this[_0x3d4142(0x2ac)][_0x3d4142(0x485)]();},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x753)]=function(){const _0xbeffdc=_0x46c6a8;if($gameTemp[_0xbeffdc(0x40a)]!==undefined)return $gameTemp['_forcedBattleLayout'];if(this[_0xbeffdc(0x2e6)])return this['_battleLayoutStyle'];return this[_0xbeffdc(0x2e6)]=VisuMZ['BattleCore'][_0xbeffdc(0x154)][_0xbeffdc(0x5ab)]['Style']['toLowerCase']()[_0xbeffdc(0xa28)](),this[_0xbeffdc(0x2e6)]==='sideview_ui'&&!Imported[_0xbeffdc(0x2bd)]&&(this[_0xbeffdc(0x2e6)]=_0xbeffdc(0x9bb)),this[_0xbeffdc(0x2e6)]===_0xbeffdc(0x2c7)&&!Imported[_0xbeffdc(0x5ac)]&&(this[_0xbeffdc(0x2e6)]=_0xbeffdc(0x9bb)),this['_battleLayoutStyle'];},VisuMZ[_0x46c6a8(0xa74)]['Scene_Battle_windowAreaHeight']=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x80b)],Scene_Battle[_0x46c6a8(0x669)]['windowAreaHeight']=function(){const _0x231688=_0x46c6a8,_0x1e4d0c=this[_0x231688(0x753)]();switch(_0x1e4d0c){case'list':return this['calcWindowHeight'](Math['max'](0x1,$gameParty[_0x231688(0x769)]()),!![]);break;case _0x231688(0x9a1):return this[_0x231688(0x3c4)](0x4,!![]);break;default:return VisuMZ[_0x231688(0xa74)][_0x231688(0x6f0)][_0x231688(0x515)](this);break;}},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x8ba)]=Scene_Battle['prototype'][_0x46c6a8(0x5ce)],Scene_Battle['prototype'][_0x46c6a8(0x5ce)]=function(){const _0x1f1735=_0x46c6a8,_0x59d4d0=this[_0x1f1735(0x753)]();switch(_0x59d4d0){case'border':return this['helpWindowRectBorderStyle']();break;case _0x1f1735(0x9bb):case'list':case'xp':case _0x1f1735(0x23e):default:return VisuMZ[_0x1f1735(0xa74)][_0x1f1735(0x8ba)][_0x1f1735(0x515)](this);break;}},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xae9)]=function(){const _0x228331=_0x46c6a8,_0x31dca4=this[_0x228331(0x753)]();switch(_0x31dca4){case'xp':case _0x228331(0x23e):return this['statusWindowRectXPStyle']();break;case _0x228331(0x9a1):return this[_0x228331(0x211)]();break;case _0x228331(0x9bb):case _0x228331(0x8b3):default:return this['statusWindowRectDefaultStyle']();break;}},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x646)]=Scene_Battle['prototype'][_0x46c6a8(0x67c)],Scene_Battle['prototype'][_0x46c6a8(0x67c)]=function(){const _0x2fd30b=_0x46c6a8,_0xa7423c=this[_0x2fd30b(0x753)]();switch(_0xa7423c){case'xp':case _0x2fd30b(0x23e):return this[_0x2fd30b(0x7e7)]();break;case'border':return this[_0x2fd30b(0xa5a)]();case'default':case _0x2fd30b(0x8b3):default:return this[_0x2fd30b(0x376)]();break;}},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x376)]=function(){const _0x5bc05b=_0x46c6a8,_0x2e7bca=VisuMZ[_0x5bc05b(0xa74)][_0x5bc05b(0x154)][_0x5bc05b(0x5ab)],_0x4a1b07=_0x2e7bca[_0x5bc05b(0x6e8)]||0xc0,_0x5b83e7=this[_0x5bc05b(0x80b)](),_0xeda5be=this[_0x5bc05b(0x5e4)]()?Graphics['boxWidth']-_0x4a1b07:0x0,_0x4d59c2=Graphics[_0x5bc05b(0x187)]-_0x5b83e7;return new Rectangle(_0xeda5be,_0x4d59c2,_0x4a1b07,_0x5b83e7);},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x73a)]=function(){return this['partyCommandWindowRect']();},VisuMZ['BattleCore']['Scene_Battle_updateStatusWindowPosition']=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x55a)],Scene_Battle['prototype'][_0x46c6a8(0x55a)]=function(){const _0x3fc21d=_0x46c6a8;if(this[_0x3fc21d(0x4ac)])return;const _0x36df10=this[_0x3fc21d(0x753)]();switch(_0x36df10){case'xp':case'portrait':case _0x3fc21d(0x9a1):break;case'default':case'list':default:VisuMZ[_0x3fc21d(0xa74)][_0x3fc21d(0x13a)]['call'](this);break;}},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xa21)]=function(){const _0x19d481=_0x46c6a8,_0x2ea27e=VisuMZ['BattleCore']['Settings'][_0x19d481(0x5ab)],_0x56657b=Window_BattleStatus[_0x19d481(0x669)][_0x19d481(0x911)](),_0x11945c=Graphics[_0x19d481(0xb13)]-(_0x2ea27e[_0x19d481(0x6e8)]||0xc0),_0x122491=this[_0x19d481(0x80b)]()+_0x56657b,_0x2102b2=this[_0x19d481(0x5e4)]()?0x0:Graphics[_0x19d481(0xb13)]-_0x11945c,_0x5c6051=Graphics[_0x19d481(0x187)]-_0x122491+_0x56657b;return new Rectangle(_0x2102b2,_0x5c6051,_0x11945c,_0x122491);},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x459)]=function(){const _0x31bcb6=_0x46c6a8,_0x3eda4=Window_BattleStatus[_0x31bcb6(0x669)][_0x31bcb6(0x911)](),_0x29e8c7=Graphics[_0x31bcb6(0xb13)],_0x4ca35f=this[_0x31bcb6(0x80b)]()+_0x3eda4,_0x41615a=0x0,_0x177803=Graphics[_0x31bcb6(0x187)]-_0x4ca35f+_0x3eda4;return new Rectangle(_0x41615a,_0x177803,_0x29e8c7,_0x4ca35f);},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x7e7)]=function(){const _0x479c33=_0x46c6a8,_0x564037=Graphics['boxWidth']/0x2,_0x6edbb5=this[_0x479c33(0x3c4)](VisuMZ[_0x479c33(0xa74)][_0x479c33(0x154)]['BattleLayout'][_0x479c33(0x201)],!![]),_0x3a62ac=Math[_0x479c33(0xa5e)]((Graphics['boxWidth']-_0x564037)/0x2),_0x1bd30e=Graphics['boxHeight']-_0x6edbb5-this[_0x479c33(0x459)]()[_0x479c33(0x1fc)];return new Rectangle(_0x3a62ac,_0x1bd30e,_0x564037,_0x6edbb5);},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x8f6)]=function(){const _0x90347d=_0x46c6a8,_0x5aae8f=Graphics['width'],_0x15d836=Math[_0x90347d(0xa5e)]((Graphics[_0x90347d(0xb13)]-_0x5aae8f)/0x2),_0x4f39a3=this[_0x90347d(0x3b8)](),_0x5b07ca=(Graphics[_0x90347d(0x1fc)]-Graphics[_0x90347d(0x187)])/-0x2;return new Rectangle(_0x15d836,_0x5b07ca,_0x5aae8f,_0x4f39a3);},Scene_Battle['prototype'][_0x46c6a8(0x211)]=function(){const _0x201467=_0x46c6a8,_0x3356d9=Graphics[_0x201467(0x1e1)],_0x33c83d=Math['round']((Graphics['boxWidth']-_0x3356d9)/0x2),_0x46084c=this[_0x201467(0x3c4)](0x4,!![]),_0x532e28=Graphics['boxHeight']-_0x46084c+(Graphics['height']-Graphics[_0x201467(0x187)])/0x2;return new Rectangle(_0x33c83d,_0x532e28,_0x3356d9,_0x46084c);},Scene_Battle['prototype'][_0x46c6a8(0xa5a)]=function(){const _0x2d53ef=_0x46c6a8,_0x50e84c=Math[_0x2d53ef(0x2f2)](Graphics[_0x2d53ef(0x1e1)]/0x3),_0x3d5d0a=this[_0x2d53ef(0x5e4)]()?(Graphics['width']+Graphics[_0x2d53ef(0xb13)])/0x2-_0x50e84c:(Graphics[_0x2d53ef(0x1e1)]-Graphics[_0x2d53ef(0xb13)])/-0x2,_0x4b1fbf=this[_0x2d53ef(0x8f6)](),_0x40d3ab=_0x4b1fbf['y']+_0x4b1fbf['height'],_0x45e0d9=this['statusWindowRectBorderStyle'](),_0x596265=_0x45e0d9['y']-_0x40d3ab;return new Rectangle(_0x3d5d0a,_0x40d3ab,_0x50e84c,_0x596265);},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x867)]=function(){const _0x4bfc06=_0x46c6a8,_0x5ee136=Math['ceil'](Graphics[_0x4bfc06(0x1e1)]/0x3),_0x2c57ff=Math[_0x4bfc06(0xa5e)]((Graphics[_0x4bfc06(0xb13)]-_0x5ee136)/0x2),_0x4396ac=this['partyCommandWindowRectBorderStyle'](),_0x2d3b99=_0x4396ac['y'],_0xa78064=_0x4396ac['height'];return new Rectangle(_0x2c57ff,_0x2d3b99,_0x5ee136,_0xa78064);},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x143)]=function(){const _0x57c413=_0x46c6a8;this[_0x57c413(0x8c2)]['y']=this['_helpWindow']['y']+this[_0x57c413(0xbc0)][_0x57c413(0x1fc)],this[_0x57c413(0x5e4)]()?this['battleLayoutStyle']()===_0x57c413(0x9a1)?this[_0x57c413(0x8c2)]['x']=0x8:this[_0x57c413(0x8c2)]['x']=-this[_0x57c413(0x8c2)][_0x57c413(0x1e1)]-0x4:this[_0x57c413(0x8c2)]['x']=Graphics[_0x57c413(0x1e1)]-(Graphics[_0x57c413(0x1e1)]-Graphics[_0x57c413(0xb13)])/0x2-this[_0x57c413(0x8c2)][_0x57c413(0x1e1)]-0x4;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x3d8)]=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x8d1)],Scene_Battle['prototype'][_0x46c6a8(0x8d1)]=function(){const _0x5a1a54=_0x46c6a8;if(this[_0x5a1a54(0x753)]()===_0x5a1a54(0x9a1))return this[_0x5a1a54(0x867)]();else return this[_0x5a1a54(0x1af)]()?this[_0x5a1a54(0x190)]():VisuMZ[_0x5a1a54(0xa74)][_0x5a1a54(0x3d8)][_0x5a1a54(0x515)](this);},VisuMZ['BattleCore'][_0x46c6a8(0xa30)]=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x2b1)],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x2b1)]=function(){const _0x4a2727=_0x46c6a8;if(this[_0x4a2727(0x753)]()==='border')return this[_0x4a2727(0x867)]();else return this[_0x4a2727(0x1af)]()?this[_0x4a2727(0x190)]():VisuMZ[_0x4a2727(0xa74)][_0x4a2727(0xa30)][_0x4a2727(0x515)](this);},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x1af)]=function(){const _0xd5bc81=_0x46c6a8;return VisuMZ['BattleCore'][_0xd5bc81(0x154)][_0xd5bc81(0x5ab)][_0xd5bc81(0xab4)];},Scene_Battle[_0x46c6a8(0x669)]['skillItemWindowRectMiddle']=function(){const _0x532921=_0x46c6a8,_0x5b8111=Sprite_Button[_0x532921(0x669)]['blockWidth']()*0x2+0x4;let _0x53406f=Graphics[_0x532921(0xb13)]-_0x5b8111;Imported['VisuMZ_0_CoreEngine']&&SceneManager[_0x532921(0xa9f)]()&&(_0x53406f+=_0x5b8111);const _0x23c59a=this[_0x532921(0x64e)](),_0x413d32=Graphics[_0x532921(0x187)]-_0x23c59a-this[_0x532921(0xae9)]()[_0x532921(0x1fc)]+Window_BattleStatus[_0x532921(0x669)][_0x532921(0x911)](),_0x10e5c7=0x0;return new Rectangle(_0x10e5c7,_0x23c59a,_0x53406f,_0x413d32);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x3a7)]=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x8f0)],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x8f0)]=function(){const _0x2d0c95=_0x46c6a8;VisuMZ[_0x2d0c95(0xa74)]['Scene_Battle_startActorSelection'][_0x2d0c95(0x515)](this),this['makeTargetSelectionMoreVisible']();},VisuMZ[_0x46c6a8(0xa74)]['Scene_Battle_startEnemySelection']=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x643)],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x643)]=function(){const _0x250cfe=_0x46c6a8;VisuMZ[_0x250cfe(0xa74)][_0x250cfe(0x540)][_0x250cfe(0x515)](this),this[_0x250cfe(0x44f)][_0x250cfe(0x24d)](),this[_0x250cfe(0x6c9)]();},Scene_Battle[_0x46c6a8(0x669)]['makeTargetSelectionMoreVisible']=function(){const _0x194601=_0x46c6a8,_0x30b281=this[_0x194601(0x753)]();['xp',_0x194601(0x23e),'border'][_0x194601(0x4a3)](_0x30b281)&&this[_0x194601(0x69c)]['close'](),(_0x30b281===_0x194601(0x9a1)||this[_0x194601(0x1af)]())&&(this[_0x194601(0x82f)][_0x194601(0x485)](),this[_0x194601(0x30f)][_0x194601(0x485)]());},VisuMZ['BattleCore'][_0x46c6a8(0x453)]=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x1f4)],Scene_Battle[_0x46c6a8(0x669)]['onActorOk']=function(){const _0x2e520e=_0x46c6a8;VisuMZ[_0x2e520e(0xa74)]['Scene_Battle_onActorOk'][_0x2e520e(0x515)](this),this[_0x2e520e(0xbf2)]();},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xa2b)]=function(){const _0x52b2bb=_0x46c6a8;return[_0x52b2bb(0xc28),_0x52b2bb(0x930),_0x52b2bb(0x942)][_0x52b2bb(0x4a3)](this['_actorCommandWindow'][_0x52b2bb(0x763)]());},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x246)]=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x622)],Scene_Battle['prototype'][_0x46c6a8(0x622)]=function(){const _0x4c4212=_0x46c6a8;this[_0x4c4212(0xa2b)]()?(this[_0x4c4212(0x624)][_0x4c4212(0xab7)](),this['_actorWindow'][_0x4c4212(0x9dd)](),this['_actorCommandWindow'][_0x4c4212(0xbf7)]()):VisuMZ[_0x4c4212(0xa74)]['Scene_Battle_onActorCancel'][_0x4c4212(0x515)](this),this['cancelTargetSelectionVisibility']();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xb68)]=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x142)],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x142)]=function(){const _0x2efc41=_0x46c6a8;if(!this[_0x2efc41(0x44f)][_0x2efc41(0x78f)]()){this['_enemyWindow']['activate']();return;}const _0xc2e0f9=BattleManager[_0x2efc41(0x819)]();_0xc2e0f9[_0x2efc41(0x372)](this[_0x2efc41(0x44f)][_0x2efc41(0x78f)]()),this[_0x2efc41(0x44f)][_0x2efc41(0xacb)](),VisuMZ[_0x2efc41(0xa74)][_0x2efc41(0xb68)][_0x2efc41(0x515)](this),this[_0x2efc41(0xbf2)]();},VisuMZ['BattleCore']['Scene_Battle_onEnemyCancel']=Scene_Battle['prototype'][_0x46c6a8(0x339)],Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x339)]=function(){const _0x37ef31=_0x46c6a8;this[_0x37ef31(0xa2b)]()?(this[_0x37ef31(0x624)]['show'](),this['_enemyWindow'][_0x37ef31(0x9dd)](),this[_0x37ef31(0x69c)][_0x37ef31(0xbf7)]()):VisuMZ[_0x37ef31(0xa74)][_0x37ef31(0xb48)][_0x37ef31(0x515)](this),this[_0x37ef31(0x53c)](),this[_0x37ef31(0x44f)][_0x37ef31(0xacb)]();},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xbf2)]=function(){const _0xe634f1=_0x46c6a8,_0x459016=this[_0xe634f1(0x753)]();(_0x459016===_0xe634f1(0x9a1)||this[_0xe634f1(0x1af)]())&&(this[_0xe634f1(0x82f)]['open'](),this['_skillWindow'][_0xe634f1(0x998)]&&this['_skillWindow']['show'](),this[_0xe634f1(0x30f)][_0xe634f1(0x7a9)](),this['_itemWindow'][_0xe634f1(0x998)]&&this['_itemWindow']['show']());},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x53c)]=function(){const _0x5d53dc=_0x46c6a8,_0xf5bd17=this[_0x5d53dc(0x753)]();['xp',_0x5d53dc(0x23e),_0x5d53dc(0x9a1)][_0x5d53dc(0x4a3)](_0xf5bd17)&&this[_0x5d53dc(0x69c)]['open'](),this[_0x5d53dc(0xbf2)]();},Sprite_Battler['_motionSpeed']=VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)]['Actor'][_0x46c6a8(0xa5f)],VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x430)]=Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x8c3)],Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x8c3)]=function(){const _0x510365=_0x46c6a8;VisuMZ[_0x510365(0xa74)][_0x510365(0x430)][_0x510365(0x515)](this),this[_0x510365(0x4d3)]();if(this[_0x510365(0x2cf)]===Sprite_Enemy)this['createShadowSprite']();this[_0x510365(0x914)]();},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x4d3)]=function(){const _0x22bf39=_0x46c6a8;this[_0x22bf39(0xc31)]=0x0,this[_0x22bf39(0x960)]=0x0,this[_0x22bf39(0xb44)]=0x0,this[_0x22bf39(0x2d2)]=0x0,this[_0x22bf39(0x126)]=0x0,this[_0x22bf39(0x2c6)]=0x0,this['_floatEasing']=_0x22bf39(0x3de),this[_0x22bf39(0xa8c)]=0x0,this['_jumpMaxHeight']=0x0,this[_0x22bf39(0x870)]=0x0,this[_0x22bf39(0x84a)]=0x0,this[_0x22bf39(0xaa3)]=0xff,this[_0x22bf39(0x50b)]=0x0,this['_opacityWholeDuration']=0x0,this[_0x22bf39(0x317)]='Linear',this[_0x22bf39(0x989)]=0x0,this[_0x22bf39(0xa73)]=0x0,this[_0x22bf39(0x5ec)]=0x0,this[_0x22bf39(0x5c2)]=0x0,this[_0x22bf39(0x10e)]=_0x22bf39(0x3de),this[_0x22bf39(0xb0a)]=!![],this[_0x22bf39(0x1f2)]=0x0,this['_skewY']=0x0,this['_targetSkewX']=0x0,this['_targetSkewY']=0x0,this[_0x22bf39(0x742)]=0x0,this[_0x22bf39(0x8dd)]=0x0,this[_0x22bf39(0xc44)]=_0x22bf39(0x3de),this['_growX']=0x1,this[_0x22bf39(0x4fd)]=0x1,this[_0x22bf39(0xade)]=0x1,this[_0x22bf39(0x209)]=0x1,this[_0x22bf39(0x70a)]=0x0,this[_0x22bf39(0x96c)]=0x0,this[_0x22bf39(0x4c4)]=_0x22bf39(0x3de),this[_0x22bf39(0xb86)]=0x1,this[_0x22bf39(0x1ec)]=0x0,this[_0x22bf39(0xc0e)]=0x0,this['_homeDuration']=0x0,this[_0x22bf39(0x193)]=0x0,this[_0x22bf39(0xc56)]=_0x22bf39(0x3de),this[_0x22bf39(0x1b5)]=0x0,this[_0x22bf39(0x7fa)]=0x0;},Sprite_Battler[_0x46c6a8(0x669)]['createShadowSprite']=function(){const _0x2777de=_0x46c6a8;this['_shadowSprite']=new Sprite(),this['_shadowSprite'][_0x2777de(0x64c)]=ImageManager[_0x2777de(0xaec)]('Shadow2'),this[_0x2777de(0x4de)][_0x2777de(0x64c)][_0x2777de(0x530)]=VisuMZ[_0x2777de(0xa74)][_0x2777de(0x154)][_0x2777de(0xa6f)][_0x2777de(0x609)],this[_0x2777de(0x4de)][_0x2777de(0x2da)]['x']=0.5,this[_0x2777de(0x4de)][_0x2777de(0x2da)]['y']=0.5,this['_shadowSprite']['y']=-0x2,this[_0x2777de(0x4de)][_0x2777de(0x6cb)]=![],this[_0x2777de(0xa85)](this[_0x2777de(0x4de)]);},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x914)]=function(){const _0x112f42=_0x46c6a8;this[_0x112f42(0x2f8)]=new Sprite(),this[_0x112f42(0x2f8)]['anchor']['x']=0.5,this[_0x112f42(0x2f8)][_0x112f42(0x2da)]['y']=0.5,this['addChild'](this[_0x112f42(0x2f8)]);},Sprite_Battler['prototype'][_0x46c6a8(0x7ba)]=function(){const _0x1af168=_0x46c6a8;if(this[_0x1af168(0x969)]&&this[_0x1af168(0x969)]()){Sprite[_0x1af168(0x669)][_0x1af168(0x7ba)][_0x1af168(0x515)](this);return;}const _0x49e61c=this[_0x1af168(0x2f8)];if(!_0x49e61c)return;!_0x49e61c[_0x1af168(0x713)]&&_0x49e61c['_createColorFilter'](),_0x49e61c[_0x1af168(0x713)][_0x1af168(0x3ad)](this[_0x1af168(0x6fa)]),_0x49e61c[_0x1af168(0x713)][_0x1af168(0x278)](this['_blendColor']),_0x49e61c[_0x1af168(0x713)]['setColorTone'](this[_0x1af168(0xc5f)]);},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x65e)]=function(){const _0x30a61a=_0x46c6a8;if(!this[_0x30a61a(0x2f8)])return;if(this[_0x30a61a(0x4de)]){const _0x5beb78=this['getChildIndex'](this[_0x30a61a(0x2f8)]);this[_0x30a61a(0x462)](this[_0x30a61a(0x4de)],_0x5beb78),this[_0x30a61a(0x3ca)]();}this['_svBattlerSprite']&&this[_0x30a61a(0x2f8)][_0x30a61a(0xa85)](this['_svBattlerSprite']),this[_0x30a61a(0x3a0)]&&this[_0x30a61a(0x2f8)][_0x30a61a(0xa85)](this['_weaponSprite']),this[_0x30a61a(0x7dd)]&&this[_0x30a61a(0x2f8)]['addChild'](this[_0x30a61a(0x7dd)]),this[_0x30a61a(0x56f)]&&this[_0x30a61a(0x2f8)][_0x30a61a(0xa85)](this[_0x30a61a(0x56f)]),this[_0x30a61a(0x7f1)]&&this[_0x30a61a(0x2f8)][_0x30a61a(0xa85)](this[_0x30a61a(0x7f1)]);},Sprite_Battler[_0x46c6a8(0x669)]['updateShadowVisibility']=function(){const _0x1c0698=_0x46c6a8;if(!this[_0x1c0698(0x4de)])return;if(this[_0x1c0698(0xa4d)]&&this['_battler'][_0x1c0698(0x71c)]()){const _0x2a2efe=this['_shadowSprite'][_0x1c0698(0x64c)];this[_0x1c0698(0x4de)][_0x1c0698(0x1c7)](0x0,0x0,_0x2a2efe[_0x1c0698(0x1e1)],_0x2a2efe[_0x1c0698(0x1fc)]);}else this[_0x1c0698(0x4de)][_0x1c0698(0x1c7)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x954)]=function(){const _0xf8ad98=_0x46c6a8;return SceneManager[_0xf8ad98(0x849)]()?SceneManager[_0xf8ad98(0x7a7)][_0xf8ad98(0x81e)][_0xf8ad98(0x60f)]:this[_0xf8ad98(0x78a)];},Sprite_Battler['prototype'][_0x46c6a8(0x31f)]=function(_0x115adc,_0x97ef53){const _0x5eebed=_0x46c6a8;if(!this[_0x5eebed(0xa4d)][_0x5eebed(0x591)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x3d55cb=VisuMZ[_0x5eebed(0xa74)][_0x5eebed(0x154)]['Damage'],_0x2f6e73=new Sprite_Damage();_0x2f6e73['_duration']=_0x3d55cb[_0x5eebed(0x18d)],this[_0x5eebed(0x8f8)](_0x2f6e73),_0x2f6e73[_0x5eebed(0x31f)](_0x115adc,_0x97ef53),this['addDamageSprite'](_0x2f6e73);},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x17b)]=function(_0x1f8330,_0x4c903f,_0x3421c7){const _0x161266=_0x46c6a8;if(!this['_battler'][_0x161266(0x591)]())return;if(BattleManager[_0x161266(0xad6)]())return;const _0x474b92=VisuMZ[_0x161266(0xa74)]['Settings']['Damage'],_0x2c44cd=new Sprite_Damage();_0x2c44cd[_0x161266(0x5f0)]=_0x474b92[_0x161266(0x18d)],this[_0x161266(0x8f8)](_0x2c44cd),_0x2c44cd['setupIconTextPopup'](_0x1f8330,_0x4c903f,_0x3421c7),this[_0x161266(0x274)](_0x2c44cd);},Sprite_Battler['prototype'][_0x46c6a8(0x6d7)]=function(){const _0x3d5eaf=_0x46c6a8;if(!this[_0x3d5eaf(0xa4d)][_0x3d5eaf(0xb56)]())return;while(this[_0x3d5eaf(0xa4d)]['isDamagePopupRequested']()){this['_battler']['isSpriteVisible']()&&this[_0x3d5eaf(0xc40)]();}this[_0x3d5eaf(0xa4d)][_0x3d5eaf(0x9a7)](),this[_0x3d5eaf(0xa4d)]['clearResult']();},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xc40)]=function(){const _0x49dce6=_0x46c6a8;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x5a79a2=VisuMZ[_0x49dce6(0xa74)][_0x49dce6(0x154)][_0x49dce6(0x1df)],_0x52a354=new Sprite_Damage();_0x52a354[_0x49dce6(0x5f0)]=_0x5a79a2['PopupDuration'],this[_0x49dce6(0x8f8)](_0x52a354),_0x52a354[_0x49dce6(0x208)](this[_0x49dce6(0xa4d)]),_0x52a354['setupBattleCore'](this[_0x49dce6(0xa4d)]),this[_0x49dce6(0x274)](_0x52a354);},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x274)]=function(_0x1a3bad){const _0x2d5956=_0x46c6a8;this[_0x2d5956(0x1a2)]['push'](_0x1a3bad);if(this[_0x2d5956(0x7b0)]()){const _0x24b98f=SceneManager[_0x2d5956(0x7a7)][_0x2d5956(0x624)];if(_0x24b98f)_0x24b98f[_0x2d5956(0x274)](_0x1a3bad,this[_0x2d5956(0xa4d)]);}else{this[_0x2d5956(0x954)]()[_0x2d5956(0xa85)](_0x1a3bad);if(SceneManager[_0x2d5956(0x5ee)]())_0x1a3bad['scale']['x']=-0x1;}},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x7b0)]=function(){const _0x4bab51=_0x46c6a8;return!$gameSystem[_0x4bab51(0x33c)]()&&this[_0x4bab51(0xa4d)]&&this['_battler'][_0x4bab51(0x4ec)]();return!$gameSystem[_0x4bab51(0x33c)]()&&this[_0x4bab51(0xa4d)]&&this[_0x4bab51(0xa4d)][_0x4bab51(0x4ec)]()&&Window_BattleStatus[_0x4bab51(0x669)][_0x4bab51(0x753)]()===_0x4bab51(0x23e);},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x8f8)]=function(_0x43fda1){const _0x525fbc=_0x46c6a8;this[_0x525fbc(0x872)](_0x43fda1,!![]);const _0x52c3a8=VisuMZ[_0x525fbc(0xa74)]['Settings'][_0x525fbc(0x1df)],_0x30cd01=SceneManager[_0x525fbc(0x5ee)]()?-0x1:0x1;if(_0x52c3a8[_0x525fbc(0x23f)])for(const _0x1efb56 of this[_0x525fbc(0x1a2)]){_0x1efb56['x']+=_0x52c3a8['PopupShiftX']*_0x30cd01,_0x1efb56['y']+=_0x52c3a8[_0x525fbc(0xbe9)];}else{const _0x3c30ca=this[_0x525fbc(0x1a2)][this[_0x525fbc(0x1a2)][_0x525fbc(0x50d)]-0x1];_0x3c30ca&&(_0x43fda1['x']=_0x3c30ca['x']+_0x52c3a8[_0x525fbc(0x30b)]*_0x30cd01,_0x43fda1['y']=_0x3c30ca['y']+_0x52c3a8[_0x525fbc(0xbe9)]);}},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x872)]=function(_0x13b5d2,_0x1cae65){const _0x5a0de9=_0x46c6a8,_0x284bcd=SceneManager[_0x5a0de9(0x5ee)]()?-0x1:0x1;let _0x4dcdb6=this[_0x5a0de9(0xc31)];_0x4dcdb6+=this[_0x5a0de9(0x2de)]();let _0x2b73a6=this[_0x5a0de9(0x960)];const _0x9125ae=this[_0x5a0de9(0x2f8)][_0x5a0de9(0x918)]['y'];_0x2b73a6+=this['extraPositionY']();const _0x5aad90=SceneManager[_0x5a0de9(0x7a7)][_0x5a0de9(0x624)];if(_0x5aad90&&this[_0x5a0de9(0x78a)]===_0x5aad90){_0x4dcdb6+=_0x5aad90['x']-this[_0x5a0de9(0x8e4)]();const _0x4b1aef=_0x5aad90[_0x5a0de9(0x1f8)]()*0x3/0x4;_0x2b73a6=_0x5aad90['y']+_0x4b1aef,_0x2b73a6=Math[_0x5a0de9(0x9bd)](_0x2b73a6,_0x5aad90['y']+this['y']-this[_0x5a0de9(0x1fc)]+_0x4b1aef);}_0x13b5d2['x']=Math[_0x5a0de9(0xa5e)](_0x4dcdb6+this[_0x5a0de9(0x8e4)]()*_0x284bcd),_0x13b5d2['y']=Math[_0x5a0de9(0xa5e)](_0x2b73a6+this['damageOffsetY']());},VisuMZ['BattleCore'][_0x46c6a8(0x308)]=Sprite_Battler['prototype'][_0x46c6a8(0x8e4)],Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x8e4)]=function(){const _0x23ea74=_0x46c6a8;let _0x1cef8d=VisuMZ[_0x23ea74(0xa74)][_0x23ea74(0x308)][_0x23ea74(0x515)](this),_0x57c699=VisuMZ[_0x23ea74(0xa74)][_0x23ea74(0x154)]['Damage']['PopupOffsetX']||0x0;return _0x57c699+=this[_0x23ea74(0xa4d)][_0x23ea74(0xa35)](),Math[_0x23ea74(0xa5e)](_0x1cef8d+_0x57c699);},VisuMZ['BattleCore']['Sprite_Battler_damageOffsetY']=Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x31c)],Sprite_Battler[_0x46c6a8(0x669)]['damageOffsetY']=function(){const _0x146079=_0x46c6a8;let _0x1857ab=VisuMZ['BattleCore'][_0x146079(0xa90)][_0x146079(0x515)](this);switch(this[_0x146079(0xa4d)][_0x146079(0x1dd)]()){case _0x146079(0x366):_0x1857ab-=this[_0x146079(0x1fc)]*this[_0x146079(0x918)]['y'];break;case'center':_0x1857ab-=this[_0x146079(0x1fc)]*this[_0x146079(0x918)]['y']*0.5;break;}let _0x398084=VisuMZ[_0x146079(0xa74)][_0x146079(0x154)][_0x146079(0x1df)][_0x146079(0x939)]||0x0;return _0x398084+=this[_0x146079(0xa4d)]['damagePopupOffsetY'](),Math[_0x146079(0xa5e)](_0x1857ab+_0x398084);},Sprite_Actor['prototype']['damageOffsetX']=function(){const _0x1eb75c=_0x46c6a8;return Sprite_Battler[_0x1eb75c(0x669)]['damageOffsetX'][_0x1eb75c(0x515)](this);},Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x31c)]=function(){const _0x4a7d04=_0x46c6a8;return Sprite_Battler[_0x4a7d04(0x669)][_0x4a7d04(0x31c)][_0x4a7d04(0x515)](this);},Sprite_Battler['prototype'][_0x46c6a8(0x7df)]=function(_0x518f44){const _0x347b81=_0x46c6a8;this[_0x347b81(0x7b0)]()?SceneManager[_0x347b81(0x7a7)][_0x347b81(0x624)][_0x347b81(0x54e)](_0x518f44):(this['damageContainer']()[_0x347b81(0x806)](_0x518f44),this[_0x347b81(0x1a2)][_0x347b81(0x45d)](_0x518f44),_0x518f44[_0x347b81(0x593)]());},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xa41)]=Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x6ae)],Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x6ae)]=function(_0x2c5fb1,_0x39bf56){const _0x5e41b2=_0x46c6a8,_0xa27189=VisuMZ[_0x5e41b2(0xa74)][_0x5e41b2(0x154)];if(this['constructor']===Sprite_Actor)_0x2c5fb1+=_0xa27189[_0x5e41b2(0xa6f)][_0x5e41b2(0x20c)]||0x0,_0x39bf56+=_0xa27189[_0x5e41b2(0xa6f)]['OffsetY']||0x0;else this[_0x5e41b2(0x2cf)]===Sprite_Enemy&&(_0x2c5fb1+=_0xa27189[_0x5e41b2(0x6de)][_0x5e41b2(0x20c)]||0x0,_0x39bf56+=_0xa27189[_0x5e41b2(0x6de)]['OffsetY']||0x0);this[_0x5e41b2(0xa4d)]&&(_0x2c5fb1=this[_0x5e41b2(0xa4d)][_0x5e41b2(0xa99)]??_0x2c5fb1,_0x39bf56=this['_battler'][_0x5e41b2(0x7c7)]??_0x39bf56),VisuMZ[_0x5e41b2(0xa74)]['Sprite_Battler_setHome'][_0x5e41b2(0x515)](this,_0x2c5fb1,_0x39bf56),this[_0x5e41b2(0x1ec)]=this['_homeX'],this['_targetHomeY']=this[_0x5e41b2(0x128)],this[_0x5e41b2(0x1d1)]=0x0,this[_0x5e41b2(0x193)]=0x0,this['_homeEasing']=_0x5e41b2(0x3de);},VisuMZ[_0x46c6a8(0xa74)]['Sprite_Battler_update']=Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x50f)],Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x50f)]=function(){const _0x10470f=_0x46c6a8;VisuMZ[_0x10470f(0xa74)][_0x10470f(0x647)]['call'](this),!this[_0x10470f(0xa4d)]&&this[_0x10470f(0x96a)]&&(this[_0x10470f(0x96a)][_0x10470f(0x6cb)]=![]);},VisuMZ[_0x46c6a8(0xa74)]['Sprite_Battler_updateMain']=Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x8a6)],Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x8a6)]=function(){const _0x4ce36b=_0x46c6a8;this[_0x4ce36b(0x41e)](),this[_0x4ce36b(0x4e2)](),this[_0x4ce36b(0xa6b)](),this[_0x4ce36b(0x29f)](),VisuMZ['BattleCore'][_0x4ce36b(0x4a0)]['call'](this),this[_0x4ce36b(0x4c5)](),this[_0x4ce36b(0x255)]();if(this[_0x4ce36b(0x2cf)]===Sprite_Enemy)this[_0x4ce36b(0xc23)]();},VisuMZ[_0x46c6a8(0xa74)]['Sprite_Battler_updatePosition']=Sprite_Battler['prototype'][_0x46c6a8(0x28b)],Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x28b)]=function(){const _0x493ec5=_0x46c6a8;this[_0x493ec5(0xa76)](),VisuMZ['BattleCore'][_0x493ec5(0x225)][_0x493ec5(0x515)](this),this[_0x493ec5(0x876)](),this['updateOpacity']();},Sprite_Battler['prototype']['updateSelectionEffect']=function(){const _0x2f7706=_0x46c6a8,_0x1e2300=this[_0x2f7706(0x127)]();if(this[_0x2f7706(0xa4d)][_0x2f7706(0x254)]())this[_0x2f7706(0x2c3)]++,Graphics['frameCount']%0x1e<0xf?_0x1e2300['setBlendColor']([0xff,0xff,0xff,0x40]):_0x1e2300[_0x2f7706(0x278)]([0x0,0x0,0x0,0x0]);else this[_0x2f7706(0x2c3)]>0x0&&(this[_0x2f7706(0x2c3)]=0x0,_0x1e2300[_0x2f7706(0x278)]([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x895)]=function(_0x3b4452,_0x925d96){const _0x180df0=_0x46c6a8,_0x137dfc=VisuMZ['BattleCore']['Settings'];if(this[_0x180df0(0x2cf)]===Sprite_Actor)_0x3b4452+=_0x137dfc[_0x180df0(0xa6f)][_0x180df0(0x20c)]||0x0,_0x925d96+=_0x137dfc[_0x180df0(0xa6f)][_0x180df0(0x4e7)]||0x0;else this[_0x180df0(0x2cf)]===Sprite_Enemy&&(_0x3b4452+=_0x137dfc['Enemy'][_0x180df0(0x20c)]||0x0,_0x925d96+=_0x137dfc['Enemy'][_0x180df0(0x4e7)]||0x0);const _0x92c047=_0x3b4452-this[_0x180df0(0x637)],_0x105d80=_0x925d96-this[_0x180df0(0x128)];this[_0x180df0(0x637)]=_0x3b4452,this[_0x180df0(0x128)]=_0x925d96,this[_0x180df0(0x338)]-=_0x92c047,this[_0x180df0(0x2be)]-=_0x105d80,this[_0x180df0(0x688)]-=_0x92c047,this[_0x180df0(0xb2c)]-=_0x105d80,this['updatePosition']();},Sprite_Battler[_0x46c6a8(0x669)]['startHomeMove']=function(_0x134d26,_0x110ea8,_0x3732c,_0x3ae0e7){const _0x4de4ec=_0x46c6a8,_0x306d4a=VisuMZ[_0x4de4ec(0xa74)][_0x4de4ec(0x154)];if(this[_0x4de4ec(0x2cf)]===Sprite_Actor)_0x134d26+=_0x306d4a['Actor'][_0x4de4ec(0x20c)]||0x0,_0x110ea8+=_0x306d4a[_0x4de4ec(0xa6f)][_0x4de4ec(0x4e7)]||0x0;else this[_0x4de4ec(0x2cf)]===Sprite_Enemy&&(_0x134d26+=_0x306d4a[_0x4de4ec(0x6de)][_0x4de4ec(0x20c)]||0x0,_0x110ea8+=_0x306d4a[_0x4de4ec(0x6de)][_0x4de4ec(0x4e7)]||0x0);(this['_targetHomeX']!==_0x134d26||this['_targetHomeY']!==_0x110ea8)&&(this[_0x4de4ec(0x1ec)]=_0x134d26,this[_0x4de4ec(0xc0e)]=_0x110ea8,this[_0x4de4ec(0x1d1)]=_0x3732c,this[_0x4de4ec(0x193)]=_0x3732c,this[_0x4de4ec(0xc56)]=_0x3ae0e7,_0x3732c<=0x0&&this[_0x4de4ec(0xad2)]());},Sprite_Battler['prototype'][_0x46c6a8(0xa76)]=function(){const _0x2a00f5=_0x46c6a8;if(this[_0x2a00f5(0x1d1)]<=0x0)return;const _0x2060e9=this[_0x2a00f5(0x1d1)],_0x23febe=this[_0x2a00f5(0x193)],_0x2a14f5=this[_0x2a00f5(0xc56)];Imported[_0x2a00f5(0x12b)]?(this['_homeX']=this[_0x2a00f5(0x5b5)](this['_homeX'],this[_0x2a00f5(0x1ec)],_0x2060e9,_0x23febe,_0x2a14f5),this['_homeY']=this[_0x2a00f5(0x5b5)](this[_0x2a00f5(0x128)],this[_0x2a00f5(0xc0e)],_0x2060e9,_0x23febe,_0x2a14f5)):(this[_0x2a00f5(0x637)]=(this[_0x2a00f5(0x637)]*(_0x2060e9-0x1)+this[_0x2a00f5(0x1ec)])/_0x2060e9,this[_0x2a00f5(0x128)]=(this[_0x2a00f5(0x128)]*(_0x2060e9-0x1)+this[_0x2a00f5(0xc0e)])/_0x2060e9);this[_0x2a00f5(0x1d1)]--;if(this['_homeDuration']<=0x0)this[_0x2a00f5(0xad2)]();},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xad2)]=function(){const _0x4b7211=_0x46c6a8;this[_0x4b7211(0x637)]=this[_0x4b7211(0x1ec)],this['_homeY']=this[_0x4b7211(0xc0e)];},Sprite_Battler[_0x46c6a8(0x669)]['updatePositionBattleCore']=function(){const _0x4967a4=_0x46c6a8;this[_0x4967a4(0xc31)]=this['x'],this[_0x4967a4(0x960)]=this['y'],this[_0x4967a4(0xb7f)](),this[_0x4967a4(0x8ae)](),this['x']+=this[_0x4967a4(0x2de)](),this['y']+=this[_0x4967a4(0x40b)](),this['y']+=this[_0x4967a4(0x6cf)](),this['x']=Math[_0x4967a4(0x2f2)](this['x']),this['y']=Math['floor'](this['y']);},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x2de)]=function(){let _0x3ce629=0x0;return _0x3ce629;},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x40b)]=function(){const _0x23e74c=_0x46c6a8;let _0x292316=0x0;return this['_battler']&&!this['_battler'][_0x23e74c(0x438)]()&&(_0x292316-=this['_floatHeight'],_0x292316-=this[_0x23e74c(0xa8c)]),_0x292316;},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x6cf)]=function(){const _0x151c12=_0x46c6a8;let _0x2e42a4=0x0;if(this['_distortionSprite']&&this[_0x151c12(0x2cf)]!==Sprite_SvEnemy){const _0x5ea1e6=this[_0x151c12(0x2f8)][_0x151c12(0x918)]['y'];_0x2e42a4-=(_0x5ea1e6-0x1)*this[_0x151c12(0x1fc)];}return _0x2e42a4;},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x29f)]=function(){const _0x374312=_0x46c6a8,_0x20a375=this['_battler']&&this[_0x374312(0xa4d)]['isBattlerFlipped']();this[_0x374312(0xb86)]=(_0x20a375?-0x1:0x1)*Math[_0x374312(0xc59)](this[_0x374312(0x918)]['x']);},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xae2)]=function(_0x37d8cd,_0x404cbe,_0x3a7ea8){const _0x254e0d=_0x46c6a8;if(!this[_0x254e0d(0x805)]())return;if(this[_0x254e0d(0x2d2)]===_0x37d8cd)return;this[_0x254e0d(0x2d2)]=_0x37d8cd,this['_floatDuration']=_0x404cbe,this[_0x254e0d(0x2c6)]=_0x404cbe,this[_0x254e0d(0x66e)]=_0x3a7ea8||_0x254e0d(0x3de);if(_0x404cbe<=0x0)this[_0x254e0d(0xb44)]=_0x37d8cd;},Sprite_Battler[_0x46c6a8(0x669)]['updateFloat']=function(){const _0x191a76=_0x46c6a8;if(this[_0x191a76(0x126)]<=0x0)return;const _0x507415=this['_floatDuration'],_0x59296f=this[_0x191a76(0x2c6)],_0xf05cd7=this['_floatEasing'];Imported[_0x191a76(0x12b)]?this[_0x191a76(0xb44)]=this['applyEasing'](this[_0x191a76(0xb44)],this[_0x191a76(0x2d2)],_0x507415,_0x59296f,_0xf05cd7):this['_floatHeight']=(this[_0x191a76(0xb44)]*(_0x507415-0x1)+this[_0x191a76(0x2d2)])/_0x507415;this[_0x191a76(0x126)]--;if(this['_floatDuration']<=0x0)this['onFloatEnd']();},Sprite_Battler[_0x46c6a8(0x669)]['onFloatEnd']=function(){const _0x39e2ef=_0x46c6a8;this[_0x39e2ef(0xb44)]=this[_0x39e2ef(0x2d2)];},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x98d)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0x46c6a8(0x669)]['startJump']=function(_0x36a4e0,_0x282ea1){const _0x5270fc=_0x46c6a8;if(!this[_0x5270fc(0x805)]())return;if(_0x282ea1<=0x0)return;this[_0x5270fc(0x75f)]=_0x36a4e0,this['_jumpDuration']=_0x282ea1,this['_jumpWholeDuration']=_0x282ea1;},Sprite_Battler[_0x46c6a8(0x669)]['updateJump']=function(){const _0x133b33=_0x46c6a8;if(this[_0x133b33(0x870)]<=0x0)return;const _0x28545f=this[_0x133b33(0x84a)]-this[_0x133b33(0x870)],_0x254bb8=this[_0x133b33(0x84a)]/0x2,_0x294f7f=this[_0x133b33(0x75f)],_0x4e1daa=-_0x294f7f/Math[_0x133b33(0x54b)](_0x254bb8,0x2);this[_0x133b33(0xa8c)]=_0x4e1daa*Math[_0x133b33(0x54b)](_0x28545f-_0x254bb8,0x2)+_0x294f7f,this[_0x133b33(0x870)]--;if(this[_0x133b33(0x870)]<=0x0)return this[_0x133b33(0x401)]();},Sprite_Battler['prototype'][_0x46c6a8(0x401)]=function(){const _0x5f53f8=_0x46c6a8;this[_0x5f53f8(0xa8c)]=0x0;},Sprite_Battler['prototype']['isJumping']=function(){return this['_jumpDuration']>0x0;},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x58f)]=function(_0x4019d2,_0x2dc416,_0x45be98){const _0x26f060=_0x46c6a8;if(this[_0x26f060(0xaa3)]===_0x4019d2)return;this[_0x26f060(0xaa3)]=_0x4019d2,this['_opacityDuration']=_0x2dc416,this[_0x26f060(0xc4d)]=_0x2dc416,this[_0x26f060(0x317)]=_0x45be98||'Linear';if(_0x2dc416<=0x0)this[_0x26f060(0x1d7)]=_0x4019d2;},Sprite_Battler['prototype']['updateOpacity']=function(){const _0x4ddd81=_0x46c6a8;if(this['constructor']['name']===_0x4ddd81(0x775))return;if(this[_0x4ddd81(0x50b)]<=0x0)return;const _0x344e4f=this[_0x4ddd81(0x50b)],_0x545fea=this['_opacityWholeDuration'],_0x273a33=this[_0x4ddd81(0x317)];Imported[_0x4ddd81(0x12b)]?this['opacity']=this[_0x4ddd81(0x5b5)](this[_0x4ddd81(0x1d7)],this[_0x4ddd81(0xaa3)],_0x344e4f,_0x545fea,_0x273a33):this[_0x4ddd81(0x1d7)]=(this[_0x4ddd81(0x1d7)]*(_0x344e4f-0x1)+this[_0x4ddd81(0xaa3)])/_0x344e4f;this['_opacityDuration']--;if(this['_opacityDuration']<=0x0)this['onOpacityEnd']();},Sprite_Battler['prototype'][_0x46c6a8(0x3da)]=function(){const _0x1f63a2=_0x46c6a8;this[_0x1f63a2(0x1d7)]=this[_0x1f63a2(0xaa3)];},Sprite_Battler['prototype'][_0x46c6a8(0x96d)]=function(){const _0x20fccb=_0x46c6a8;return this[_0x20fccb(0x50b)]>0x0;},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xc23)]=function(){const _0x292d34=_0x46c6a8;this[_0x292d34(0x4de)][_0x292d34(0x6cb)]=this[_0x292d34(0xa4d)][_0x292d34(0x548)](),this[_0x292d34(0x46e)]();},Sprite_Battler[_0x46c6a8(0x669)]['updateShadowPosition']=function(){const _0x1ae521=_0x46c6a8;if(!this[_0x1ae521(0x4de)])return;this['_shadowSprite']['y']=this[_0x1ae521(0x960)]-this['y']-0x2;},Sprite_Battler[_0x46c6a8(0x669)]['updateShadowScale']=function(){const _0x1e3ba9=_0x46c6a8;if(!this['_battler'])return;this['_shadowScaleX']=this[_0x1e3ba9(0xa4d)]['battlerShadowScaleX'](),this['_shadowScaleY']=this[_0x1e3ba9(0xa4d)][_0x1e3ba9(0x5a5)]();},Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x431)]=function(){const _0x44977d=_0x46c6a8,_0x21670e=this[_0x44977d(0x4ec)]()?this[_0x44977d(0x185)]():this[_0x44977d(0x78f)]();if(_0x21670e){const _0xf3806e=_0x21670e['note'];if(_0xf3806e[_0x44977d(0x712)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0xf3806e['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase['prototype'][_0x46c6a8(0x5a5)]=function(){const _0x1e1b09=_0x46c6a8,_0x599ccd=this[_0x1e1b09(0x4ec)]()?this[_0x1e1b09(0x185)]():this[_0x1e1b09(0x78f)]();if(_0x599ccd){const _0x2924da=_0x599ccd[_0x1e1b09(0xb03)];if(_0x2924da['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x2924da[_0x1e1b09(0x712)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x46c6a8(0x669)]['updateScale']=function(){const _0x2be276=_0x46c6a8;if(this[_0x2be276(0x2cf)]===Sprite_SvEnemy)return;this[_0x2be276(0xb69)](),this[_0x2be276(0x7ad)]();},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x7ad)]=function(){const _0x435b94=_0x46c6a8,_0xd22cbb=this['_distortionSprite'];_0xd22cbb&&(_0xd22cbb['scale']['x']=this[_0x435b94(0xc46)](),_0xd22cbb[_0x435b94(0x918)]['y']=this[_0x435b94(0x3df)]());},Sprite_Battler[_0x46c6a8(0x669)]['mainSpriteScaleX']=function(){const _0xaea008=_0x46c6a8;let _0x5529a7=0x1;return _0x5529a7*=this[_0xaea008(0xb86)],_0x5529a7*=this[_0xaea008(0x303)],_0x5529a7;},Sprite_Battler['prototype'][_0x46c6a8(0x3df)]=function(){const _0x284a4e=_0x46c6a8;let _0x710bf2=0x1;return _0x710bf2*=this[_0x284a4e(0x4fd)],_0x710bf2;},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x3c8)]=function(){const _0x3f7aac=_0x46c6a8;return this[_0x3f7aac(0x1e1)]*this['mainSpriteScaleX']();},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x230)]=function(){return this['height']*this['mainSpriteScaleY']();},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x48d)]=function(_0x139d8a,_0x34bfe3,_0x4b94aa,_0x135df9){const _0x39675a=_0x46c6a8;if(!this[_0x39675a(0x805)]())return;if(!this[_0x39675a(0x2f8)])return;if(this['_targetGrowX']===_0x139d8a&&this[_0x39675a(0x209)]===_0x34bfe3)return;this[_0x39675a(0xade)]=_0x139d8a,this['_targetGrowY']=_0x34bfe3,this['_growDuration']=_0x4b94aa,this[_0x39675a(0x96c)]=_0x4b94aa,this[_0x39675a(0x4c4)]=_0x135df9||_0x39675a(0x3de),_0x4b94aa<=0x0&&(this[_0x39675a(0x303)]=this[_0x39675a(0xade)],this[_0x39675a(0x4fd)]=this[_0x39675a(0x209)]);},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xb69)]=function(){const _0xf6671a=_0x46c6a8;if(this['_growDuration']<=0x0)return;if(!this[_0xf6671a(0x2f8)])return;const _0x7d87e3=this[_0xf6671a(0x70a)],_0x19ff62=this[_0xf6671a(0x96c)],_0xf51626=this['_growEasing'];Imported[_0xf6671a(0x12b)]?(this[_0xf6671a(0x303)]=this['applyEasing'](this['_growX'],this[_0xf6671a(0xade)],_0x7d87e3,_0x19ff62,_0xf51626),this['_growY']=this[_0xf6671a(0x5b5)](this[_0xf6671a(0x4fd)],this[_0xf6671a(0x209)],_0x7d87e3,_0x19ff62,_0xf51626)):(this['_growX']=(this['_growX']*(_0x7d87e3-0x1)+this[_0xf6671a(0xade)])/_0x7d87e3,this['_growY']=(this['_growY']*(_0x7d87e3-0x1)+this[_0xf6671a(0x209)])/_0x7d87e3);this['_growDuration']--;if(this[_0xf6671a(0x70a)]<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x46c6a8(0x669)]['onGrowEnd']=function(){const _0x181bc0=_0x46c6a8;this[_0x181bc0(0x303)]=this['_targetGrowX'],this['_growY']=this['_targetGrowY'];},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x6af)]=function(){const _0x32030f=_0x46c6a8;return this[_0x32030f(0x70a)]>0x0;},Sprite_Battler['prototype']['startSkew']=function(_0x36ccd6,_0x2df71c,_0x20d855,_0x3070ff){const _0x2a2c35=_0x46c6a8;if(!this[_0x2a2c35(0x805)]())return;if(!this[_0x2a2c35(0x2f8)])return;if(this[_0x2a2c35(0x7aa)]===_0x36ccd6&&this[_0x2a2c35(0x273)]===_0x2df71c)return;this[_0x2a2c35(0x7aa)]=_0x36ccd6,this[_0x2a2c35(0x273)]=_0x2df71c,this[_0x2a2c35(0x742)]=_0x20d855,this[_0x2a2c35(0x8dd)]=_0x20d855,this[_0x2a2c35(0xc44)]=_0x3070ff||'Linear',_0x20d855<=0x0&&(this['_distortionSprite'][_0x2a2c35(0x1c1)]['x']=this[_0x2a2c35(0x7aa)],this[_0x2a2c35(0x2f8)][_0x2a2c35(0x1c1)]['y']=this[_0x2a2c35(0x273)]);},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x4e2)]=function(){const _0x7196c5=_0x46c6a8;if(this[_0x7196c5(0x742)]<=0x0)return;if(!this[_0x7196c5(0x2f8)])return;const _0x52fe16=this[_0x7196c5(0x742)],_0x42a8ba=this[_0x7196c5(0x8dd)],_0x4b0d0c=this[_0x7196c5(0xc44)],_0x441915=this[_0x7196c5(0x2f8)];Imported[_0x7196c5(0x12b)]?(_0x441915[_0x7196c5(0x1c1)]['x']=this[_0x7196c5(0x5b5)](_0x441915['skew']['x'],this['_targetSkewX'],_0x52fe16,_0x42a8ba,_0x4b0d0c),_0x441915['skew']['y']=this[_0x7196c5(0x5b5)](_0x441915['skew']['y'],this[_0x7196c5(0x273)],_0x52fe16,_0x42a8ba,_0x4b0d0c)):(_0x441915[_0x7196c5(0x1c1)]['x']=(_0x441915[_0x7196c5(0x1c1)]['x']*(_0x52fe16-0x1)+this[_0x7196c5(0x7aa)])/_0x52fe16,_0x441915['skew']['y']=(_0x441915[_0x7196c5(0x1c1)]['y']*(_0x52fe16-0x1)+this[_0x7196c5(0x273)])/_0x52fe16);this['_skewDuration']--;if(this[_0x7196c5(0x742)]<=0x0)this[_0x7196c5(0x810)]();},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x810)]=function(){const _0x1b239e=_0x46c6a8;this['_distortionSprite'][_0x1b239e(0x1c1)]['x']=this[_0x1b239e(0x7aa)],this[_0x1b239e(0x2f8)]['skew']['y']=this[_0x1b239e(0x273)];},Sprite_Battler['prototype'][_0x46c6a8(0x65f)]=function(){const _0x4dc324=_0x46c6a8;return this[_0x4dc324(0x742)]>0x0;},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x834)]=function(_0x25af26,_0x69ed79,_0x203199,_0x4740ea){const _0x854a4=_0x46c6a8;if(!this[_0x854a4(0x805)]())return;if(!this[_0x854a4(0x2f8)])return;if(this[_0x854a4(0xa73)]===_0x25af26)return;this[_0x854a4(0xa73)]=_0x25af26,this[_0x854a4(0x5ec)]=_0x69ed79,this[_0x854a4(0x5c2)]=_0x69ed79,this[_0x854a4(0x10e)]=_0x203199||_0x854a4(0x3de),this[_0x854a4(0xb0a)]=_0x4740ea,this[_0x854a4(0xb0a)]===undefined&&(this[_0x854a4(0xb0a)]=!![]),_0x69ed79<=0x0&&(this[_0x854a4(0x989)]=_0x25af26,this[_0x854a4(0xb0a)]&&(this[_0x854a4(0xa73)]=0x0,this[_0x854a4(0x989)]=0x0));},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xa6b)]=function(){const _0xd621b5=_0x46c6a8;this[_0xd621b5(0xb39)](),this['applyAngleChange']();},Sprite_Battler[_0x46c6a8(0x669)]['updateAngleCalculations']=function(){const _0x157182=_0x46c6a8;if(this[_0x157182(0x5ec)]<=0x0)return;const _0x318405=this[_0x157182(0x5ec)],_0x236dc0=this[_0x157182(0x5c2)],_0x35ba04=this[_0x157182(0x10e)];Imported['VisuMZ_0_CoreEngine']?this[_0x157182(0x989)]=this['applyEasing'](this[_0x157182(0x989)],this['_targetAngle'],_0x318405,_0x236dc0,_0x35ba04):this[_0x157182(0x989)]=(this[_0x157182(0x989)]*(_0x318405-0x1)+this[_0x157182(0xa73)])/_0x318405;this[_0x157182(0x5ec)]--;if(this['_angleDuration']<=0x0)this[_0x157182(0xbe4)]();},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xbe4)]=function(){const _0x41fe8d=_0x46c6a8;this[_0x41fe8d(0x989)]=this['_targetAngle'],this['_angleRevertOnFinish']&&(this[_0x41fe8d(0xa73)]=0x0,this['_currentAngle']=0x0);},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xc0a)]=function(){const _0x49441a=_0x46c6a8;return this[_0x49441a(0x5ec)]>0x0;},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x256)]=function(){const _0x46461e=_0x46c6a8;if(!this[_0x46461e(0x2f8)])return;const _0x15c6f9=this['_currentAngle'],_0x18a431=this[_0x46461e(0x918)]['x'],_0x4f77f5=this[_0x46461e(0xa4d)]['isActor']()?-0x1:0x1;this[_0x46461e(0x2f8)][_0x46461e(0x6bc)]=_0x15c6f9*_0x18a431*_0x4f77f5;const _0x5166c0=this['_distortionSprite']['scale']['y'];this[_0x46461e(0x2f8)]['y']=this[_0x46461e(0x1fc)]*-0.5*(0x2-_0x5166c0),this['_distortionSprite']['y']=Math['ceil'](this[_0x46461e(0x2f8)]['y']);const _0x5c1d22=[this[_0x46461e(0x7dd)],this['_svBattlerSprite'],this[_0x46461e(0x7f1)]];for(const _0x275c8f of _0x5c1d22){if(!_0x275c8f)continue;_0x275c8f['y']=this[_0x46461e(0x1fc)]*0.5;}this['_shadowSprite']&&(this[_0x46461e(0x572)]=this[_0x46461e(0x572)]??0x1,this[_0x46461e(0x8dc)]=this[_0x46461e(0x8dc)]??0x1,this[_0x46461e(0x4de)]['scale']['x']=this[_0x46461e(0x2f8)][_0x46461e(0x918)]['x']*this[_0x46461e(0x572)],this[_0x46461e(0x4de)][_0x46461e(0x918)]['y']=this['_distortionSprite'][_0x46461e(0x918)]['y']*this[_0x46461e(0x8dc)]);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x6eb)]=Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x59d)],Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x59d)]=function(){const _0x1c439e=_0x46c6a8;VisuMZ[_0x1c439e(0xa74)][_0x1c439e(0x6eb)][_0x1c439e(0x515)](this),VisuMZ[_0x1c439e(0xa74)][_0x1c439e(0x154)]['HpGauge'][_0x1c439e(0xb0f)]&&this[_0x1c439e(0x15a)]();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x517)]=Sprite_Enemy[_0x46c6a8(0x669)]['createStateIconSprite'],Sprite_Enemy[_0x46c6a8(0x669)]['createStateIconSprite']=function(){const _0x21dece=_0x46c6a8;VisuMZ['BattleCore'][_0x21dece(0x154)][_0x21dece(0xbd3)]['ShowEnemyGauge']&&this['createHpGaugeSprite'](),VisuMZ[_0x21dece(0xa74)][_0x21dece(0x517)][_0x21dece(0x515)](this);},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x15a)]=function(){const _0x531e66=_0x46c6a8;if(!ConfigManager[_0x531e66(0xb3f)])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x4635a5=VisuMZ['BattleCore'][_0x531e66(0x154)]['HpGauge'],_0x42326d=new Sprite_HpGauge();_0x42326d['anchor']['x']=_0x4635a5[_0x531e66(0x162)],_0x42326d[_0x531e66(0x2da)]['y']=_0x4635a5['AnchorY'],_0x42326d['scale']['x']=_0x42326d[_0x531e66(0x918)]['y']=_0x4635a5[_0x531e66(0xaa4)],this[_0x531e66(0x96a)]=_0x42326d,this['addChild'](this['_hpGaugeSprite']),Spriteset_Battle['ANTI_TINT_UI']&&BattleManager[_0x531e66(0x393)](this[_0x531e66(0x96a)]);},VisuMZ['BattleCore'][_0x46c6a8(0x9b5)]=Sprite_Battler['prototype'][_0x46c6a8(0x585)],Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x585)]=function(_0x121d00){const _0x1e9795=_0x46c6a8,_0x510317=this[_0x1e9795(0xa4d)];VisuMZ[_0x1e9795(0xa74)][_0x1e9795(0x9b5)][_0x1e9795(0x515)](this,_0x121d00),this[_0x1e9795(0x8f1)](_0x121d00);if(_0x510317!==_0x121d00)this[_0x1e9795(0x8ee)]();},Sprite_Battler[_0x46c6a8(0x669)]['setupHpGaugeSprite']=function(_0xc6eac7){const _0x1b3656=_0x46c6a8;if(!_0xc6eac7)return;if(!this[_0x1b3656(0x96a)])return;if(_0xc6eac7['isActor']()){}else{if(_0xc6eac7[_0x1b3656(0x8de)]()){if(this[_0x1b3656(0x2cf)]===Sprite_SvEnemy&&!_0xc6eac7[_0x1b3656(0x548)]())return;}}this[_0x1b3656(0x96a)][_0x1b3656(0x208)](_0xc6eac7,'hp');},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xa4b)]=function(){const _0x25cd5b=_0x46c6a8;return this[_0x25cd5b(0xa4d)]&&this[_0x25cd5b(0xa4d)][_0x25cd5b(0xa4b)]();},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x1be)]=function(){const _0x50641b=_0x46c6a8,_0x1161d4=this['_mainSprite']['bitmap'];if(!_0x1161d4)return;const _0x2817d6=_0x1161d4['width'];let _0x44d997=_0x1161d4['height'];if(this['_battler'][_0x50641b(0xa10)]()){if(this['_frame'])_0x44d997=Math[_0x50641b(0x968)](0x0,this['_frame'][_0x50641b(0x1fc)]-0x4);}this[_0x50641b(0x7dd)]['setFrame'](0x0,0x0,_0x2817d6,_0x44d997),this[_0x50641b(0x1c7)](0x0,0x0,_0x2817d6,_0x44d997);},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x4c5)]=function(){const _0x426fb8=_0x46c6a8;if(!this['_battler'])return;if(!this[_0x426fb8(0x96a)])return;const _0x23a1e1=VisuMZ[_0x426fb8(0xa74)][_0x426fb8(0x154)][_0x426fb8(0xbd3)],_0x11810a=this[_0x426fb8(0x96a)];_0x11810a[_0x426fb8(0x6cb)]=this[_0x426fb8(0xbd2)]();const _0xe3ad23=_0x23a1e1[_0x426fb8(0x20c)],_0x170104=_0x23a1e1[_0x426fb8(0x4e7)];_0x11810a['x']=_0xe3ad23,_0x11810a['x']+=this['_battler'][_0x426fb8(0xb8f)](),_0x11810a['y']=-this[_0x426fb8(0x1fc)]+_0x170104,_0x11810a['y']+=this['_battler'][_0x426fb8(0xaba)](),Spriteset_Battle[_0x426fb8(0x4d7)]&&SceneManager[_0x426fb8(0x7a7)][_0x426fb8(0x81e)]&&(_0x11810a['x']+=this['x'],_0x11810a['y']+=this['y']);},Sprite_Battler['prototype'][_0x46c6a8(0xbd2)]=function(){const _0x45127b=_0x46c6a8;if(!this[_0x45127b(0xa4d)])return![];if(this[_0x45127b(0xa4d)]['isActor']())return!![];if(this[_0x45127b(0xa4d)][_0x45127b(0xc2e)]())return![];if(this[_0x45127b(0x1d7)]<=0x0)return![];const _0x109aa6=this[_0x45127b(0xa4d)][_0x45127b(0x78f)]()[_0x45127b(0xb03)];if(_0x109aa6[_0x45127b(0x712)](/<SHOW HP GAUGE>/i))return!![];if(_0x109aa6[_0x45127b(0x712)](/<HIDE HP GAUGE>/i))return![];const _0x157ad6=VisuMZ[_0x45127b(0xa74)][_0x45127b(0x154)][_0x45127b(0xbd3)];if(_0x157ad6['RequiresDefeat']){if(_0x157ad6[_0x45127b(0x3f5)]&&BattleManager[_0x45127b(0x6a3)]())return!![];if(this[_0x45127b(0xa4d)][_0x45127b(0x7bb)])return![];return this[_0x45127b(0xa4d)][_0x45127b(0x7e2)]();}return!![];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x257)]=Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xb59)],Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xb59)]=function(){const _0x31674f=_0x46c6a8;if(!this['_battler'])return![];if(this[_0x31674f(0x1d1)]>0x0)return!![];return VisuMZ[_0x31674f(0xa74)][_0x31674f(0x257)][_0x31674f(0x515)](this);},VisuMZ[_0x46c6a8(0xa74)]['Sprite_Battler_startMove']=Sprite_Battler['prototype'][_0x46c6a8(0x4c7)],Sprite_Battler['prototype'][_0x46c6a8(0x4c7)]=function(_0x15b9ce,_0x1fad80,_0x33c015){const _0x561202=_0x46c6a8;this[_0x561202(0x805)]()&&VisuMZ['BattleCore'][_0x561202(0x920)][_0x561202(0x515)](this,_0x15b9ce,_0x1fad80,_0x33c015);},Sprite_Battler['prototype'][_0x46c6a8(0x805)]=function(){const _0x27938f=_0x46c6a8;if(this[_0x27938f(0xa4d)]&&this['_battler'][_0x27938f(0xa10)]())return![];if(this[_0x27938f(0xa4d)]&&!this[_0x27938f(0xa4d)]['canBattlerMove']())return![];return $gameSystem[_0x27938f(0x33c)]();},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x94f)]=function(){},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x6be)]=function(){const _0xc4eac9=_0x46c6a8;this[_0xc4eac9(0x4c7)](0x0,0x0,0xc);},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x51f)]=function(){},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0x79d)]=function(){const _0x5bcdcf=_0x46c6a8,_0x6782c6=VisuMZ['BattleCore'][_0x5bcdcf(0x154)][_0x5bcdcf(0xa6f)],_0x40f39e=this[_0x5bcdcf(0xa4d)]&&this[_0x5bcdcf(0xa4d)][_0x5bcdcf(0x4ec)]()?0x1:-0x1,_0x11f9ec=this[_0x5bcdcf(0xc31)]-this[_0x5bcdcf(0x637)]+_0x40f39e*_0x6782c6[_0x5bcdcf(0x2d1)],_0xc3b015=this[_0x5bcdcf(0x960)]-this[_0x5bcdcf(0x128)]+_0x40f39e*_0x6782c6[_0x5bcdcf(0x76f)],_0xb7058a=_0x6782c6[_0x5bcdcf(0x207)];this[_0x5bcdcf(0x4c7)](_0x11f9ec,_0xc3b015,_0xb7058a);},Sprite_Battler[_0x46c6a8(0x669)][_0x46c6a8(0xba3)]=function(_0xa63a80,_0x489cd0){const _0x4b7925=_0x46c6a8,_0x87ddb5=VisuMZ['BattleCore'][_0x4b7925(0x154)][_0x4b7925(0xa6f)];this['_shakeFlinchDuration']=Math[_0x4b7925(0x182)]((_0x87ddb5['ShakeFlinchDuration']??0x18)*_0x489cd0),this[_0x4b7925(0x7fa)]=Math[_0x4b7925(0x968)](this[_0x4b7925(0x7fa)],_0xa63a80);},Sprite_Battler['prototype']['updateShakeFlinch']=function(){const _0x330f23=_0x46c6a8,_0x4677bb=VisuMZ[_0x330f23(0xa74)][_0x330f23(0x154)][_0x330f23(0xa6f)];if(!(_0x4677bb[_0x330f23(0x9c0)]??![]))return;if(this[_0x330f23(0x1b5)]>0x0){const _0x37c572=this[_0x330f23(0x1b5)];this['_shakeFlinchPower']=this[_0x330f23(0x7fa)]*(_0x37c572-0x1)/_0x37c572,this[_0x330f23(0x1b5)]--,this[_0x330f23(0x1b5)]<=0x0&&(this[_0x330f23(0x7fa)]=0x0);}let _0x29c386=this[_0x330f23(0x7dd)];this['_battler']&&this[_0x330f23(0xa4d)][_0x330f23(0x8de)]()&&(this['_battler'][_0x330f23(0x548)]()&&this['_svBattlerSprite']&&(_0x29c386=this[_0x330f23(0xaae)])),this[_0x330f23(0x7fa)]>0x0?(_0x29c386['x']=Math[_0x330f23(0xafb)](this[_0x330f23(0x7fa)])*(Math[_0x330f23(0x758)]()<0.5?-0x1:0x1),this[_0x330f23(0x960)]!==this['y']&&(_0x29c386['y']=this[_0x330f23(0x1fc)]*0.5,_0x29c386['y']+=Math[_0x330f23(0xafb)](this[_0x330f23(0x7fa)])*(Math[_0x330f23(0x758)]()<0.5?-0x1:0x1))):(_0x29c386['x']=0x0,_0x29c386['y']=this[_0x330f23(0x1fc)]*0.5);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x3e7)]=Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x8c3)],Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x8c3)]=function(){const _0xbf35e2=_0x46c6a8;VisuMZ['BattleCore'][_0xbf35e2(0x3e7)][_0xbf35e2(0x515)](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x127)]=function(){const _0x1ac0e1=_0x46c6a8;return this[_0x1ac0e1(0x2f8)]||this[_0x1ac0e1(0x7dd)]||this;},VisuMZ[_0x46c6a8(0xa74)]['Sprite_Actor_moveToStartPosition']=Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x809)],Sprite_Actor[_0x46c6a8(0x669)]['moveToStartPosition']=function(){},Sprite_Actor['prototype'][_0x46c6a8(0x8a4)]=function(_0x375967){const _0x3353ba=_0x46c6a8;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x375967)return;if(!_0x375967[_0x3353ba(0x805)]())return;VisuMZ[_0x3353ba(0xa74)]['Sprite_Actor_moveToStartPosition'][_0x3353ba(0x515)](this);},VisuMZ['BattleCore'][_0x46c6a8(0x118)]=Sprite_Actor['prototype']['setActorHome'],Sprite_Actor[_0x46c6a8(0x669)]['setActorHome']=function(_0x42923c){const _0x9b958f=_0x46c6a8;VisuMZ[_0x9b958f(0xa74)][_0x9b958f(0x154)][_0x9b958f(0xa6f)][_0x9b958f(0x336)]?VisuMZ['BattleCore']['Settings'][_0x9b958f(0xa6f)][_0x9b958f(0x336)][_0x9b958f(0x515)](this,_0x42923c):VisuMZ['BattleCore'][_0x9b958f(0x118)][_0x9b958f(0x515)](this,_0x42923c);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xa88)]=Sprite_Actor['prototype'][_0x46c6a8(0x585)],Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x585)]=function(_0x1e09a9){const _0x33f5ae=_0x46c6a8;VisuMZ['BattleCore'][_0x33f5ae(0xa88)]['call'](this,_0x1e09a9),this[_0x33f5ae(0xbb7)](_0x1e09a9);},Sprite_Actor[_0x46c6a8(0x669)]['setBattlerBattleCore']=function(_0xaf89d0){const _0x351ae2=_0x46c6a8;if(!_0xaf89d0)return;if(!this['_mainSprite'])return;this['_mainSprite'][_0x351ae2(0x2da)]['x']=this[_0x351ae2(0x715)][_0x351ae2(0x3f9)](),this[_0x351ae2(0x7dd)]['anchor']['y']=this[_0x351ae2(0x715)]['svBattlerAnchorY'](),this['updateShadowVisibility']();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xb63)]=Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x50f)],Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x50f)]=function(){const _0x2bca70=_0x46c6a8;VisuMZ[_0x2bca70(0xa74)][_0x2bca70(0xb63)][_0x2bca70(0x515)](this),this[_0x2bca70(0x715)]&&(this[_0x2bca70(0x41c)](),this['updateStyleOpacity']());},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x59a)]=Sprite_Actor[_0x46c6a8(0x669)]['updateBitmap'],Sprite_Actor['prototype'][_0x46c6a8(0x20b)]=function(){const _0xb5c8ae=_0x46c6a8;VisuMZ[_0xb5c8ae(0xa74)][_0xb5c8ae(0x59a)][_0xb5c8ae(0x515)](this),this['_mainSprite']&&this[_0xb5c8ae(0x7dd)][_0xb5c8ae(0x64c)]&&this[_0xb5c8ae(0xa4d)]&&(this[_0xb5c8ae(0x7dd)][_0xb5c8ae(0x64c)][_0xb5c8ae(0x530)]!==this[_0xb5c8ae(0xa4d)][_0xb5c8ae(0x603)]()&&(this[_0xb5c8ae(0x7dd)]['bitmap'][_0xb5c8ae(0x530)]=this[_0xb5c8ae(0xa4d)][_0xb5c8ae(0x603)]()));},VisuMZ['BattleCore'][_0x46c6a8(0xb1a)]=Sprite_Actor['prototype'][_0x46c6a8(0xc23)],Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0xc23)]=function(){const _0x533059=_0x46c6a8;VisuMZ[_0x533059(0xa74)][_0x533059(0xb1a)][_0x533059(0x515)](this),this[_0x533059(0x7ce)]();},Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x7ce)]=function(){const _0x55e8f2=_0x46c6a8;if(!this[_0x55e8f2(0x7dd)])return;if(!this[_0x55e8f2(0x4de)])return;this[_0x55e8f2(0x3ca)](),this['updateShadowPosition']();},Sprite_Actor['prototype'][_0x46c6a8(0x41c)]=function(){const _0x3f2345=_0x46c6a8;{this['_stateSprite'][_0x3f2345(0x918)]['x']=0x1/(this[_0x3f2345(0x918)]['x']||0.001),this['_stateSprite']['scale']['y']=0x1/(this['scale']['y']||0.001);}{this[_0x3f2345(0x5e9)]['x']=0x0,this['_stateSprite']['y']=-this[_0x3f2345(0x1fc)]-0x20+0x60;const _0x5abbde=VisuMZ[_0x3f2345(0xa74)]['Settings'][_0x3f2345(0xa6f)];this[_0x3f2345(0x5e9)]['x']+=_0x5abbde['StateOverlayOffsetX']??0x0,this['_stateSprite']['y']+=_0x5abbde[_0x3f2345(0x6f8)]??0x0;}},Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x5dc)]=function(){const _0x4759c4=_0x46c6a8;if(!$gameSystem['isSideView']()&&this[_0x4759c4(0x2cf)]===Sprite_Actor){const _0xf04691=Scene_Battle[_0x4759c4(0x669)][_0x4759c4(0x753)]();[_0x4759c4(0x9bb),_0x4759c4(0x8b3),'portrait',_0x4759c4(0x9a1)][_0x4759c4(0x4a3)](_0xf04691)&&(this[_0x4759c4(0x1d7)]=0x0);}},Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0xa61)]=function(){const _0x5bee66=_0x46c6a8,_0x3bbd4f=this['_actor'];if(_0x3bbd4f){if(_0x3bbd4f[_0x5bee66(0x7e3)])return;const _0xbf5471=_0x3bbd4f['stateMotionIndex']();if(_0x3bbd4f[_0x5bee66(0x653)]()||_0x3bbd4f[_0x5bee66(0x9a4)]())this['startMotion'](_0x5bee66(0x1eb));else{if(_0xbf5471===0x3)this[_0x5bee66(0x469)](_0x5bee66(0x61d));else{if(_0xbf5471===0x2)this[_0x5bee66(0x469)]('sleep');else{if(this[_0x5bee66(0x6ec)])this[_0x5bee66(0x469)](_0x5bee66(0x7e8));else{if(_0x3bbd4f[_0x5bee66(0x5cf)]())this[_0x5bee66(0x469)](_0x5bee66(0x71d));else{if(_0x3bbd4f[_0x5bee66(0x468)]())this['startMotion'](_0x5bee66(0x973));else{if(_0x3bbd4f['isGuard']()||_0x3bbd4f[_0x5bee66(0x34d)]())this[_0x5bee66(0x469)]('guard');else{if(_0xbf5471===0x1)this['startMotion'](_0x5bee66(0x72e));else{if(_0x3bbd4f[_0x5bee66(0x8ad)]())this['startMotion'](_0x5bee66(0xad0));else{if(_0x3bbd4f[_0x5bee66(0x8c9)]())this[_0x5bee66(0x469)](_0x5bee66(0x1eb));else _0x3bbd4f[_0x5bee66(0x645)]()?this[_0x5bee66(0x469)]('wait'):this['startMotion'](_0x5bee66(0x1eb));}}}}}}}}}}},Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x51f)]=function(){const _0x56bc8d=_0x46c6a8,_0x20c7fb=0xa,_0x76778c=0x12c*_0x20c7fb,_0x33f2b7=0x1e*_0x20c7fb;this[_0x56bc8d(0x4c7)](_0x76778c,0x0,_0x33f2b7);},Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x13e)]=function(){const _0x2fa523=_0x46c6a8;Sprite_Battler[_0x2fa523(0x669)]['onMoveEnd'][_0x2fa523(0x515)](this);},Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x63e)]=function(){const _0x13bded=_0x46c6a8;return Sprite_Battler[_0x13bded(0xc33)];},Sprite_Weapon['prototype'][_0x46c6a8(0x94b)]=function(){const _0x2365a5=_0x46c6a8;return Sprite_Battler[_0x2365a5(0xc33)];},Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0xa1b)]=function(){},Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x3e1)]=function(){},Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x10d)]=function(){const _0x22f50f=_0x46c6a8;if(this[_0x22f50f(0x9ea)]&&++this['_motionCount']>=this[_0x22f50f(0x63e)]()){if(this[_0x22f50f(0x9ea)]['loop'])this[_0x22f50f(0x27f)]=(this[_0x22f50f(0x27f)]+0x1)%0x4;else{if(this['_pattern']<0x2)this['_pattern']++;else{const _0x4e6745=this[_0x22f50f(0x715)];if(_0x4e6745)_0x4e6745[_0x22f50f(0x7e3)]=undefined;this[_0x22f50f(0xa61)]();}}this[_0x22f50f(0x826)]=0x0;}},Sprite_Actor['prototype'][_0x46c6a8(0x6a7)]=function(_0xeb1fee){const _0x38f98e=_0x46c6a8;if(this[_0x38f98e(0xa4d)]&&this['_battler'][_0x38f98e(0xa10)]()){this['_motion']=Sprite_Actor[_0x38f98e(0x36f)][_0x38f98e(0x61d)];return;}const _0xdc153e=Sprite_Actor[_0x38f98e(0x36f)][_0xeb1fee];this[_0x38f98e(0x9ea)]=_0xdc153e,this[_0x38f98e(0x826)]=0x0,this[_0x38f98e(0x27f)]=0x0;},Sprite_Actor['prototype'][_0x46c6a8(0x673)]=function(_0x2e9fa0){const _0x53a883=_0x46c6a8;if(this[_0x53a883(0xa4b)]())return;this['adjustWeaponSpriteOffset'](),this[_0x53a883(0x3a0)]['setup'](_0x2e9fa0),this[_0x53a883(0x715)][_0x53a883(0x1ab)]();},Sprite_Actor['prototype']['adjustWeaponSpriteOffset']=function(){const _0x4a89ac=_0x46c6a8;let _0x129cc0=-0x10,_0x2b4ae=this[_0x4a89ac(0x1fc)]*0.5;const _0x3c331c=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x265467=this['_battler'][_0x4a89ac(0x5af)]()[_0x4a89ac(0x883)](_0x50e2b9=>_0x50e2b9&&_0x50e2b9['note'][_0x4a89ac(0x712)](_0x3c331c)?Number(RegExp['$1']):0x0),_0x1665c9=this[_0x4a89ac(0xa4d)][_0x4a89ac(0x5af)]()[_0x4a89ac(0x883)](_0x373b80=>_0x373b80&&_0x373b80['note'][_0x4a89ac(0x712)](_0x3c331c)?Number(RegExp['$2']):0x0);_0x129cc0=_0x265467[_0x4a89ac(0xa37)]((_0x50431a,_0x453cbb)=>_0x50431a+_0x453cbb,_0x129cc0),_0x2b4ae=_0x1665c9[_0x4a89ac(0xa37)]((_0x4751fb,_0x3aec2a)=>_0x4751fb+_0x3aec2a,_0x2b4ae),this[_0x4a89ac(0x3a0)]['x']=_0x129cc0,this[_0x4a89ac(0x3a0)]['y']=_0x2b4ae,this[_0x4a89ac(0x3a0)]['update']();},Sprite_Weapon[_0x46c6a8(0x669)][_0x46c6a8(0x208)]=function(_0x3e5688){const _0x3b92a7=_0x46c6a8;this[_0x3b92a7(0x375)]=_0x3e5688,this[_0x3b92a7(0x6ac)]=-0x1,this['_pattern']=0x0,this[_0x3b92a7(0x9f4)](),this[_0x3b92a7(0x2dc)]();},Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0xac7)]=function(){},Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x94f)]=function(){const _0x44bfc1=_0x46c6a8,_0x530548=VisuMZ['BattleCore'][_0x44bfc1(0x154)][_0x44bfc1(0x3bf)],_0xf9ded6=_0x530548[_0x44bfc1(0x6e4)],_0x5e3a90=_0x530548[_0x44bfc1(0x265)],_0x3b0a9d=_0x530548[_0x44bfc1(0xb05)];this[_0x44bfc1(0x4c7)](-_0xf9ded6,-_0x5e3a90,_0x3b0a9d);},VisuMZ[_0x46c6a8(0xa74)]['Sprite_Actor_updateFrame']=Sprite_Actor['prototype'][_0x46c6a8(0x2dc)],Sprite_Actor[_0x46c6a8(0x669)][_0x46c6a8(0x2dc)]=function(){const _0x42632c=_0x46c6a8;this[_0x42632c(0xa4b)]()?this[_0x42632c(0x1be)]():(this[_0x42632c(0xbd1)](),VisuMZ[_0x42632c(0xa74)][_0x42632c(0x79b)][_0x42632c(0x515)](this));},Sprite_Actor[_0x46c6a8(0x669)]['applyFreezeMotionFrames']=function(){const _0x5034f1=_0x46c6a8;if(this[_0x5034f1(0xa4d)]&&this['_battler']['_freezeMotionData']){const _0x5bca74=this[_0x5034f1(0xa4d)][_0x5034f1(0xa0b)];this[_0x5034f1(0x9ea)]=Sprite_Actor[_0x5034f1(0x36f)][_0x5bca74[_0x5034f1(0x3be)]],this[_0x5034f1(0x27f)]=_0x5bca74['pattern'];const _0xbfd848=this[_0x5034f1(0x3a0)];_0xbfd848[_0x5034f1(0xb99)](_0x5bca74['weaponImageId'],_0x5bca74[_0x5034f1(0x4dd)]),this[_0x5034f1(0x169)]();}},Sprite_Weapon[_0x46c6a8(0x669)][_0x46c6a8(0xb99)]=function(_0x418143,_0x11bfa8){const _0x13a90d=_0x46c6a8;this[_0x13a90d(0x375)]=_0x418143,this[_0x13a90d(0x6ac)]=-Infinity,this['_pattern']=_0x11bfa8,this[_0x13a90d(0x9f4)](),this[_0x13a90d(0x2dc)]();},Sprite_Enemy[_0x46c6a8(0x669)]['initMembers']=function(){const _0xd69092=_0x46c6a8;Sprite_Battler['prototype'][_0xd69092(0x8c3)]['call'](this),this['_enemy']=null,this[_0xd69092(0x107)]=![],this[_0xd69092(0xc30)]='',this[_0xd69092(0x454)]=0x0,this[_0xd69092(0x144)]=null,this[_0xd69092(0x49f)]=0x0,this[_0xd69092(0x7c8)]=0x0,this[_0xd69092(0x183)](),this[_0xd69092(0x707)]();},VisuMZ['BattleCore'][_0x46c6a8(0x1db)]=Sprite_Enemy[_0x46c6a8(0x669)]['update'],Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x50f)]=function(){const _0x13e234=_0x46c6a8;VisuMZ[_0x13e234(0xa74)][_0x13e234(0x1db)][_0x13e234(0x515)](this),this[_0x13e234(0x3ca)](),this[_0x13e234(0xa2c)]();},Sprite_Enemy['prototype'][_0x46c6a8(0x183)]=function(){const _0x56a5e8=_0x46c6a8;this[_0x56a5e8(0x7dd)]=new Sprite(),this[_0x56a5e8(0x7dd)]['anchor']['x']=0.5,this[_0x56a5e8(0x7dd)]['anchor']['y']=0x1,this[_0x56a5e8(0xa85)](this['_mainSprite']),this[_0x56a5e8(0x65e)]();},Sprite_Enemy['prototype'][_0x46c6a8(0x127)]=function(){return this['_distortionSprite']||this['_mainSprite']||this;},Sprite_Enemy[_0x46c6a8(0x669)]['loadBitmap']=function(_0x1338e3){const _0x4569e7=_0x46c6a8;this[_0x4569e7(0x64c)]=new Bitmap(0x1,0x1);if(this[_0x4569e7(0x548)]()){const _0x2d9d7c=this[_0x4569e7(0x824)][_0x4569e7(0xc00)]();this[_0x4569e7(0x64c)]=new Bitmap(_0x2d9d7c[_0x4569e7(0x1e1)],_0x2d9d7c[_0x4569e7(0x1fc)]),this[_0x4569e7(0x7dd)][_0x4569e7(0x64c)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x4569e7(0x33c)]()){const _0x49e32a=ImageManager[_0x4569e7(0x173)](_0x1338e3);_0x49e32a[_0x4569e7(0xb7c)](this[_0x4569e7(0x4a9)]['bind'](this,_0x49e32a));}else{const _0x1d8cbd=ImageManager[_0x4569e7(0x9b6)](_0x1338e3);_0x1d8cbd[_0x4569e7(0xb7c)](this[_0x4569e7(0x4a9)][_0x4569e7(0x5fa)](this,_0x1d8cbd));}}},Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x4a9)]=function(_0x59f606){const _0xbd3b5f=_0x46c6a8;this[_0xbd3b5f(0x7dd)][_0xbd3b5f(0x64c)]=_0x59f606,this[_0xbd3b5f(0x64c)]=new Bitmap(_0x59f606[_0xbd3b5f(0x1e1)],_0x59f606['height']);},VisuMZ[_0x46c6a8(0xa74)]['Sprite_Enemy_setHue']=Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x3ad)],Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x3ad)]=function(_0x184b89){const _0x4b907c=_0x46c6a8;this[_0x4b907c(0x7dd)]&&this[_0x4b907c(0x7dd)][_0x4b907c(0x3ad)](_0x184b89);},VisuMZ[_0x46c6a8(0xa74)]['Sprite_Enemy_initVisibility']=Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x1a6)],Sprite_Enemy['prototype'][_0x46c6a8(0x1a6)]=function(){const _0x2c9b41=_0x46c6a8;this[_0x2c9b41(0xa26)]()?VisuMZ[_0x2c9b41(0xa74)]['Sprite_Enemy_initVisibility'][_0x2c9b41(0x515)](this):(this[_0x2c9b41(0x107)]=!this[_0x2c9b41(0x824)][_0x2c9b41(0xc2e)](),!this['_appeared']&&(this[_0x2c9b41(0x1d7)]=0x0));},VisuMZ['BattleCore']['Sprite_Enemy_updateCollapse']=Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x2b6)],Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x2b6)]=function(){const _0x140f46=_0x46c6a8;if(this[_0x140f46(0xa26)]())VisuMZ[_0x140f46(0xa74)]['Sprite_Enemy_updateCollapse'][_0x140f46(0x515)](this);},Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x2dc)]=function(){const _0x11db79=_0x46c6a8;Sprite_Battler['prototype'][_0x11db79(0x2dc)][_0x11db79(0x515)](this);const _0x51b50d=this[_0x11db79(0x127)]()||this;if(!_0x51b50d)return;!_0x51b50d[_0x11db79(0x64c)]&&(_0x51b50d[_0x11db79(0x64c)]=new Bitmap(this[_0x11db79(0x1e1)]||0x1,this[_0x11db79(0x1fc)]||0x1));if(this[_0x11db79(0x144)]===_0x11db79(0x320))this[_0x11db79(0x7dd)][_0x11db79(0x1c7)](0x0,0x0,this[_0x11db79(0x7dd)][_0x11db79(0x1e1)]||0x1,this[_0x11db79(0x49f)]);else{let _0x5e202c=0x1;if(_0x51b50d&&_0x51b50d[_0x11db79(0x64c)])_0x5e202c=_0x51b50d[_0x11db79(0x64c)][_0x11db79(0x1e1)];let _0x22b2ec=0x1;if(this[_0x11db79(0x64c)])_0x22b2ec=this[_0x11db79(0x64c)][_0x11db79(0x1fc)];_0x51b50d['setFrame'](0x0,0x0,_0x5e202c,_0x22b2ec);}},VisuMZ[_0x46c6a8(0xa74)]['Sprite_Enemy_updateBossCollapse']=Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x779)],Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x779)]=function(){const _0x10d4d8=_0x46c6a8;if(this[_0x10d4d8(0xa26)]())VisuMZ[_0x10d4d8(0xa74)][_0x10d4d8(0xae5)][_0x10d4d8(0x515)](this);},Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0xb59)]=function(){const _0x49d43a=_0x46c6a8;return Sprite_Battler[_0x49d43a(0x669)]['isMoving'][_0x49d43a(0x515)](this);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x7ac)]=Sprite_Enemy['prototype']['updateStateSprite'],Sprite_Enemy['prototype']['updateStateSprite']=function(){const _0x4745c3=_0x46c6a8;VisuMZ[_0x4745c3(0xa74)][_0x4745c3(0x7ac)][_0x4745c3(0x515)](this),this[_0x4745c3(0x165)]();},Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x165)]=function(){const _0x59f4d6=_0x46c6a8,_0x34ed6d=VisuMZ['BattleCore'][_0x59f4d6(0x154)][_0x59f4d6(0x6de)];if(_0x34ed6d[_0x59f4d6(0xacc)]&&!_0x34ed6d[_0x59f4d6(0x44a)]){this[_0x59f4d6(0x977)][_0x59f4d6(0x1d7)]=0x0;return;}this[_0x59f4d6(0x977)]['x']=0x0,this['_stateIconSprite']['x']+=this[_0x59f4d6(0xa4d)][_0x59f4d6(0xb8f)]();let _0x1ebab0=0x1;if(this[_0x59f4d6(0x64c)])_0x1ebab0=this[_0x59f4d6(0x64c)][_0x59f4d6(0x1fc)];this[_0x59f4d6(0x977)]['y']=-_0x1ebab0-this[_0x59f4d6(0x977)]['height']-0x4,this[_0x59f4d6(0x977)]['y']+=this[_0x59f4d6(0xa4d)]['battleUIOffsetY'](),this[_0x59f4d6(0x977)][_0x59f4d6(0x918)]['x']=0x1/(this[_0x59f4d6(0x918)]['x']||0.001),this[_0x59f4d6(0x977)][_0x59f4d6(0x918)]['y']=0x1/(this['scale']['y']||0.001),this[_0x59f4d6(0x548)]()&&(this[_0x59f4d6(0xaae)][_0x59f4d6(0x5e9)][_0x59f4d6(0x918)]['x']=-0x1/(this[_0x59f4d6(0x918)]['x']||0.001),this['_svBattlerSprite'][_0x59f4d6(0x5e9)][_0x59f4d6(0x918)]['y']=0x1/(this[_0x59f4d6(0x918)]['y']||0.001));},Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0xa2c)]=function(){const _0x87bd7b=_0x46c6a8;this[_0x87bd7b(0xa4d)]&&this[_0x87bd7b(0xa4d)][_0x87bd7b(0xa2c)]();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xc6a)]=Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x585)],Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x585)]=function(_0x51dcf2){const _0x541e4e=_0x46c6a8;VisuMZ['BattleCore'][_0x541e4e(0xc6a)][_0x541e4e(0x515)](this,_0x51dcf2),this[_0x541e4e(0x41d)](_0x51dcf2);},Sprite_Enemy['prototype'][_0x46c6a8(0x41d)]=function(_0x234566){const _0x308025=_0x46c6a8;!this[_0x308025(0xaae)]&&(this[_0x308025(0xaae)]=new Sprite_SvEnemy(_0x234566),this['attachSpritesToDistortionSprite']()),this[_0x308025(0xaae)][_0x308025(0x585)](_0x234566);},Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x548)]=function(){const _0x4044ad=_0x46c6a8;return this[_0x4044ad(0x824)]&&this[_0x4044ad(0x824)][_0x4044ad(0x548)]();},Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0xa26)]=function(){const _0x5d0f72=_0x46c6a8;return this['hasSvBattler']()?this[_0x5d0f72(0x824)][_0x5d0f72(0xa26)]():!![];},Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0xa61)]=function(){const _0x4cdb15=_0x46c6a8;this[_0x4cdb15(0x548)]()&&this[_0x4cdb15(0xaae)][_0x4cdb15(0xa61)]();},Sprite_Enemy['prototype'][_0x46c6a8(0x6a7)]=function(_0x2295b1){const _0x3abf5f=_0x46c6a8;if(this[_0x3abf5f(0x548)]())this[_0x3abf5f(0xaae)][_0x3abf5f(0x6a7)](_0x2295b1);},Sprite_Enemy[_0x46c6a8(0x669)]['forceWeaponAnimation']=function(_0xc8433f){const _0x29fd93=_0x46c6a8;if(this[_0x29fd93(0x548)]())this[_0x29fd93(0xaae)]['forceWeaponAnimation'](_0xc8433f);},Sprite_Enemy[_0x46c6a8(0x669)][_0x46c6a8(0x94f)]=function(){const _0x3b3749=_0x46c6a8,_0x3ffba8=VisuMZ[_0x3b3749(0xa74)][_0x3b3749(0x154)][_0x3b3749(0x3bf)],_0x454df4=_0x3ffba8[_0x3b3749(0x6e4)],_0x178e64=_0x3ffba8[_0x3b3749(0x265)],_0x3984f9=_0x3ffba8[_0x3b3749(0xb05)];this[_0x3b3749(0x4c7)](_0x454df4,_0x178e64,_0x3984f9);};function Sprite_SvEnemy(){this['initialize'](...arguments);}Sprite_SvEnemy['prototype']=Object[_0x46c6a8(0x4c2)](Sprite_Actor['prototype']),Sprite_SvEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x2cf)]=Sprite_SvEnemy,Sprite_SvEnemy['prototype'][_0x46c6a8(0x82c)]=function(_0x326d50){const _0x25732a=_0x46c6a8;Sprite_Actor['prototype']['initialize'][_0x25732a(0x515)](this,_0x326d50),this[_0x25732a(0x918)]['x']=-0x1,this['_stateSprite'][_0x25732a(0x918)]['x']=-0x1;},Sprite_SvEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x448)]=function(){},Sprite_SvEnemy[_0x46c6a8(0x669)]['moveToStartPosition']=function(){},Sprite_SvEnemy['prototype'][_0x46c6a8(0x135)]=function(_0x2ae8f4){},Sprite_SvEnemy['prototype'][_0x46c6a8(0xc23)]=function(){},Sprite_SvEnemy[_0x46c6a8(0x669)]['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x41c)]=function(){const _0x455db3=_0x46c6a8;this[_0x455db3(0x5e9)][_0x455db3(0x6cb)]=![];},Sprite_SvEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x20b)]=function(){const _0x52146c=_0x46c6a8;Sprite_Battler['prototype']['updateBitmap']['call'](this);const _0x169921=this[_0x52146c(0x715)][_0x52146c(0x295)]();this['_battlerName']!==_0x169921&&(this[_0x52146c(0xc30)]=_0x169921,this['_mainSprite'][_0x52146c(0x64c)]=ImageManager[_0x52146c(0x95e)](_0x169921)),this[_0x52146c(0x7dd)]&&this[_0x52146c(0x7dd)][_0x52146c(0x64c)]&&this[_0x52146c(0xa4d)]&&(this[_0x52146c(0x7dd)][_0x52146c(0x64c)]['smooth']!==this[_0x52146c(0xa4d)][_0x52146c(0x603)]()&&(this[_0x52146c(0x7dd)][_0x52146c(0x64c)]['smooth']=this[_0x52146c(0xa4d)][_0x52146c(0x603)]()));},Sprite_SvEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x51f)]=function(){},Sprite_SvEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x4c7)]=function(_0x3e62aa,_0x2cda8b,_0x3fc394){const _0x10f86d=_0x46c6a8;if(this[_0x10f86d(0x78a)])this[_0x10f86d(0x78a)][_0x10f86d(0x4c7)](_0x3e62aa,_0x2cda8b,_0x3fc394);},Sprite_SvEnemy[_0x46c6a8(0x669)]['refreshMotion']=function(){const _0x177f5e=_0x46c6a8,_0x321e7d=this['_actor'];if(_0x321e7d){const _0x5b7875=_0x321e7d[_0x177f5e(0x953)]();if(_0x321e7d['isInputting']()||_0x321e7d[_0x177f5e(0x9a4)]())this[_0x177f5e(0x469)](_0x177f5e(0x1eb));else{if(_0x5b7875===0x3)this['startMotion']('dead');else{if(_0x5b7875===0x2)this[_0x177f5e(0x469)](_0x177f5e(0x6a1));else{if(_0x321e7d['isChanting']())this['startMotion'](_0x177f5e(0x973));else{if(_0x321e7d[_0x177f5e(0x93c)]()||_0x321e7d[_0x177f5e(0x34d)]())this[_0x177f5e(0x469)]('guard');else{if(_0x5b7875===0x1)this[_0x177f5e(0x469)]('abnormal');else{if(_0x321e7d[_0x177f5e(0x8ad)]())this[_0x177f5e(0x469)]('dying');else _0x321e7d['isUndecided']()?this[_0x177f5e(0x469)](_0x321e7d[_0x177f5e(0xc00)]()[_0x177f5e(0x679)]||_0x177f5e(0x1eb)):this[_0x177f5e(0x469)](_0x321e7d[_0x177f5e(0xc00)]()[_0x177f5e(0x679)]||_0x177f5e(0x1eb));}}}}}}}},Sprite_SvEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x5c8)]=function(){const _0x2eba15=_0x46c6a8;return this[_0x2eba15(0x78a)]?this[_0x2eba15(0x78a)][_0x2eba15(0x338)]===0x0&&this[_0x2eba15(0x78a)][_0x2eba15(0x2be)]===0x0:!![];},Sprite_SvEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x29f)]=function(){},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x8f9)]=Sprite_Animation[_0x46c6a8(0x669)]['targetSpritePosition'],Sprite_Animation['prototype'][_0x46c6a8(0xaf6)]=function(_0x2f714e){const _0xa827f3=_0x46c6a8;return _0x2f714e[_0xa827f3(0x2f8)]?this[_0xa827f3(0xb06)](_0x2f714e):VisuMZ[_0xa827f3(0xa74)][_0xa827f3(0x8f9)][_0xa827f3(0x515)](this,_0x2f714e);},Sprite_Animation[_0x46c6a8(0x669)][_0x46c6a8(0xb06)]=function(_0x266da5){const _0xfabe7b=_0x46c6a8;let _0x522903=_0x266da5['x'],_0x2a2fdb=_0x266da5['y'],_0x480d77=_0x266da5[_0xfabe7b(0x1fc)],_0x2382bc=_0x266da5[_0xfabe7b(0x2f8)][_0xfabe7b(0x918)]['y'];_0x266da5['x']=_0x266da5['_baseX']+_0x266da5['extraPositionX'](),_0x266da5['y']=_0x266da5[_0xfabe7b(0x960)]+_0x266da5['extraPositionY'](),_0x266da5[_0xfabe7b(0x1fc)]*=_0x2382bc;let _0x453a0e=VisuMZ[_0xfabe7b(0xa74)][_0xfabe7b(0x8f9)][_0xfabe7b(0x515)](this,_0x266da5);return _0x266da5['x']=_0x522903,_0x266da5['y']=_0x2a2fdb,_0x266da5[_0xfabe7b(0x1fc)]=_0x480d77,_0x453a0e;},Sprite_Animation['prototype'][_0x46c6a8(0x42a)]=function(){const _0x133e1c=_0x46c6a8;if(this[_0x133e1c(0x542)])return![];return this[_0x133e1c(0x11f)]&&this[_0x133e1c(0x11f)][_0x133e1c(0x106)]&&this[_0x133e1c(0x11f)][_0x133e1c(0x106)]['match'](/<UNDER>/gi);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xbd8)]=Sprite_AnimationMV[_0x46c6a8(0x669)][_0x46c6a8(0x28b)],Sprite_AnimationMV[_0x46c6a8(0x669)][_0x46c6a8(0x28b)]=function(){const _0x517c1d=_0x46c6a8;VisuMZ[_0x517c1d(0xa74)][_0x517c1d(0xbd8)][_0x517c1d(0x515)](this);if(!SceneManager[_0x517c1d(0x849)]())return;if(this[_0x517c1d(0x11f)]['position']===0x3)this['x']=Math[_0x517c1d(0xa5e)](Graphics[_0x517c1d(0xb13)]/0x2),this['y']=Math[_0x517c1d(0xa5e)](Graphics[_0x517c1d(0x187)]/0x2);else{if(this[_0x517c1d(0xbd6)])return;}},Sprite_AnimationMV[_0x46c6a8(0x669)][_0x46c6a8(0x42a)]=function(){const _0x341625=_0x46c6a8;if(this[_0x341625(0x542)])return![];return this[_0x341625(0x11f)]&&this['_animation'][_0x341625(0x106)]&&this[_0x341625(0x11f)][_0x341625(0x106)]['match'](/<UNDER>/gi);},Sprite_Damage[_0x46c6a8(0x669)][_0x46c6a8(0x141)]=function(_0x1a60d3){const _0x489a28=_0x46c6a8,_0xdcf35a=_0x1a60d3[_0x489a28(0x34b)]()||_0x1a60d3[_0x489a28(0x600)]();if(_0xdcf35a[_0x489a28(0x54d)]||_0xdcf35a[_0x489a28(0x97e)])this[_0x489a28(0x557)]=0x0,this['createMiss']();else{if(_0xdcf35a[_0x489a28(0x5f9)])this[_0x489a28(0x557)]=_0xdcf35a[_0x489a28(0x820)]>=0x0?0x0:0x1,this[_0x489a28(0xbc6)](_0xdcf35a['hpDamage']);else _0x1a60d3['isAlive']()&&_0xdcf35a['mpDamage']!==0x0&&(this[_0x489a28(0x557)]=_0xdcf35a[_0x489a28(0x36e)]>=0x0?0x2:0x3,this['createDigits'](_0xdcf35a['mpDamage']));}_0xdcf35a[_0x489a28(0x580)]&&this[_0x489a28(0x843)]();},Sprite_Damage[_0x46c6a8(0x669)][_0x46c6a8(0x208)]=function(_0x294407){},Sprite_Damage[_0x46c6a8(0x669)]['createDigits']=function(_0x52d37d){const _0x43662e=_0x46c6a8;let _0x212237=this[_0x43662e(0x92d)](_0x52d37d);const _0xbfeefd=this['fontSize'](),_0x425c7d=Math[_0x43662e(0x2f2)](_0xbfeefd*0.75);for(let _0x1fecce=0x0;_0x1fecce<_0x212237['length'];_0x1fecce++){const _0x4504a7=this[_0x43662e(0x81c)](_0x425c7d,_0xbfeefd);_0x4504a7['bitmap']['drawText'](_0x212237[_0x1fecce],0x0,0x0,_0x425c7d,_0xbfeefd,_0x43662e(0x2bb)),_0x4504a7['x']=(_0x1fecce-(_0x212237[_0x43662e(0x50d)]-0x1)/0x2)*_0x425c7d,_0x4504a7['dy']=-_0x1fecce;}},Sprite_Damage['prototype'][_0x46c6a8(0x92d)]=function(_0x42e5ff){const _0x2e97d3=_0x46c6a8;let _0x4fd9b8=Math[_0x2e97d3(0xc59)](_0x42e5ff)[_0x2e97d3(0xb20)]();this[_0x2e97d3(0xa52)]()&&(_0x4fd9b8=VisuMZ[_0x2e97d3(0x5d8)](_0x4fd9b8));const _0x363f69=VisuMZ[_0x2e97d3(0xa74)][_0x2e97d3(0x154)][_0x2e97d3(0x1df)];let _0x52aa08='',_0xd72398='';switch(this[_0x2e97d3(0x557)]){case 0x0:_0x52aa08=_0x363f69[_0x2e97d3(0x50a)]||_0x2e97d3(0x536),_0xd72398=TextManager['hp'];if(_0x42e5ff===0x0)_0x52aa08='%1';break;case 0x1:_0x52aa08=_0x363f69[_0x2e97d3(0xac5)]||_0x2e97d3(0x754),_0xd72398=TextManager['hp'];break;case 0x2:_0x52aa08=_0x363f69[_0x2e97d3(0x57f)]||_0x2e97d3(0xae4),_0xd72398=TextManager['mp'];break;case 0x3:_0x52aa08=_0x363f69['mpHealingFmt']||_0x2e97d3(0x76a),_0xd72398=TextManager['mp'];break;}return _0x52aa08[_0x2e97d3(0x1ba)](_0x4fd9b8,_0xd72398)['trim']();},Sprite_Damage[_0x46c6a8(0x669)][_0x46c6a8(0xa52)]=function(){const _0xcb09d1=_0x46c6a8;return Imported['VisuMZ_0_CoreEngine']?VisuMZ['CoreEngine']['Settings'][_0xcb09d1(0x81d)]['DigitGroupingDamageSprites']:![];},Sprite_Damage[_0x46c6a8(0x669)]['setupCriticalEffect']=function(){const _0x1e505c=_0x46c6a8,_0x189fad=VisuMZ['BattleCore']['Settings'][_0x1e505c(0x1df)];_0x189fad[_0x1e505c(0x7c6)]=_0x189fad[_0x1e505c(0x7c6)]||[0x0,0x0,0x0,0x0],this['_flashColor']=_0x189fad[_0x1e505c(0x7c6)][_0x1e505c(0x7da)](0x0),this[_0x1e505c(0x5f2)]=_0x189fad[_0x1e505c(0x51c)]||0x1;},Sprite_Damage['prototype'][_0x46c6a8(0x31f)]=function(_0x4b28f4,_0x5f1cf5){const _0x859219=_0x46c6a8;this[_0x859219(0x398)]=_0x5f1cf5[_0x859219(0x111)]||[0x0,0x0,0x0,0x0],this[_0x859219(0x398)]=JsonEx['makeDeepCopy'](this[_0x859219(0x398)]),this[_0x859219(0x5f2)]=_0x5f1cf5[_0x859219(0x5a8)]||0x0;const _0xc68b55=this['fontSize'](),_0x455b18=Math[_0x859219(0x2f2)](_0xc68b55*0x1e),_0x465bae=this[_0x859219(0x81c)](_0x455b18,_0xc68b55);_0x465bae['bitmap'][_0x859219(0x2d8)]=ColorManager[_0x859219(0x8d2)](_0x5f1cf5[_0x859219(0x2d8)]),_0x465bae[_0x859219(0x64c)][_0x859219(0xabb)](_0x4b28f4,0x0,0x0,_0x455b18,_0xc68b55,_0x859219(0x2bb)),_0x465bae['dy']=0x0;},Sprite_Damage[_0x46c6a8(0x669)][_0x46c6a8(0x17b)]=function(_0x1640fb,_0x46ee90,_0x3d3fc0){const _0x1c0987=_0x46c6a8,_0x59217d=Math['max'](this[_0x1c0987(0x23a)](),ImageManager[_0x1c0987(0xa9c)]),_0x4438b1=Math[_0x1c0987(0x2f2)](_0x59217d*0x1e),_0x1d6844=this[_0x1c0987(0x81c)](_0x4438b1,_0x59217d),_0x51777a=ImageManager['iconWidth']/0x2,_0x581fab=_0x1d6844[_0x1c0987(0x64c)][_0x1c0987(0x4b2)](_0x46ee90+'\x20');_0x1d6844[_0x1c0987(0x64c)][_0x1c0987(0x2d8)]=ColorManager[_0x1c0987(0x8d2)](_0x3d3fc0['textColor']),_0x1d6844[_0x1c0987(0x64c)]['drawText'](_0x46ee90,_0x51777a,0x0,_0x4438b1-_0x51777a,_0x59217d,'center');const _0x5070c1=Math[_0x1c0987(0xa5e)]((_0x59217d-ImageManager[_0x1c0987(0xa9c)])/0x2),_0x4f02da=_0x4438b1/0x2-ImageManager[_0x1c0987(0x945)]-_0x581fab/0x2+_0x51777a/0x2,_0x4c4973=ImageManager[_0x1c0987(0xaec)](_0x1c0987(0x238)),_0x234ab0=ImageManager[_0x1c0987(0x945)],_0x2358dd=ImageManager['iconHeight'],_0x2e4fcf=_0x1640fb%0x10*_0x234ab0,_0x3ffe7a=Math[_0x1c0987(0x2f2)](_0x1640fb/0x10)*_0x2358dd;_0x1d6844[_0x1c0987(0x64c)]['blt'](_0x4c4973,_0x2e4fcf,_0x3ffe7a,_0x234ab0,_0x2358dd,_0x4f02da,_0x5070c1),this[_0x1c0987(0x398)]=_0x3d3fc0[_0x1c0987(0x111)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x1c0987(0x219)](this['_flashColor']),this['_flashDuration']=_0x3d3fc0[_0x1c0987(0x5a8)]||0x0,_0x1d6844['dy']=0x0,_0x3d3fc0[_0x1c0987(0xa4a)]&&(_0x1d6844['x']+=_0x3d3fc0[_0x1c0987(0xa4a)]),_0x3d3fc0[_0x1c0987(0x437)]&&(_0x1d6844['dy']+=_0x3d3fc0[_0x1c0987(0x437)]);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x2f9)]=Sprite_Damage[_0x46c6a8(0x669)][_0x46c6a8(0x81c)],Sprite_Damage[_0x46c6a8(0x669)][_0x46c6a8(0x81c)]=function(_0x69fea8,_0x38210c){const _0x35a52c=_0x46c6a8;return _0x38210c=Math[_0x35a52c(0xa5e)](_0x38210c*1.2),VisuMZ[_0x35a52c(0xa74)][_0x35a52c(0x2f9)][_0x35a52c(0x515)](this,_0x69fea8,_0x38210c);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x5c1)]=Sprite_StateIcon[_0x46c6a8(0x669)]['updateFrame'],Sprite_StateIcon[_0x46c6a8(0x669)][_0x46c6a8(0x2dc)]=function(){const _0x243d4f=_0x46c6a8;VisuMZ['BattleCore']['Sprite_StateIcon_updateFrame'][_0x243d4f(0x515)](this),this[_0x243d4f(0x1d7)]=this['_iconIndex']>0x0?0xff:0x0;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x6c5)]=Sprite_Weapon[_0x46c6a8(0x669)][_0x46c6a8(0x9f4)],Sprite_Weapon[_0x46c6a8(0x669)][_0x46c6a8(0x9f4)]=function(){const _0x46e4bf=_0x46c6a8;VisuMZ['BattleCore'][_0x46e4bf(0x6c5)][_0x46e4bf(0x515)](this),this['bitmap']&&(this[_0x46e4bf(0x64c)]['smooth']=VisuMZ[_0x46e4bf(0xa74)][_0x46e4bf(0x154)]['Actor'][_0x46e4bf(0x609)]);},VisuMZ['BattleCore'][_0x46c6a8(0xafa)]=Sprite_Gauge[_0x46c6a8(0x669)][_0x46c6a8(0x20d)],Sprite_Gauge[_0x46c6a8(0x669)]['smoothness']=function(){const _0x2578fd=_0x46c6a8;return this[_0x2578fd(0x7ea)]!==_0x2578fd(0x75e)?VisuMZ[_0x2578fd(0xa74)][_0x2578fd(0x154)]['HpGauge'][_0x2578fd(0x9df)]??0x14:VisuMZ[_0x2578fd(0xa74)][_0x2578fd(0xafa)][_0x2578fd(0x515)](this);};function Sprite_GaugeRate(){const _0xb01799=_0x46c6a8;this[_0xb01799(0x82c)](...arguments);}Sprite_GaugeRate['prototype']=Object[_0x46c6a8(0x4c2)](Sprite_Gauge['prototype']),Sprite_GaugeRate[_0x46c6a8(0x669)]['constructor']=Sprite_GaugeRate,Sprite_GaugeRate[_0x46c6a8(0x669)]['initialize']=function(){const _0x197d2a=_0x46c6a8;Sprite_Gauge[_0x197d2a(0x669)][_0x197d2a(0x82c)][_0x197d2a(0x515)](this),this[_0x197d2a(0x45c)]=![];},Sprite_GaugeRate[_0x46c6a8(0x669)][_0x46c6a8(0x3d0)]=function(_0x4be485,_0x2a74e8){const _0x34abf4=_0x46c6a8;this[_0x34abf4(0x45c)]=!![],Sprite_Gauge[_0x34abf4(0x669)]['updateTargetValue'][_0x34abf4(0x515)](this,_0x4be485,_0x2a74e8),this[_0x34abf4(0x45c)]=![];},Sprite_GaugeRate[_0x46c6a8(0x669)][_0x46c6a8(0x18f)]=function(){const _0x1fb2b6=_0x46c6a8;if(this[_0x1fb2b6(0x45c)]){const _0x2134c2=Sprite_Gauge[_0x1fb2b6(0x669)]['currentValue']['call'](this),_0x228f0=this[_0x1fb2b6(0x7e9)]();if(_0x228f0<=0x0)return'100%';return Math[_0x1fb2b6(0x2f2)](_0x2134c2/_0x228f0*0x64)+'%';}else return Sprite_Gauge[_0x1fb2b6(0x669)]['currentValue'][_0x1fb2b6(0x515)](this);},Sprite_GaugeRate['prototype']['currentDisplayedValue']=function(){const _0xf25241=_0x46c6a8,_0x1cfdfe=Sprite_Gauge['prototype']['currentValue'][_0xf25241(0x515)](this),_0x5a5d87=this['currentMaxValue']();if(_0x5a5d87<=0x0)return _0xf25241(0xc1b);return Math[_0xf25241(0x2f2)](_0x1cfdfe/_0x5a5d87*0x64)+'%';},Sprite_GaugeRate['prototype'][_0x46c6a8(0x296)]=function(){const _0x7f3e66=_0x46c6a8;if(this[_0x7f3e66(0x7e9)]()<=0x0)return 0x1;return Sprite_Gauge[_0x7f3e66(0x669)]['gaugeRate'][_0x7f3e66(0x515)](this);},Sprite_GaugeRate['prototype'][_0x46c6a8(0x28f)]=function(){const _0x1041b5=_0x46c6a8;if(this[_0x1041b5(0x7e9)]()<=0x0)return ColorManager['normalColor']();return Sprite_Gauge[_0x1041b5(0x669)][_0x1041b5(0x28f)][_0x1041b5(0x515)](this);},Sprite_GaugeRate[_0x46c6a8(0x669)][_0x46c6a8(0xa5c)]=function(){const _0x93f103=_0x46c6a8;this['_statusType']==='mp'&&this[_0x93f103(0x7e9)]()<=0x0&&($gameTemp[_0x93f103(0x5a7)]=!![]),Sprite_Gauge[_0x93f103(0x669)]['redraw'][_0x93f103(0x515)](this),$gameTemp[_0x93f103(0x5a7)]=undefined;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x924)]=ColorManager[_0x46c6a8(0x98b)],ColorManager['mpColor']=function(_0x5e6576){const _0x2ea8e6=_0x46c6a8;if($gameTemp[_0x2ea8e6(0x5a7)])return ColorManager[_0x2ea8e6(0x732)]();return VisuMZ[_0x2ea8e6(0xa74)][_0x2ea8e6(0x924)][_0x2ea8e6(0x515)](this,_0x5e6576);};function Sprite_HpGauge(){const _0x1d1cd6=_0x46c6a8;this[_0x1d1cd6(0x82c)](...arguments);}Sprite_HpGauge[_0x46c6a8(0x669)]=Object[_0x46c6a8(0x4c2)](Sprite_Gauge[_0x46c6a8(0x669)]),Sprite_HpGauge['prototype'][_0x46c6a8(0x2cf)]=Sprite_HpGauge,Sprite_HpGauge[_0x46c6a8(0x669)][_0x46c6a8(0x82c)]=function(){const _0x34293f=_0x46c6a8;Sprite_Gauge['prototype']['initialize'][_0x34293f(0x515)](this);},Sprite_HpGauge['prototype']['gaugeX']=function(){return 0x0;},Sprite_HpGauge['prototype'][_0x46c6a8(0xa5c)]=function(){const _0x26c885=_0x46c6a8;this[_0x26c885(0x64c)][_0x26c885(0x518)]();const _0x1b34be=this[_0x26c885(0x18f)]();!isNaN(_0x1b34be)&&this[_0x26c885(0x7e4)]();};function Sprite_EnemyName(){const _0x6200fc=_0x46c6a8;this[_0x6200fc(0x82c)](...arguments);}Sprite_EnemyName[_0x46c6a8(0x669)]=Object[_0x46c6a8(0x4c2)](Sprite_Name[_0x46c6a8(0x669)]),Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x2cf)]=Sprite_EnemyName,Sprite_EnemyName['prototype'][_0x46c6a8(0x82c)]=function(){const _0x47e848=_0x46c6a8;Sprite_Name['prototype'][_0x47e848(0x82c)]['call'](this),this[_0x47e848(0x634)]();},Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x8c3)]=function(){const _0x2286f2=_0x46c6a8;Sprite_Name[_0x2286f2(0x669)][_0x2286f2(0x8c3)][_0x2286f2(0x515)](this),this[_0x2286f2(0x1d7)]=0x0,this[_0x2286f2(0xb94)]=null,this[_0x2286f2(0x2da)]['x']=0.5,this[_0x2286f2(0x2da)]['y']=0x0;},Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x634)]=function(){const _0x55dd2f=_0x46c6a8;VisuMZ['BattleCore'][_0x55dd2f(0x154)]['Enemy'][_0x55dd2f(0xacc)]&&(this['_stateIconSprite']=new Sprite_StateIcon(),this[_0x55dd2f(0xa85)](this[_0x55dd2f(0x977)]));},Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x45f)]=function(){const _0x49adc3=_0x46c6a8;return Graphics[_0x49adc3(0xb13)];},Sprite_EnemyName['prototype'][_0x46c6a8(0x797)]=function(){const _0x235c87=_0x46c6a8;return this[_0x235c87(0xa36)]=this[_0x235c87(0xa36)]||Window_Base['prototype'][_0x235c87(0x1f8)]()||0x24,this[_0x235c87(0xa36)]*0x4;},Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x23a)]=function(){const _0xb1f5da=_0x46c6a8;return VisuMZ[_0xb1f5da(0xa74)]['Settings']['Enemy'][_0xb1f5da(0x28a)]||$gameSystem['mainFontSize']();},Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x3f6)]=function(_0x5ad5ec){const _0x52f0a9=_0x46c6a8;this[_0x52f0a9(0xb94)]=_0x5ad5ec;},Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x50f)]=function(){const _0x1b148f=_0x46c6a8;Sprite_Name['prototype'][_0x1b148f(0x50f)][_0x1b148f(0x515)](this),this[_0x1b148f(0x908)](),this['updatePosition'](),this[_0x1b148f(0xb6b)](),this[_0x1b148f(0x26d)]();},Sprite_EnemyName[_0x46c6a8(0x669)]['redraw']=function(){const _0x4e6ecc=_0x46c6a8;this[_0x4e6ecc(0xb64)]=undefined;const _0x4203e5=this['name'](),_0x4e82fb=this[_0x4e6ecc(0x45f)](),_0x328ef0=Window_Base[_0x4e6ecc(0x669)][_0x4e6ecc(0x1f8)]();this[_0x4e6ecc(0x2e2)](),this[_0x4e6ecc(0x64c)][_0x4e6ecc(0x518)](),this[_0x4e6ecc(0x64c)][_0x4e6ecc(0xabb)](_0x4203e5,0x0,0x0,_0x4e82fb,_0x328ef0,_0x4e6ecc(0x2bb));},Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x908)]=function(){const _0x458e4f=_0x46c6a8;if(!this['_linkedSprite'])return;this[_0x458e4f(0xa4d)]!==this['_linkedSprite']['_battler']&&this[_0x458e4f(0x208)](this[_0x458e4f(0xb94)][_0x458e4f(0xa4d)]);},Sprite_EnemyName[_0x46c6a8(0x669)]['updatePosition']=function(){const _0x1b4a82=_0x46c6a8;if(!this['_linkedSprite'])return;this['_lineHeight']=this[_0x1b4a82(0xa36)]||Window_Base[_0x1b4a82(0x669)][_0x1b4a82(0x1f8)](),this['x']=Math[_0x1b4a82(0xa5e)](this[_0x1b4a82(0xb94)][_0x1b4a82(0xc31)]),this['y']=Math[_0x1b4a82(0xa5e)](this[_0x1b4a82(0xb94)][_0x1b4a82(0x960)]-this[_0x1b4a82(0xa36)]*0.5);const _0x5ed7e2=VisuMZ[_0x1b4a82(0xa74)][_0x1b4a82(0x154)][_0x1b4a82(0x6de)];this['x']+=Math[_0x1b4a82(0xa5e)](_0x5ed7e2[_0x1b4a82(0x944)]||0x0),this['y']+=Math[_0x1b4a82(0xa5e)](_0x5ed7e2[_0x1b4a82(0x6b7)]||0x0);},Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0xb6b)]=function(){const _0x403f86=_0x46c6a8;this[_0x403f86(0x44b)]();},Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x44b)]=function(){const _0x640a6e=_0x46c6a8;if(!this['_stateIconSprite'])return;this[_0x640a6e(0xa4d)]!==this[_0x640a6e(0x977)]['_battler']&&this[_0x640a6e(0x977)][_0x640a6e(0x208)](this['_battler']);const _0x2e1dc2=this['textWidth']();this['_lineHeight']=this['_lineHeight']||Window_Base[_0x640a6e(0x669)]['lineHeight'](),this[_0x640a6e(0x977)]['x']=Math[_0x640a6e(0xa5e)]((_0x2e1dc2+ImageManager['iconWidth'])/0x2)+0x8,this[_0x640a6e(0x977)]['y']=this['_lineHeight']/0x2;const _0x5e03de=VisuMZ[_0x640a6e(0xa74)][_0x640a6e(0x154)]['Enemy'];this[_0x640a6e(0x977)]['x']+=_0x5e03de[_0x640a6e(0x4b9)]||0x0,this['_stateIconSprite']['y']+=_0x5e03de['AttachStateOffsetY']||0x0;},Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x26d)]=function(){const _0x4b97ac=_0x46c6a8,_0x302fa6=this[_0x4b97ac(0x2a3)]();if(_0x302fa6&&this[_0x4b97ac(0x1d7)]<0xff)this[_0x4b97ac(0x1d7)]+=0x10;else!_0x302fa6&&this[_0x4b97ac(0x1d7)]>0x0&&(this[_0x4b97ac(0x1d7)]-=0x10);},Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x2a3)]=function(){const _0x5f231c=_0x46c6a8;if(this[_0x5f231c(0x2bc)]())return![];else{if(!this[_0x5f231c(0xa4d)])return![];else{if(!this[_0x5f231c(0xa4d)]['isAppeared']())return![];else{if(this[_0x5f231c(0x8bf)]())return!![];else{if(this[_0x5f231c(0xa4d)][_0x5f231c(0xa10)]())return![];else{if(this[_0x5f231c(0x42b)]())return!![];else{if(this[_0x5f231c(0x477)]())return!![];else{if(this[_0x5f231c(0x133)]())return!![];else{if(this['isIncludedInEnemyWindow']())return!![];else{if(this[_0x5f231c(0x1d7)]>0x0)return![];}}}}}}}}}},Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x8bf)]=function(){const _0x1f643f=_0x46c6a8;return this[_0x1f643f(0xa4d)]&&this['_battler'][_0x1f643f(0x970)]();},Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x2bc)]=function(){const _0x413584=_0x46c6a8;return VisuMZ[_0x413584(0xa74)][_0x413584(0x154)][_0x413584(0x6de)][_0x413584(0x362)];},Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x42b)]=function(){const _0x49bf45=_0x46c6a8;if(!VisuMZ['BattleCore'][_0x49bf45(0x154)][_0x49bf45(0x6de)][_0x49bf45(0xa3a)])return![];if(BattleManager[_0x49bf45(0x653)]()&&!BattleManager[_0x49bf45(0x93b)]())return![];return this[_0x49bf45(0xa4d)]&&BattleManager[_0x49bf45(0x80d)]&&BattleManager['_targets'][_0x49bf45(0x4a3)](this[_0x49bf45(0xa4d)]);},Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x477)]=function(){return![];},Sprite_EnemyName[_0x46c6a8(0x669)]['isAlwaysVisible']=function(){const _0x38cd3e=_0x46c6a8;return VisuMZ[_0x38cd3e(0xa74)][_0x38cd3e(0x154)][_0x38cd3e(0x6de)][_0x38cd3e(0x262)];},Sprite_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x886)]=function(){const _0x45cbc1=_0x46c6a8;return VisuMZ['BattleCore'][_0x45cbc1(0x154)]['Enemy'][_0x45cbc1(0x125)]?this[_0x45cbc1(0xa4d)]['isSelected']():SceneManager['_scene']['_enemyWindow']&&SceneManager[_0x45cbc1(0x7a7)][_0x45cbc1(0x44f)][_0x45cbc1(0x998)]&&SceneManager['_scene'][_0x45cbc1(0x44f)][_0x45cbc1(0x97b)]['includes'](this['_battler']);},Sprite_EnemyName['prototype'][_0x46c6a8(0x14e)]=function(){const _0x39ff99=_0x46c6a8;if(!this['_battler'])return 0x0;if(this[_0x39ff99(0xb64)])return this['_cacheTextWidth'];let _0x45efea=this[_0x39ff99(0x106)]();return this[_0x39ff99(0x2e2)](),Imported[_0x39ff99(0x33d)]&&TextManager[_0x39ff99(0x79a)]&&(_0x45efea=TextManager[_0x39ff99(0x79a)](_0x45efea)),this[_0x39ff99(0xb64)]=this[_0x39ff99(0x64c)]['measureTextWidth'](_0x45efea)||0x1,this['_cacheTextWidth'];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x145)]=Sprite_Battleback['prototype']['adjustPosition'],Sprite_Battleback[_0x46c6a8(0x669)][_0x46c6a8(0x152)]=function(){const _0x2e4698=_0x46c6a8,_0x1dfd49=VisuMZ[_0x2e4698(0xa74)]['Settings'][_0x2e4698(0x5a2)];if(!_0x1dfd49)return VisuMZ[_0x2e4698(0xa74)][_0x2e4698(0x145)][_0x2e4698(0x515)](this);const _0x2ce797=String(_0x1dfd49[_0x2e4698(0x7a6)])||'MZ';switch(_0x2ce797){case'MZ':VisuMZ[_0x2e4698(0xa74)]['Sprite_Battleback_adjustPosition'][_0x2e4698(0x515)](this);break;case _0x2e4698(0xb1f):this[_0x2e4698(0xad8)]();break;case _0x2e4698(0xbe3):this[_0x2e4698(0x3e2)]();break;case _0x2e4698(0x95f):this[_0x2e4698(0x957)]();break;case _0x2e4698(0x5e7):this[_0x2e4698(0xaaa)]();break;}},Sprite_Battleback[_0x46c6a8(0x669)]['adjustPosition_1for1']=function(){const _0x5e7e47=_0x46c6a8,_0x141beb=VisuMZ[_0x5e7e47(0xa74)][_0x5e7e47(0x154)][_0x5e7e47(0x5a2)];if(_0x141beb&&_0x141beb[_0x5e7e47(0x345)])return _0x141beb[_0x5e7e47(0x345)][_0x5e7e47(0x515)](this);this[_0x5e7e47(0x1e1)]=Graphics['width'],this[_0x5e7e47(0x1fc)]=Graphics['height'];const _0x3020a5=0x1;this[_0x5e7e47(0x918)]['x']=_0x3020a5,this[_0x5e7e47(0x918)]['y']=_0x3020a5,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0x46c6a8(0x3e2)]=function(){const _0xce86aa=_0x46c6a8,_0x4ee16b=VisuMZ[_0xce86aa(0xa74)][_0xce86aa(0x154)][_0xce86aa(0x5a2)];if(_0x4ee16b&&_0x4ee16b[_0xce86aa(0xa44)])return _0x4ee16b['jsScaleToFit']['call'](this);this[_0xce86aa(0x1e1)]=Graphics[_0xce86aa(0x1e1)],this[_0xce86aa(0x1fc)]=Graphics['height'];const _0x2c4bc3=this[_0xce86aa(0x1e1)]/this['bitmap'][_0xce86aa(0x1e1)],_0x901f41=this[_0xce86aa(0x1fc)]/this[_0xce86aa(0x64c)][_0xce86aa(0x1fc)],_0x7e678a=Math[_0xce86aa(0x968)](_0x2c4bc3,_0x901f41);this[_0xce86aa(0x918)]['x']=_0x7e678a,this[_0xce86aa(0x918)]['y']=_0x7e678a,this['x']=(Graphics['width']-this[_0xce86aa(0x1e1)])/0x2,this['y']=Graphics[_0xce86aa(0x1fc)]-this[_0xce86aa(0x1fc)];},Sprite_Battleback[_0x46c6a8(0x669)][_0x46c6a8(0x957)]=function(){const _0x13d3ee=_0x46c6a8,_0x368e93=VisuMZ[_0x13d3ee(0xa74)]['Settings'][_0x13d3ee(0x5a2)];if(_0x368e93&&_0x368e93[_0x13d3ee(0x829)])return _0x368e93[_0x13d3ee(0x829)][_0x13d3ee(0x515)](this);this[_0x13d3ee(0x1e1)]=Graphics[_0x13d3ee(0x1e1)],this[_0x13d3ee(0x1fc)]=Graphics[_0x13d3ee(0x1fc)];const _0x1b867c=Math[_0x13d3ee(0x9bd)](0x1,this['width']/this['bitmap'][_0x13d3ee(0x1e1)]),_0x3905f4=Math['min'](0x1,this[_0x13d3ee(0x1fc)]/this[_0x13d3ee(0x64c)][_0x13d3ee(0x1fc)]),_0x1878a1=Math['max'](_0x1b867c,_0x3905f4);this[_0x13d3ee(0x918)]['x']=_0x1878a1,this[_0x13d3ee(0x918)]['y']=_0x1878a1,this['x']=(Graphics['width']-this[_0x13d3ee(0x1e1)])/0x2,this['y']=Graphics['height']-this['height'];},Sprite_Battleback[_0x46c6a8(0x669)][_0x46c6a8(0xaaa)]=function(){const _0x12fb5b=_0x46c6a8,_0x75c754=VisuMZ[_0x12fb5b(0xa74)][_0x12fb5b(0x154)][_0x12fb5b(0x5a2)];if(_0x75c754&&_0x75c754[_0x12fb5b(0x777)])return _0x75c754['jsScaleUp']['call'](this);this['width']=Graphics[_0x12fb5b(0x1e1)],this[_0x12fb5b(0x1fc)]=Graphics['height'];const _0xe86322=Math[_0x12fb5b(0x968)](0x1,this[_0x12fb5b(0x1e1)]/this[_0x12fb5b(0x64c)][_0x12fb5b(0x1e1)]),_0x42e79d=Math[_0x12fb5b(0x968)](0x1,this[_0x12fb5b(0x1fc)]/this['bitmap'][_0x12fb5b(0x1fc)]),_0x3f0ef7=Math[_0x12fb5b(0x968)](_0xe86322,_0x42e79d);this[_0x12fb5b(0x918)]['x']=_0x3f0ef7,this[_0x12fb5b(0x918)]['y']=_0x3f0ef7,this['x']=(Graphics[_0x12fb5b(0x1e1)]-this[_0x12fb5b(0x1e1)])/0x2,this['y']=Graphics[_0x12fb5b(0x1fc)]-this[_0x12fb5b(0x1fc)];},Spriteset_Battle[_0x46c6a8(0x4d7)]=VisuMZ['BattleCore'][_0x46c6a8(0x154)][_0x46c6a8(0x5ab)][_0x46c6a8(0x49e)]??!![],Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xafc)]=function(){const _0x404b8c=_0x46c6a8;if(!$gameSystem[_0x404b8c(0x33c)]())return![];return![];},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x9f5)]=function(){return 0x0;},Spriteset_Battle[_0x46c6a8(0x669)]['animationNextDelay']=function(){return 0x0;},VisuMZ[_0x46c6a8(0xa74)]['Spriteset_Battle_createLowerLayer']=Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x287)],Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x287)]=function(){const _0x30d3d3=_0x46c6a8;VisuMZ[_0x30d3d3(0xa74)][_0x30d3d3(0x768)][_0x30d3d3(0x515)](this),this[_0x30d3d3(0x52e)](),this[_0x30d3d3(0x446)]();},VisuMZ['BattleCore'][_0x46c6a8(0x189)]=Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x50f)],Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x50f)]=function(){const _0x31ff11=_0x46c6a8;VisuMZ['BattleCore'][_0x31ff11(0x189)][_0x31ff11(0x515)](this),this[_0x31ff11(0x8bb)](),this[_0x31ff11(0x3f0)](),this[_0x31ff11(0x3e8)](),this[_0x31ff11(0x922)]();},Spriteset_Battle['prototype'][_0x46c6a8(0x52e)]=function(){const _0x10e247=_0x46c6a8;this[_0x10e247(0xa2f)]=new Weather(),this[_0x10e247(0x1e0)][_0x10e247(0xa85)](this[_0x10e247(0xa2f)]);},Spriteset_Battle[_0x46c6a8(0x669)]['updateWeather']=function(){const _0x43753e=_0x46c6a8;this[_0x43753e(0xa2f)][_0x43753e(0xaa8)]=$gameScreen[_0x43753e(0xa92)](),this[_0x43753e(0xa2f)][_0x43753e(0x297)]=$gameScreen[_0x43753e(0x57e)]();},Game_Interpreter[_0x46c6a8(0x669)][_0x46c6a8(0x7d2)]=function(_0x407ea7){const _0x304b7b=_0x46c6a8;$gameScreen[_0x304b7b(0x122)](_0x407ea7[0x0],_0x407ea7[0x1],_0x407ea7[0x2]);if(_0x407ea7[0x3])this['wait'](_0x407ea7[0x2]);return!![];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x60d)]=Game_Interpreter[_0x46c6a8(0x669)][_0x46c6a8(0x709)],Game_Interpreter['prototype'][_0x46c6a8(0x709)]=function(_0xcbecad){const _0x39183d=_0x46c6a8;return VisuMZ[_0x39183d(0xa74)][_0x39183d(0x60d)][_0x39183d(0x515)](this,_0xcbecad),SceneManager[_0x39183d(0x849)]()&&SceneManager[_0x39183d(0x7a7)]['_spriteset'][_0x39183d(0x4da)](_0xcbecad[0x0],_0xcbecad[0x1]),!![];},Sprite_Battleback[_0x46c6a8(0x669)][_0x46c6a8(0x927)]=function(){const _0x3bedfb=_0x46c6a8;if($gameMap[_0x3bedfb(0x927)]()!==null)return $gameMap[_0x3bedfb(0x927)]();else{if(BattleManager[_0x3bedfb(0x6a3)]())return $dataSystem[_0x3bedfb(0x927)];else return $gameMap[_0x3bedfb(0x941)]()?this[_0x3bedfb(0x285)]():'';}},Sprite_Battleback[_0x46c6a8(0x669)][_0x46c6a8(0x8f5)]=function(){const _0x2ac9f0=_0x46c6a8;if($gameMap[_0x2ac9f0(0x8f5)]()!==null)return $gameMap[_0x2ac9f0(0x8f5)]();else{if(BattleManager[_0x2ac9f0(0x6a3)]())return $dataSystem[_0x2ac9f0(0x8f5)];else return $gameMap[_0x2ac9f0(0x941)]()?this[_0x2ac9f0(0x98c)]():'';}},Spriteset_Battle['prototype'][_0x46c6a8(0x216)]=function(_0x26519c,_0x10f693){const _0x5824a0=_0x46c6a8;_0x26519c[_0x5824a0(0x64c)]=_0x10f693;},Spriteset_Battle[_0x46c6a8(0x669)]['changeBattlebacks']=function(_0x48c8f1,_0x37c075){const _0x4ce86d=_0x46c6a8;_0x48c8f1=_0x48c8f1||'',_0x37c075=_0x37c075||'';_0x48c8f1===''&&_0x37c075===''&&(_0x48c8f1=this[_0x4ce86d(0xa93)]['battleback1Name'](),_0x37c075=this[_0x4ce86d(0x307)]['battleback2Name']());const _0x173811=ImageManager[_0x4ce86d(0x59b)](_0x48c8f1),_0x418962=ImageManager[_0x4ce86d(0x4c8)](_0x37c075);_0x173811[_0x4ce86d(0xb7c)](this['updateBattlebackBitmap1'][_0x4ce86d(0x5fa)](this,this['_back1Sprite'],this[_0x4ce86d(0x307)],_0x173811,_0x418962));},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x4f6)]=function(_0x185245,_0x54eef7,_0x5dabb7,_0xf9afa0){const _0x2a5225=_0x46c6a8;_0xf9afa0[_0x2a5225(0xb7c)](this[_0x2a5225(0x7fb)][_0x2a5225(0x5fa)](this,_0x185245,_0x54eef7,_0x5dabb7,_0xf9afa0));},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x7fb)]=function(_0x2a2e2b,_0x2acde4,_0x5c7107,_0x2750f7){const _0x3d7149=_0x46c6a8;_0x2a2e2b[_0x3d7149(0x64c)]=_0x5c7107,_0x2acde4['bitmap']=_0x2750f7,_0x2a2e2b['adjustPosition'](),_0x2acde4[_0x3d7149(0x152)]();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xb96)]=Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xc25)],Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xc25)]=function(){const _0x34c333=_0x46c6a8;VisuMZ[_0x34c333(0xa74)][_0x34c333(0xb96)][_0x34c333(0x515)](this),this[_0x34c333(0xb2f)]();},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xb2f)]=function(){const _0x32e4f3=_0x46c6a8;this[_0x32e4f3(0x666)](),this[_0x32e4f3(0xab9)](),this[_0x32e4f3(0x5f1)](),this['createDamageContainer'](),this[_0x32e4f3(0x642)]();},Spriteset_Battle[_0x46c6a8(0x669)]['createBattleFieldContainer']=function(){const _0xc17769=_0x46c6a8;this[_0xc17769(0xa17)]=new Sprite(),this[_0xc17769(0x1e0)]['addChild'](this['_underAnimationContainer']),this[_0xc17769(0x13f)]=new Sprite(),this['_battleField']['addChild'](this[_0xc17769(0x13f)]);},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x5f1)]=function(){const _0x353546=_0x46c6a8;this[_0x353546(0xb8a)]=new Sprite(),Spriteset_Battle[_0x353546(0x4d7)]?this[_0x353546(0xa85)](this[_0x353546(0xb8a)]):this['_battleField']['addChild'](this['_animationContainer']);},Spriteset_Battle[_0x46c6a8(0x669)]['createDamageContainer']=function(){const _0x57db75=_0x46c6a8;this['_damageContainer']=new Sprite(),this['_damageContainer']['x']=this[_0x57db75(0x1e0)]['x'],this[_0x57db75(0x60f)]['y']=this[_0x57db75(0x1e0)]['y'],this[_0x57db75(0xa85)](this[_0x57db75(0x60f)]);},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x642)]=function(){const _0x581927=_0x46c6a8;if(!this[_0x581927(0xafc)]())return;this['_battlerContainer'][_0x581927(0x918)]['x']=-0x1,this[_0x581927(0x13f)]['x']=this[_0x581927(0x1e0)][_0x581927(0x1e1)],this[_0x581927(0x463)][_0x581927(0x918)]['x']=-0x1,this['_uiContainer']['x']=this['_battleField']['width'],this['_animationContainer'][_0x581927(0x918)]['x']=-0x1,this[_0x581927(0xb8a)]['x']=this[_0x581927(0x1e0)][_0x581927(0x1e1)],this[_0x581927(0x60f)]['scale']['x']=-0x1,this[_0x581927(0x60f)]['x']=this[_0x581927(0x1e0)]['x']+this[_0x581927(0x1e0)][_0x581927(0x1e1)];},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xc04)]=function(){const _0x3a517b=_0x46c6a8;Imported[_0x3a517b(0x12b)]&&this['coreEngineRepositionEnemies']()&&this[_0x3a517b(0x510)]();const _0x26dfa4=$gameTroop[_0x3a517b(0x24a)](),_0x22491d=[];for(const _0x3240f9 of _0x26dfa4){_0x22491d[_0x3a517b(0x78c)](new Sprite_Enemy(_0x3240f9));}_0x22491d[_0x3a517b(0x2fe)](this[_0x3a517b(0x594)][_0x3a517b(0x5fa)](this));for(const _0x13ede7 of _0x22491d){this[_0x3a517b(0x13f)]['addChild'](_0x13ede7);}this[_0x3a517b(0xa32)]=_0x22491d;},Spriteset_Battle['prototype'][_0x46c6a8(0x3fa)]=function(){const _0x5c3ae8=_0x46c6a8;this['_actorSprites']=[];for(let _0x5cec99=0x0;_0x5cec99<$gameParty[_0x5c3ae8(0x769)]();_0x5cec99++){const _0x2342fe=$gameParty['battleMembers']()[_0x5cec99],_0x24d012=new Sprite_Actor();_0x24d012[_0x5c3ae8(0x8a4)](_0x2342fe),_0x24d012['setBattler'](_0x2342fe),_0x24d012[_0x5c3ae8(0x50f)](),this[_0x5c3ae8(0x115)][_0x5c3ae8(0x78c)](_0x24d012),this[_0x5c3ae8(0x13f)]['addChild'](_0x24d012);}},Spriteset_Battle['prototype'][_0x46c6a8(0x9c4)]=function(_0x182ade,_0x5c4da9,_0x55aa1a,_0x2c07cf){const _0x375478=_0x46c6a8,_0x23e61b=this[_0x375478(0x440)](_0x5c4da9),_0x4b142b=new(_0x23e61b?Sprite_AnimationMV:Sprite_Animation)(),_0x53e2ab=this[_0x375478(0x266)](_0x182ade);this[_0x375478(0xb76)](_0x182ade[0x0])&&(_0x55aa1a=!_0x55aa1a),_0x4b142b[_0x375478(0x980)]=_0x182ade,_0x4b142b[_0x375478(0x208)](_0x53e2ab,_0x5c4da9,_0x55aa1a,_0x2c07cf),this[_0x375478(0x383)](_0x4b142b);},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x383)]=function(_0x4be91c){const _0x2f70e5=_0x46c6a8;this[_0x2f70e5(0x801)](_0x4be91c)?(this[_0x2f70e5(0x483)]()[_0x2f70e5(0xa85)](_0x4be91c),_0x4be91c[_0x2f70e5(0xbd6)]=!![]):(Spriteset_Battle[_0x2f70e5(0x4d7)]&&(this[_0x2f70e5(0xb8a)]['x']=this['_effectsContainer']['x'],this[_0x2f70e5(0xb8a)]['y']=this[_0x2f70e5(0x504)]['y']),this[_0x2f70e5(0xa17)]&&_0x4be91c[_0x2f70e5(0x42a)]&&_0x4be91c['isUnderAnimation']()?(this['_underAnimationContainer'][_0x2f70e5(0xa85)](_0x4be91c),this[_0x2f70e5(0xa17)]['x']=this[_0x2f70e5(0xb8a)]['x'],this[_0x2f70e5(0xa17)]['y']=this[_0x2f70e5(0xb8a)]['y']):this[_0x2f70e5(0xb8a)][_0x2f70e5(0xa85)](_0x4be91c)),this[_0x2f70e5(0x373)]['push'](_0x4be91c);},Spriteset_Battle['prototype'][_0x46c6a8(0x801)]=function(_0x391091){const _0x10a098=_0x46c6a8;if(!_0x391091)return![];if(!_0x391091[_0x10a098(0x11f)])return![];if(!_0x391091[_0x10a098(0x980)][0x0])return![];if(_0x391091[_0x10a098(0x980)][0x0][_0x10a098(0x4ec)]&&!_0x391091[_0x10a098(0x980)][0x0][_0x10a098(0x4ec)]())return![];if($gameSystem[_0x10a098(0x33c)]())return![];if(!this['battleStatusWindowAnimationContainer']())return![];if(_0x391091[_0x10a098(0x2cf)]===Sprite_Animation){const _0x480a06=VisuMZ[_0x10a098(0xa74)][_0x10a098(0x154)][_0x10a098(0xa6f)];_0x480a06['FvAniEachTarget']=_0x480a06[_0x10a098(0x7c0)]??!![];if(_0x391091['_animation'][_0x10a098(0x2e3)]===0x0&&!_0x480a06[_0x10a098(0x7c0)])return![];_0x480a06[_0x10a098(0xb40)]=_0x480a06[_0x10a098(0xb40)]??!![];if(_0x391091[_0x10a098(0x11f)][_0x10a098(0x2e3)]===0x1&&!_0x480a06[_0x10a098(0xb40)])return![];_0x480a06[_0x10a098(0x553)]=_0x480a06[_0x10a098(0x553)]??![];if(_0x391091['_animation'][_0x10a098(0x2e3)]===0x2&&!_0x480a06[_0x10a098(0x553)])return![];}else{if(_0x391091[_0x10a098(0x2cf)]===Sprite_AnimationMV){if(_0x391091[_0x10a098(0x11f)]['position']===0x3)return![];}}return!![];const _0x4a4a07=Window_BattleStatus[_0x10a098(0x669)][_0x10a098(0x753)]();return['xp',_0x10a098(0x23e)][_0x10a098(0x6f3)](_0x4a4a07);},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x483)]=function(){const _0x2f3cc2=_0x46c6a8;if(!SceneManager[_0x2f3cc2(0x7a7)])return null;if(!SceneManager['_scene'][_0x2f3cc2(0x624)])return null;if(!SceneManager[_0x2f3cc2(0x7a7)][_0x2f3cc2(0x624)][_0x2f3cc2(0x504)])return null;return SceneManager[_0x2f3cc2(0x7a7)][_0x2f3cc2(0x624)][_0x2f3cc2(0x504)];},Spriteset_Battle[_0x46c6a8(0x669)]['removeAnimation']=function(_0xd9dd7e){const _0x22adf9=_0x46c6a8;this['removeAnimationFromContainer'](_0xd9dd7e);for(const _0x8a1f34 of _0xd9dd7e[_0x22adf9(0x980)]){_0x8a1f34[_0x22adf9(0x36c)]&&_0x8a1f34['endAnimation']();}_0xd9dd7e[_0x22adf9(0x593)]();},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x972)]=function(_0x529c5f){const _0x524e5c=_0x46c6a8;this[_0x524e5c(0x801)](_0x529c5f)?this[_0x524e5c(0x483)]()['removeChild'](_0x529c5f):this[_0x524e5c(0xb8a)][_0x524e5c(0x806)](_0x529c5f);this[_0x524e5c(0xa17)]&&this[_0x524e5c(0xa17)][_0x524e5c(0x806)](_0x529c5f);this[_0x524e5c(0x504)][_0x524e5c(0x806)](_0x529c5f),this['_animationContainer'][_0x524e5c(0x806)](_0x529c5f),this['_animationSprites']['remove'](_0x529c5f);if(this['_fauxAnimationSprites'])this['_fauxAnimationSprites'][_0x524e5c(0x45d)](_0x529c5f);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x864)]=Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x925)],Spriteset_Battle[_0x46c6a8(0x669)]['updateActors']=function(){const _0x5b6a5c=_0x46c6a8;VisuMZ['BattleCore'][_0x5b6a5c(0x864)]['call'](this),this[_0x5b6a5c(0x8bb)]();},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x8bb)]=function(){const _0x5a4661=_0x46c6a8;this[_0x5a4661(0x13f)][_0x5a4661(0x615)][_0x5a4661(0x2fe)](this['compareBattlerSprites']['bind'](this)),this[_0x5a4661(0x1a3)]();if(!this['_battlerContainer'])return;this[_0x5a4661(0x13f)]['opacity']=this[_0x5a4661(0xb2d)]();},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x8f3)]=function(_0x4f9ae9,_0xa6b2b2){const _0x41414c=_0x46c6a8;if(VisuMZ[_0x41414c(0xa74)][_0x41414c(0x154)][_0x41414c(0xa6f)]['PrioritySortActors']){if(_0x4f9ae9['_battler']&&_0xa6b2b2['_battler']){if(_0x4f9ae9[_0x41414c(0xa4d)][_0x41414c(0x4ec)]()&&_0xa6b2b2[_0x41414c(0xa4d)][_0x41414c(0x8de)]())return 0x1;else{if(_0xa6b2b2[_0x41414c(0xa4d)][_0x41414c(0x4ec)]()&&_0x4f9ae9[_0x41414c(0xa4d)][_0x41414c(0x8de)]())return-0x1;}}}return _0x4f9ae9[_0x41414c(0x960)]!==_0xa6b2b2['_baseY']?_0x4f9ae9[_0x41414c(0x960)]-_0xa6b2b2[_0x41414c(0x960)]:_0xa6b2b2['spriteId']-_0x4f9ae9['spriteId'];},Spriteset_Battle[_0x46c6a8(0x669)]['putActiveBattlerOnTop']=function(){const _0x4470c6=_0x46c6a8;if(!VisuMZ['BattleCore'][_0x4470c6(0x154)]['Actor'][_0x4470c6(0x301)])return;const _0x5058c8=BattleManager['_subject'];if(_0x5058c8){if(_0x5058c8['isActor']()&&!$gameSystem[_0x4470c6(0x33c)]())return;if(_0x5058c8===BattleManager[_0x4470c6(0x185)]())return;const _0x2ff53d=_0x5058c8[_0x4470c6(0x62d)]();if(_0x2ff53d&&_0x5058c8[_0x4470c6(0x4ec)]())this[_0x4470c6(0x13f)][_0x4470c6(0xa85)](_0x2ff53d);}},Spriteset_Battle[_0x46c6a8(0x669)]['processEscape']=function(){const _0x2a23af=_0x46c6a8;for(const _0x3ea379 of $gameParty[_0x2a23af(0xa1f)]()){if(!_0x3ea379)continue;if(!_0x3ea379[_0x2a23af(0x62d)]())continue;_0x3ea379[_0x2a23af(0x62d)]()[_0x2a23af(0x6ec)]=!![],_0x3ea379[_0x2a23af(0x62d)]()[_0x2a23af(0x51f)]();}},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0xab9)]=function(){const _0x234e4a=_0x46c6a8;this[_0x234e4a(0x463)]=new Sprite(),Spriteset_Battle[_0x234e4a(0x4d7)]?this['addChild'](this[_0x234e4a(0x463)]):this['_battleField'][_0x234e4a(0xa85)](this[_0x234e4a(0x463)]),SceneManager[_0x234e4a(0x7a7)][_0x234e4a(0x463)]=this[_0x234e4a(0x463)];},Spriteset_Battle[_0x46c6a8(0x669)]['createEnemyNames']=function(){const _0x515c33=_0x46c6a8;if(VisuMZ['BattleCore'][_0x515c33(0x154)][_0x515c33(0x6de)][_0x515c33(0x44a)])return;this['_enemyNameContainer']=new Sprite(),BattleManager[_0x515c33(0x393)](this[_0x515c33(0x18b)]);for(const _0x5c4d42 of this[_0x515c33(0xa32)]){const _0x527b57=new Sprite_EnemyName();this[_0x515c33(0x18b)][_0x515c33(0xa85)](_0x527b57),_0x527b57[_0x515c33(0x3f6)](_0x5c4d42);}},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x3f0)]=function(){const _0x352cc0=_0x46c6a8;if(!this[_0x352cc0(0x60f)])return;if(!this[_0x352cc0(0x463)])return;const _0x2bca49=Spriteset_Battle[_0x352cc0(0x4d7)]?this[_0x352cc0(0x60f)]['x']:0x0,_0x4fdaa9=Spriteset_Battle[_0x352cc0(0x4d7)]?this[_0x352cc0(0x60f)]['y']:0x0,_0xed0684=Imported[_0x352cc0(0x538)]?this[_0x352cc0(0x1e0)]['x']:0x0,_0xe517cb=Imported[_0x352cc0(0x538)]?this[_0x352cc0(0x1e0)]['y']:0x0;this['_uiContainer']['x']=_0x2bca49+_0xed0684,this['_uiContainer']['y']=_0x4fdaa9+_0xe517cb;},BattleManager[_0x46c6a8(0x393)]=function(_0x149cf9){const _0x339eec=_0x46c6a8;if(!SceneManager['_scene'][_0x339eec(0x463)])return;SceneManager[_0x339eec(0x7a7)]['_uiContainer'][_0x339eec(0xa85)](_0x149cf9);},BattleManager['removeChildFromUiContainer']=function(_0x2bfb93){const _0x12374c=_0x46c6a8;if(!SceneManager['_scene'][_0x12374c(0x463)])return;SceneManager[_0x12374c(0x7a7)]['_uiContainer'][_0x12374c(0x806)](_0x2bfb93);},Spriteset_Battle[_0x46c6a8(0x669)]['targetBattlerContainerOpacity']=function(){return 0xff;},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x915)]=function(){return![];},Spriteset_Battle[_0x46c6a8(0x669)]['isAnyoneFloating']=function(){const _0x206168=_0x46c6a8;return this[_0x206168(0x4ee)]()[_0x206168(0x4a4)](_0x1973ba=>_0x1973ba[_0x206168(0x98d)]());},Spriteset_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x1c8)]=function(){const _0x19d6d4=_0x46c6a8;return this[_0x19d6d4(0x4ee)]()[_0x19d6d4(0x4a4)](_0x5ee976=>_0x5ee976[_0x19d6d4(0x77c)]());},Spriteset_Battle['prototype'][_0x46c6a8(0x415)]=function(){const _0x1b7f49=_0x46c6a8;return this['battlerSprites']()['some'](_0x618bab=>_0x618bab[_0x1b7f49(0x6af)]());},Spriteset_Battle[_0x46c6a8(0x669)]['isAnyoneSkewing']=function(){const _0x409d07=_0x46c6a8;return this[_0x409d07(0x4ee)]()[_0x409d07(0x4a4)](_0xd58a46=>_0xd58a46[_0x409d07(0x65f)]());},Spriteset_Battle[_0x46c6a8(0x669)]['isAnyoneSpinning']=function(){const _0x5b01bd=_0x46c6a8;return this[_0x5b01bd(0x4ee)]()[_0x5b01bd(0x4a4)](_0x9dd62d=>_0x9dd62d['isSpinning']());},Spriteset_Battle[_0x46c6a8(0x669)]['isAnyoneChangingOpacity']=function(){const _0x15c65c=_0x46c6a8;return this[_0x15c65c(0x4ee)]()['some'](_0x30a672=>_0x30a672[_0x15c65c(0x96d)]());},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x335)]=Window_ItemList['prototype']['maxCols'],Window_ItemList[_0x46c6a8(0x669)][_0x46c6a8(0xbc8)]=function(){const _0x32dd64=_0x46c6a8;return SceneManager[_0x32dd64(0x849)]()?SceneManager[_0x32dd64(0x7a7)]['battleLayoutStyle']()===_0x32dd64(0x9a1)?VisuMZ[_0x32dd64(0xa74)][_0x32dd64(0x154)][_0x32dd64(0x5ab)][_0x32dd64(0x855)]:VisuMZ['BattleCore'][_0x32dd64(0x154)][_0x32dd64(0x5ab)][_0x32dd64(0x978)]:VisuMZ['BattleCore'][_0x32dd64(0x335)][_0x32dd64(0x515)](this);},VisuMZ[_0x46c6a8(0xa74)]['Window_SkillList_maxCols']=Window_SkillList[_0x46c6a8(0x669)][_0x46c6a8(0xbc8)],Window_SkillList[_0x46c6a8(0x669)][_0x46c6a8(0xbc8)]=function(){const _0x34c81b=_0x46c6a8;return SceneManager[_0x34c81b(0x849)]()?SceneManager['_scene'][_0x34c81b(0x753)]()==='border'?VisuMZ['BattleCore']['Settings'][_0x34c81b(0x5ab)]['SkillItemBorderCols']:VisuMZ[_0x34c81b(0xa74)][_0x34c81b(0x154)]['BattleLayout']['SkillItemStandardCols']:VisuMZ[_0x34c81b(0xa74)][_0x34c81b(0xaf4)][_0x34c81b(0x515)](this);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x350)]=Window_Options[_0x46c6a8(0x669)][_0x46c6a8(0xa7e)],Window_Options[_0x46c6a8(0x669)][_0x46c6a8(0xa7e)]=function(){const _0x303b2e=_0x46c6a8;VisuMZ[_0x303b2e(0xa74)][_0x303b2e(0x350)][_0x303b2e(0x515)](this),this['addAutoBattleCommands'](),this[_0x303b2e(0x9a6)]();},Window_Options[_0x46c6a8(0x669)][_0x46c6a8(0x4b0)]=function(){const _0x2ed066=_0x46c6a8;VisuMZ['BattleCore'][_0x2ed066(0x154)]['AutoBattle'][_0x2ed066(0x93f)]&&(this[_0x2ed066(0x47a)](),this[_0x2ed066(0x9fb)]());},Window_Options['prototype'][_0x46c6a8(0x9a6)]=function(){const _0x30c77b=_0x46c6a8;if(!VisuMZ[_0x30c77b(0xa74)][_0x30c77b(0x154)][_0x30c77b(0xbd3)][_0x30c77b(0x86d)])return;const _0x295092=TextManager[_0x30c77b(0xb3f)],_0x2098a6=_0x30c77b(0xb3f);this[_0x30c77b(0x241)](_0x295092,_0x2098a6);},Window_Options[_0x46c6a8(0x669)][_0x46c6a8(0x47a)]=function(){const _0xabb06b=_0x46c6a8,_0x28405c=TextManager['autoBattleStart'],_0x7bd977=_0xabb06b(0x6a2);this[_0xabb06b(0x241)](_0x28405c,_0x7bd977);},Window_Options[_0x46c6a8(0x669)]['addBattleCoreAutoBattleStyleCommand']=function(){const _0xa53533=_0x46c6a8,_0x2cb11d=TextManager[_0xa53533(0x1ed)],_0x331503=_0xa53533(0x6fe);this[_0xa53533(0x241)](_0x2cb11d,_0x331503);},VisuMZ['BattleCore'][_0x46c6a8(0x5d7)]=Window_Options[_0x46c6a8(0x669)]['statusText'],Window_Options['prototype'][_0x46c6a8(0xaa0)]=function(_0x5291f5){const _0x4bc94d=_0x46c6a8,_0x525482=this[_0x4bc94d(0x8ed)](_0x5291f5);return _0x525482==='autoBattleUseSkills'?this[_0x4bc94d(0xc2a)]():VisuMZ[_0x4bc94d(0xa74)][_0x4bc94d(0x5d7)][_0x4bc94d(0x515)](this,_0x5291f5);},Window_Options[_0x46c6a8(0x669)][_0x46c6a8(0xc2a)]=function(){const _0x11461d=_0x46c6a8,_0x4adc2b=VisuMZ[_0x11461d(0xa74)][_0x11461d(0x154)][_0x11461d(0x70d)],_0xbb074c=this[_0x11461d(0xb3b)]('autoBattleUseSkills');return _0xbb074c?_0x4adc2b[_0x11461d(0xb18)]:_0x4adc2b[_0x11461d(0x48e)];},Window_ShopStatus[_0x46c6a8(0x669)][_0x46c6a8(0x905)]=function(){const _0x4f0dff=_0x46c6a8,_0x28a465=DataManager[_0x4f0dff(0x704)](this[_0x4f0dff(0x8ff)]),_0x547ce9=VisuMZ[_0x4f0dff(0x5a3)][_0x28a465];if(!_0x547ce9)return this['getItemDamageAmountLabelOriginal']();const _0x4e9319=_0x4f0dff(0x724)[_0x4f0dff(0x1ba)](this['_item'][_0x4f0dff(0xaca)][_0x4f0dff(0xaa8)]),_0x673101=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x4f0dff(0x8ff)][_0x4f0dff(0xaca)][_0x4f0dff(0xaa8)]];return _0x547ce9[_0x4e9319][_0x4f0dff(0x1ba)](_0x673101);},Window_ShopStatus[_0x46c6a8(0x669)][_0x46c6a8(0x9be)]=function(){const _0x5135a6=_0x46c6a8,_0x23ab09=DataManager['getDamageStyle'](this['_item']),_0x3449fe=VisuMZ[_0x5135a6(0x5a3)][_0x23ab09];if(!_0x3449fe)return this[_0x5135a6(0x177)]();return _0x3449fe[_0x5135a6(0x12d)][_0x5135a6(0x515)](this);},VisuMZ['BattleCore'][_0x46c6a8(0x1ff)]=Window_PartyCommand[_0x46c6a8(0x669)]['initialize'],Window_PartyCommand[_0x46c6a8(0x669)][_0x46c6a8(0x82c)]=function(_0x1d893a){const _0x595cdd=_0x46c6a8;VisuMZ[_0x595cdd(0xa74)][_0x595cdd(0x1ff)]['call'](this,_0x1d893a),this[_0x595cdd(0x2d0)](_0x1d893a);},Window_PartyCommand[_0x46c6a8(0x669)]['createCommandNameWindow']=function(_0x437f14){const _0x2b2247=_0x46c6a8,_0x4d6541=new Rectangle(0x0,0x0,_0x437f14[_0x2b2247(0x1e1)],_0x437f14[_0x2b2247(0x1fc)]);this[_0x2b2247(0x52c)]=new Window_Base(_0x4d6541),this[_0x2b2247(0x52c)][_0x2b2247(0x1d7)]=0x0,this[_0x2b2247(0xa85)](this[_0x2b2247(0x52c)]),this['updateCommandNameWindow']();},Window_PartyCommand['prototype']['callUpdateHelp']=function(){const _0xaf10b3=_0x46c6a8;Window_Command['prototype']['callUpdateHelp']['call'](this);if(this[_0xaf10b3(0x52c)])this[_0xaf10b3(0x82a)]();},Window_PartyCommand[_0x46c6a8(0x669)][_0x46c6a8(0x82a)]=function(){const _0x505bfe=_0x46c6a8,_0x38e090=this[_0x505bfe(0x52c)];_0x38e090[_0x505bfe(0x15c)][_0x505bfe(0x518)]();const _0x4aeef9=this[_0x505bfe(0x971)](this[_0x505bfe(0x4f0)]());if(_0x4aeef9===_0x505bfe(0xa1c)&&this[_0x505bfe(0x280)]()>0x0){const _0x5a6cfe=this[_0x505bfe(0x7fe)](this['index']());let _0x130f5d=this[_0x505bfe(0x7ca)](this[_0x505bfe(0x4f0)]());_0x130f5d=_0x130f5d[_0x505bfe(0xa75)](/\\I\[(\d+)\]/gi,''),_0x38e090[_0x505bfe(0x74a)](),this[_0x505bfe(0x648)](_0x130f5d,_0x5a6cfe),this[_0x505bfe(0x705)](_0x130f5d,_0x5a6cfe),this[_0x505bfe(0x523)](_0x130f5d,_0x5a6cfe);}},Window_PartyCommand[_0x46c6a8(0x669)]['commandNameWindowDrawBackground']=function(_0x22d550,_0x5d5e30){},Window_PartyCommand[_0x46c6a8(0x669)][_0x46c6a8(0x705)]=function(_0x46c70b,_0x27d6c9){const _0x1bc965=_0x46c6a8,_0x209e21=this[_0x1bc965(0x52c)];_0x209e21[_0x1bc965(0xabb)](_0x46c70b,0x0,_0x27d6c9['y'],_0x209e21[_0x1bc965(0x158)],_0x1bc965(0x2bb));},Window_PartyCommand[_0x46c6a8(0x669)][_0x46c6a8(0x523)]=function(_0x466b10,_0x1ae2fc){const _0x64655e=_0x46c6a8,_0x9ffc5f=this['_commandNameWindow'],_0xaac09a=$gameSystem[_0x64655e(0x3ac)](),_0xe3fc6e=_0x1ae2fc['x']+Math['floor'](_0x1ae2fc['width']/0x2)+_0xaac09a;_0x9ffc5f['x']=_0x9ffc5f[_0x64655e(0x1e1)]/-0x2+_0xe3fc6e,_0x9ffc5f['y']=Math[_0x64655e(0x2f2)](_0x1ae2fc[_0x64655e(0x1fc)]/0x2);},Window_PartyCommand[_0x46c6a8(0x669)][_0x46c6a8(0x749)]=function(){const _0x2b5646=_0x46c6a8;this[_0x2b5646(0x58b)](),this[_0x2b5646(0x486)](),this[_0x2b5646(0xc61)](),this[_0x2b5646(0x6d4)](),this['addOptionsCommand'](),this[_0x2b5646(0xab1)]();},Window_PartyCommand[_0x46c6a8(0x669)]['addFightCommand']=function(){const _0x2ca0c9=_0x46c6a8,_0x345a54=this['commandStyle'](),_0x2414b1=VisuMZ[_0x2ca0c9(0xa74)][_0x2ca0c9(0x154)][_0x2ca0c9(0x821)][_0x2ca0c9(0xbce)],_0x4b615f=_0x345a54===_0x2ca0c9(0x555)?TextManager['fight']:'\x5cI[%1]%2'['format'](_0x2414b1,TextManager['fight']),_0x4a6f7e=this[_0x2ca0c9(0x328)]();this[_0x2ca0c9(0x241)](_0x4b615f,_0x2ca0c9(0x294),_0x4a6f7e);},Window_PartyCommand['prototype'][_0x46c6a8(0x328)]=function(){return!![];},Window_PartyCommand[_0x46c6a8(0x669)][_0x46c6a8(0x486)]=function(){const _0x38789c=_0x46c6a8;if(!this[_0x38789c(0xa82)]())return;const _0x1fe10a=this[_0x38789c(0x5a4)](),_0x497148=VisuMZ['BattleCore'][_0x38789c(0x154)][_0x38789c(0x821)][_0x38789c(0x433)],_0x3428c4=_0x1fe10a==='text'?TextManager[_0x38789c(0x581)]:_0x38789c(0x772)[_0x38789c(0x1ba)](_0x497148,TextManager['autoBattle']),_0x125a25=this[_0x38789c(0x43c)]();this[_0x38789c(0x241)](_0x3428c4,'autoBattle',_0x125a25);},Window_PartyCommand['prototype'][_0x46c6a8(0xa82)]=function(){const _0x32fcd7=_0x46c6a8;return VisuMZ[_0x32fcd7(0xa74)][_0x32fcd7(0x154)][_0x32fcd7(0x821)][_0x32fcd7(0x9e0)];},Window_PartyCommand['prototype'][_0x46c6a8(0x43c)]=function(){return!![];},Window_PartyCommand[_0x46c6a8(0x669)][_0x46c6a8(0xc61)]=function(){},Window_PartyCommand['prototype']['addStatusCommand']=function(){const _0x513a41=_0x46c6a8,_0x4a24a7=VisuMZ['BattleCore'][_0x513a41(0x154)]['PartyCmd'][_0x513a41(0x1ac)]??!![];if(!_0x4a24a7)return;const _0x3f6866=this[_0x513a41(0x5a4)](),_0xae8010=VisuMZ[_0x513a41(0xa74)][_0x513a41(0x154)][_0x513a41(0x305)][_0x513a41(0x932)]??0x57,_0x3bb935=_0x3f6866===_0x513a41(0x555)?TextManager[_0x513a41(0x489)]:_0x513a41(0x772)['format'](_0xae8010,TextManager[_0x513a41(0x489)]),_0x1c8ac6=!![];this[_0x513a41(0x241)](_0x3bb935,'status',_0x1c8ac6);},Window_PartyCommand['prototype'][_0x46c6a8(0xad4)]=function(){const _0x21754e=_0x46c6a8;if(!this[_0x21754e(0x726)]())return;const _0x1b949b=this[_0x21754e(0x5a4)](),_0x7b5901=VisuMZ[_0x21754e(0xa74)]['Settings']['PartyCmd']['CmdIconOptions'],_0x49d8ff=_0x1b949b===_0x21754e(0x555)?TextManager[_0x21754e(0x511)]:_0x21754e(0x772)[_0x21754e(0x1ba)](_0x7b5901,TextManager[_0x21754e(0x511)]),_0x53835e=this['isOptionsCommandEnabled']();this['addCommand'](_0x49d8ff,'options',_0x53835e);},Window_PartyCommand[_0x46c6a8(0x669)]['isOptionsCommandAdded']=function(){const _0x12da10=_0x46c6a8;return VisuMZ[_0x12da10(0xa74)][_0x12da10(0x154)][_0x12da10(0x821)][_0x12da10(0x1b7)];},Window_PartyCommand[_0x46c6a8(0x669)]['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x46c6a8(0x669)][_0x46c6a8(0xab1)]=function(){const _0x115695=_0x46c6a8,_0x22fb31=this[_0x115695(0x5a4)](),_0x5d17d0=VisuMZ[_0x115695(0xa74)][_0x115695(0x154)][_0x115695(0x821)][_0x115695(0xaea)],_0x22d2ac=_0x22fb31===_0x115695(0x555)?TextManager[_0x115695(0x7e8)]:_0x115695(0x772)['format'](_0x5d17d0,TextManager[_0x115695(0x7e8)]),_0x27719d=this[_0x115695(0xc35)]();this[_0x115695(0x241)](_0x22d2ac,'escape',_0x27719d);},Window_PartyCommand[_0x46c6a8(0x669)][_0x46c6a8(0xc35)]=function(){return BattleManager['canEscape']();},Window_PartyCommand[_0x46c6a8(0x669)]['itemTextAlign']=function(){const _0x436506=_0x46c6a8;return VisuMZ[_0x436506(0xa74)][_0x436506(0x154)][_0x436506(0x821)][_0x436506(0x792)];},Window_PartyCommand[_0x46c6a8(0x669)]['drawItem']=function(_0xd56d85){const _0x11cd26=_0x46c6a8,_0x2b7d45=this[_0x11cd26(0x971)](_0xd56d85);if(_0x2b7d45===_0x11cd26(0x863))this[_0x11cd26(0x9f6)](_0xd56d85);else _0x2b7d45==='icon'?this[_0x11cd26(0x46d)](_0xd56d85):Window_Command[_0x11cd26(0x669)][_0x11cd26(0xbfc)][_0x11cd26(0x515)](this,_0xd56d85);},Window_PartyCommand[_0x46c6a8(0x669)][_0x46c6a8(0x5a4)]=function(){const _0x2da18f=_0x46c6a8;return VisuMZ[_0x2da18f(0xa74)]['Settings'][_0x2da18f(0x821)]['CmdStyle'];},Window_PartyCommand['prototype'][_0x46c6a8(0x971)]=function(_0x13a4c2){const _0x1e64b9=_0x46c6a8;if(_0x13a4c2<0x0)return _0x1e64b9(0x555);const _0x4ef390=this[_0x1e64b9(0x5a4)]();if(_0x4ef390!==_0x1e64b9(0x2ce))return _0x4ef390;else{if(this[_0x1e64b9(0x280)]()>0x0){const _0xc9c89d=this[_0x1e64b9(0x7ca)](_0x13a4c2);if(_0xc9c89d['match'](/\\I\[(\d+)\]/i)){const _0x26f833=this[_0x1e64b9(0x7fe)](_0x13a4c2),_0x4712eb=this[_0x1e64b9(0xa0c)](_0xc9c89d)['width'];return _0x4712eb<=_0x26f833[_0x1e64b9(0x1e1)]?'iconText':_0x1e64b9(0xa1c);}}}return _0x1e64b9(0x555);},Window_PartyCommand['prototype'][_0x46c6a8(0x9f6)]=function(_0x20aa24){const _0x293f1f=_0x46c6a8,_0x2a6d4b=this['itemLineRect'](_0x20aa24),_0x13c64c=this[_0x293f1f(0x7ca)](_0x20aa24),_0x2a18c3=this[_0x293f1f(0xa0c)](_0x13c64c)[_0x293f1f(0x1e1)];this[_0x293f1f(0x57b)](this[_0x293f1f(0x43d)](_0x20aa24));const _0x2f1fb5=this[_0x293f1f(0xa65)]();if(_0x2f1fb5===_0x293f1f(0x46f))this[_0x293f1f(0x38c)](_0x13c64c,_0x2a6d4b['x']+_0x2a6d4b[_0x293f1f(0x1e1)]-_0x2a18c3,_0x2a6d4b['y'],_0x2a18c3);else{if(_0x2f1fb5===_0x293f1f(0x2bb)){const _0x1b0539=_0x2a6d4b['x']+Math['floor']((_0x2a6d4b[_0x293f1f(0x1e1)]-_0x2a18c3)/0x2);this[_0x293f1f(0x38c)](_0x13c64c,_0x1b0539,_0x2a6d4b['y'],_0x2a18c3);}else this[_0x293f1f(0x38c)](_0x13c64c,_0x2a6d4b['x'],_0x2a6d4b['y'],_0x2a18c3);}},Window_PartyCommand[_0x46c6a8(0x669)]['drawItemStyleIcon']=function(_0x4fdac3){const _0x3fa060=_0x46c6a8;this[_0x3fa060(0x7ca)](_0x4fdac3)['match'](/\\I\[(\d+)\]/i);const _0x283517=Number(RegExp['$1'])||0x0,_0x491d6d=this[_0x3fa060(0x7fe)](_0x4fdac3),_0x677dba=_0x491d6d['x']+Math['floor']((_0x491d6d['width']-ImageManager[_0x3fa060(0x945)])/0x2),_0x1d4cbb=_0x491d6d['y']+(_0x491d6d[_0x3fa060(0x1fc)]-ImageManager[_0x3fa060(0xa9c)])/0x2;this['drawIcon'](_0x283517,_0x677dba,_0x1d4cbb);},Window_PartyCommand[_0x46c6a8(0x669)][_0x46c6a8(0x9dd)]=function(){},Window_PartyCommand[_0x46c6a8(0x669)][_0x46c6a8(0xbf7)]=function(){const _0x58ac88=_0x46c6a8;Window_Command[_0x58ac88(0x669)][_0x58ac88(0xbf7)]['call'](this);const _0x947b32=this[_0x58ac88(0x753)]();_0x947b32===_0x58ac88(0x9a1)&&this['showHelpWindow']();},Window_PartyCommand[_0x46c6a8(0x669)][_0x46c6a8(0x753)]=function(){const _0x1bd9a6=_0x46c6a8;if(this[_0x1bd9a6(0x2e6)])return this[_0x1bd9a6(0x2e6)];return this['_battleLayoutStyle']=SceneManager[_0x1bd9a6(0x7a7)]['battleLayoutStyle'](),this[_0x1bd9a6(0x2e6)];},Window_PartyCommand['prototype'][_0x46c6a8(0x8e5)]=function(){const _0x2e3d3f=_0x46c6a8,_0x57b7fb=VisuMZ[_0x2e3d3f(0xa74)][_0x2e3d3f(0x154)][_0x2e3d3f(0x821)],_0x5a0265=this['currentSymbol']();switch(_0x5a0265){case _0x2e3d3f(0x294):this['_helpWindow'][_0x2e3d3f(0xb7d)](_0x57b7fb['HelpFight']);break;case'autoBattle':this[_0x2e3d3f(0xbc0)][_0x2e3d3f(0xb7d)](_0x57b7fb[_0x2e3d3f(0xa8f)]);break;case _0x2e3d3f(0x511):this[_0x2e3d3f(0xbc0)][_0x2e3d3f(0xb7d)](_0x57b7fb[_0x2e3d3f(0x6cd)]);break;case _0x2e3d3f(0x7e8):this[_0x2e3d3f(0xbc0)]['setText'](_0x57b7fb[_0x2e3d3f(0xc48)]);break;case _0x2e3d3f(0x489):this['_helpWindow'][_0x2e3d3f(0xb7d)](Window_InBattleStatus[_0x2e3d3f(0x671)][_0x2e3d3f(0xb37)]);break;default:this[_0x2e3d3f(0xbc0)][_0x2e3d3f(0xb7d)]('');break;}},VisuMZ['BattleCore'][_0x46c6a8(0x77e)]=Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x82c)],Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x82c)]=function(_0x349578){const _0x2f95d7=_0x46c6a8;VisuMZ['BattleCore']['Window_ActorCommand_initialize']['call'](this,_0x349578),this[_0x2f95d7(0x2d0)](_0x349578);},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x2d0)]=function(_0x5f4a63){const _0x1902fb=_0x46c6a8,_0x4fad7a=new Rectangle(0x0,0x0,_0x5f4a63[_0x1902fb(0x1e1)],_0x5f4a63[_0x1902fb(0x1fc)]);this[_0x1902fb(0x52c)]=new Window_Base(_0x4fad7a),this[_0x1902fb(0x52c)][_0x1902fb(0x1d7)]=0x0,this[_0x1902fb(0xa85)](this[_0x1902fb(0x52c)]),this[_0x1902fb(0x82a)]();},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x45b)]=function(){const _0x513b50=_0x46c6a8;Window_Command[_0x513b50(0x669)]['callUpdateHelp'][_0x513b50(0x515)](this);if(this['_commandNameWindow'])this['updateCommandNameWindow']();},Window_ActorCommand['prototype'][_0x46c6a8(0x82a)]=function(){const _0x56f591=_0x46c6a8,_0x56fe2b=this[_0x56f591(0x52c)];_0x56fe2b[_0x56f591(0x15c)]['clear']();const _0x4e96f6=this[_0x56f591(0x971)](this['index']());if(_0x4e96f6==='icon'&&this[_0x56f591(0x280)]()>0x0){const _0x4c68eb=this[_0x56f591(0x7fe)](this[_0x56f591(0x4f0)]());let _0x2cd54b=this[_0x56f591(0x7ca)](this[_0x56f591(0x4f0)]());_0x2cd54b=_0x2cd54b['replace'](/\\I\[(\d+)\]/gi,''),_0x56fe2b[_0x56f591(0x74a)](),this[_0x56f591(0x648)](_0x2cd54b,_0x4c68eb),this[_0x56f591(0x705)](_0x2cd54b,_0x4c68eb),this[_0x56f591(0x523)](_0x2cd54b,_0x4c68eb);}},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x648)]=function(_0xd252a4,_0x21e31a){},Window_ActorCommand[_0x46c6a8(0x669)]['commandNameWindowDrawText']=function(_0x202d65,_0x2bd251){const _0x36accb=_0x46c6a8,_0x50f04c=this[_0x36accb(0x52c)];_0x50f04c[_0x36accb(0xabb)](_0x202d65,0x0,_0x2bd251['y'],_0x50f04c[_0x36accb(0x158)],_0x36accb(0x2bb));},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x523)]=function(_0x337045,_0x168faf){const _0x4661b4=_0x46c6a8,_0x261c0e=this[_0x4661b4(0x52c)],_0x5e8983=$gameSystem[_0x4661b4(0x3ac)](),_0x26cafe=_0x168faf['x']+Math[_0x4661b4(0x2f2)](_0x168faf[_0x4661b4(0x1e1)]/0x2)+_0x5e8983;_0x261c0e['x']=_0x261c0e[_0x4661b4(0x1e1)]/-0x2+_0x26cafe,_0x261c0e['y']=Math['floor'](_0x168faf[_0x4661b4(0x1fc)]/0x2);},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x749)]=function(){const _0xe25351=_0x46c6a8;if(!this[_0xe25351(0x715)])return;const _0x587784=this[_0xe25351(0x715)][_0xe25351(0x8e7)]();for(const _0x3335ee of _0x587784){this[_0xe25351(0x7f5)](_0x3335ee[_0xe25351(0x85e)]()[_0xe25351(0xa28)]());}},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x7f5)]=function(_0x1a1fe7){const _0x2d7f05=_0x46c6a8;_0x1a1fe7===_0x2d7f05(0x9e1)&&this[_0x2d7f05(0x89a)]();[_0x2d7f05(0x2e8),'SKILLS']['includes'](_0x1a1fe7)&&this[_0x2d7f05(0x520)]();_0x1a1fe7===_0x2d7f05(0x7a0)&&this[_0x2d7f05(0x9d9)]();_0x1a1fe7===_0x2d7f05(0xad5)&&this[_0x2d7f05(0x836)]();_0x1a1fe7===_0x2d7f05(0x5d9)&&this[_0x2d7f05(0x6d4)]();_0x1a1fe7===_0x2d7f05(0x6a9)&&this['addEscapeCommand']();_0x1a1fe7==='AUTO\x20BATTLE'&&this[_0x2d7f05(0x486)]();if(_0x1a1fe7[_0x2d7f05(0x712)](/STYPE: (\d+)/i)){const _0x32944f=Number(RegExp['$1']);this[_0x2d7f05(0x21e)](_0x32944f);}else{if(_0x1a1fe7[_0x2d7f05(0x712)](/STYPE: (.*)/i)){const _0x4dd49c=DataManager[_0x2d7f05(0x101)](RegExp['$1']);this[_0x2d7f05(0x21e)](_0x4dd49c);}}_0x1a1fe7==='ALL\x20SKILLS'&&this['addSingleSkillCommands']();if(_0x1a1fe7[_0x2d7f05(0x712)](/SKILL: (\d+)/i)){const _0x50865e=Number(RegExp['$1']);this[_0x2d7f05(0x9ca)]($dataSkills[_0x50865e]);}else{if(_0x1a1fe7[_0x2d7f05(0x712)](/SKILL: (.*)/i)){const _0x577dc9=DataManager[_0x2d7f05(0x51a)](RegExp['$1']);this[_0x2d7f05(0x9ca)]($dataSkills[_0x577dc9]);}}_0x1a1fe7==='PARTY'&&Imported['VisuMZ_2_PartySystem']&&this[_0x2d7f05(0x2b2)](),_0x1a1fe7==='TALK'&&Imported[_0x2d7f05(0x15f)]&&this['addBattleCommandTalk'](),[_0x2d7f05(0x2aa),'COMBAT\x20LOG'][_0x2d7f05(0x4a3)](_0x1a1fe7)&&Imported[_0x2d7f05(0x29d)]&&this[_0x2d7f05(0x79e)](),_0x1a1fe7==='WEAPON\x20SWAP'&&Imported[_0x2d7f05(0x325)]&&this[_0x2d7f05(0x4a2)](!![]),_0x1a1fe7===_0x2d7f05(0x966)&&Imported[_0x2d7f05(0x3b1)]&&this['addBattleGridMoveCommand']();},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x89a)]=function(){const _0x58b68a=_0x46c6a8,_0x25a495=$dataSkills[this[_0x58b68a(0x715)][_0x58b68a(0xb16)]()];if(!_0x25a495)return;if(!this['canAddSkillCommand'](_0x25a495))return;const _0x4983ba=this[_0x58b68a(0x5a4)](),_0x452cf9=DataManager[_0x58b68a(0x4d4)](_0x25a495),_0x3d51dd=DataManager[_0x58b68a(0x5a0)](_0x25a495),_0x37bb2b=_0x4983ba===_0x58b68a(0x555)?_0x452cf9:_0x58b68a(0x772)['format'](_0x3d51dd,_0x452cf9);this[_0x58b68a(0x241)](_0x37bb2b,_0x58b68a(0xc28),this['_actor'][_0x58b68a(0x58d)]());},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x9d9)]=function(){const _0xdba811=_0x46c6a8,_0x14367d=$dataSkills[this[_0xdba811(0x715)][_0xdba811(0xb29)]()];if(!_0x14367d)return;if(!this['canAddSkillCommand'](_0x14367d))return;const _0xea19bc=this[_0xdba811(0x5a4)](),_0x579a9c=DataManager['battleCommandName'](_0x14367d),_0x510a7a=DataManager[_0xdba811(0x5a0)](_0x14367d),_0x5810ab=_0xea19bc===_0xdba811(0x555)?_0x579a9c:_0xdba811(0x772)[_0xdba811(0x1ba)](_0x510a7a,_0x579a9c);this['addCommand'](_0x5810ab,'guard',this[_0xdba811(0x715)][_0xdba811(0x400)]());},Window_ActorCommand['prototype']['addItemCommand']=function(){const _0x1ea1ef=_0x46c6a8,_0xfefbd7=this[_0x1ea1ef(0x5a4)](),_0x5a9e0c=VisuMZ[_0x1ea1ef(0xa74)][_0x1ea1ef(0x154)][_0x1ea1ef(0x17a)][_0x1ea1ef(0xb0e)],_0x5d2c0a=_0xfefbd7===_0x1ea1ef(0x555)?TextManager[_0x1ea1ef(0x6e9)]:_0x1ea1ef(0x772)[_0x1ea1ef(0x1ba)](_0x5a9e0c,TextManager[_0x1ea1ef(0x6e9)]),_0x390d23=this[_0x1ea1ef(0xc19)]();this[_0x1ea1ef(0x241)](_0x5d2c0a,'item',_0x390d23);},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0xc19)]=function(){const _0x531ec0=_0x46c6a8;return this[_0x531ec0(0x715)]&&this['_actor']['canUseItemCommand']();},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x520)]=function(){const _0x461f5c=_0x46c6a8,_0x2bb52d=this[_0x461f5c(0x715)][_0x461f5c(0x3e4)]();for(const _0x2eb200 of _0x2bb52d){this['addSkillTypeCommand'](_0x2eb200);}},Window_ActorCommand[_0x46c6a8(0x669)]['addSkillTypeCommand']=function(_0x2e2fcb){const _0x22820b=_0x46c6a8;let _0x658d98=$dataSystem[_0x22820b(0x3e4)][_0x2e2fcb];if(!_0x658d98)return;let _0x142135=_0x658d98;const _0x297931=this[_0x22820b(0x5a4)]();if(_0x297931===_0x22820b(0x555))_0x142135=_0x142135[_0x22820b(0xa75)](/\x1I\[(\d+)\]/gi,''),_0x142135=_0x142135[_0x22820b(0xa75)](/\\I\[(\d+)\]/gi,'');else{if(!_0x658d98[_0x22820b(0x712)](/\\I\[(\d+)\]/i)){const _0x4763ab=Imported[_0x22820b(0xabd)]?VisuMZ[_0x22820b(0x146)][_0x22820b(0x154)][_0x22820b(0x3ea)]:VisuMZ['BattleCore'][_0x22820b(0x154)][_0x22820b(0x17a)],_0x29c6b5=$dataSystem['magicSkills'][_0x22820b(0x4a3)](_0x2e2fcb),_0x55f067=_0x29c6b5?_0x4763ab[_0x22820b(0x75d)]:_0x4763ab[_0x22820b(0x516)];_0x142135='\x5cI[%1]%2'[_0x22820b(0x1ba)](_0x55f067,_0x658d98);}}this[_0x22820b(0x241)](_0x142135,_0x22820b(0x7c2),!![],_0x2e2fcb);},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x8b0)]=function(){const _0x1127bf=_0x46c6a8,_0x177d34=this['_actor'][_0x1127bf(0x3e4)](),_0x3ecc87=this[_0x1127bf(0x715)][_0x1127bf(0x84f)]();for(const _0x146a05 of _0x3ecc87){if(!_0x146a05)continue;if(Imported[_0x1127bf(0xabd)]){if(this[_0x1127bf(0x6d2)](_0x146a05))continue;if(this[_0x1127bf(0x55f)](_0x146a05))continue;}else{if(!_0x177d34[_0x1127bf(0x4a3)](_0x146a05[_0x1127bf(0x1ca)]))continue;}this['addSingleSkillCommand'](_0x146a05);}},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x6d2)]=function(_0x546128){const _0x14a978=_0x46c6a8,_0x25a1be=this[_0x14a978(0x715)][_0x14a978(0x3e4)](),_0x47c57f=_0x25a1be[_0x14a978(0x2ed)](_0x3a5ee2=>DataManager[_0x14a978(0x641)](_0x546128)['includes'](_0x3a5ee2));return _0x47c57f[_0x14a978(0x50d)]<=0x0;},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x55f)]=function(_0x587490){const _0x1153f0=_0x46c6a8;if(Imported['VisuMZ_1_SkillsStatesCore']){if(VisuMZ[_0x1153f0(0x146)]['version']>=1.24){if(this['_actor']){if(!VisuMZ['SkillsStatesCore']['CheckVisibleBattleNotetags'](this[_0x1153f0(0x715)],_0x587490))return!![];if(!VisuMZ[_0x1153f0(0x146)][_0x1153f0(0x87e)](this[_0x1153f0(0x715)],_0x587490))return!![];if(!VisuMZ[_0x1153f0(0x146)][_0x1153f0(0x1c0)](this[_0x1153f0(0x715)],_0x587490))return!![];}}else{if(!Window_SkillList[_0x1153f0(0x669)][_0x1153f0(0x361)][_0x1153f0(0x515)](this,_0x587490))return!![];if(!Window_SkillList['prototype'][_0x1153f0(0x222)][_0x1153f0(0x515)](this,_0x587490))return!![];if(!Window_SkillList[_0x1153f0(0x669)]['checkShowHideSkillNotetags'][_0x1153f0(0x515)](this,_0x587490))return!![];}}return![];},Window_ActorCommand['prototype']['addSingleSkillCommand']=function(_0xa7db21){const _0x225627=_0x46c6a8;if(!_0xa7db21)return;if(!this[_0x225627(0xaa5)](_0xa7db21))return;const _0x30bbbc=this[_0x225627(0x5a4)](),_0x5ecad7=DataManager[_0x225627(0x4d4)](_0xa7db21),_0x24f3ab=DataManager[_0x225627(0x5a0)](_0xa7db21),_0x377529=_0x30bbbc==='text'?_0x5ecad7:_0x225627(0x772)['format'](_0x24f3ab,_0x5ecad7),_0x1dac4c=this['_actor'][_0x225627(0x807)](_0xa7db21);this[_0x225627(0x241)](_0x377529,'singleSkill',_0x1dac4c,_0xa7db21['id']);},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0xaa5)]=function(_0xc42d2){const _0x37bd1f=_0x46c6a8,_0x3703c1=_0xc42d2[_0x37bd1f(0xb03)];if(_0x3703c1[_0x37bd1f(0x712)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x37bd1f(0x715)][_0x37bd1f(0x14a)](_0xc42d2['id']))return![];}if(_0x3703c1['match'](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x37bd1f(0x715)]['hasSkill'](_0xc42d2['id']))return![];}const _0x54de5b=VisuMZ[_0x37bd1f(0xa74)][_0x37bd1f(0x916)](_0xc42d2,_0x37bd1f(0xb82));if(VisuMZ[_0x37bd1f(0xa74)]['JS'][_0x54de5b]){if(!VisuMZ[_0x37bd1f(0xa74)]['JS'][_0x54de5b][_0x37bd1f(0x515)](this,this[_0x37bd1f(0x715)],_0xc42d2))return![];}return VisuMZ['BattleCore'][_0x37bd1f(0x116)](_0xc42d2);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x116)]=function(_0x1613d8){const _0x33dfb3=_0x46c6a8,_0x4f7d17=_0x1613d8[_0x33dfb3(0xb03)];if(_0x4f7d17[_0x33dfb3(0x712)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2e9770=JSON[_0x33dfb3(0x650)]('['+RegExp['$1'][_0x33dfb3(0x712)](/\d+/g)+']');for(const _0x53e6b2 of _0x2e9770){if(!$gameSwitches[_0x33dfb3(0x6ea)](_0x53e6b2))return![];}return!![];}if(_0x4f7d17[_0x33dfb3(0x712)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x62c83b=JSON['parse']('['+RegExp['$1'][_0x33dfb3(0x712)](/\d+/g)+']');for(const _0x730bf4 of _0x62c83b){if(!$gameSwitches[_0x33dfb3(0x6ea)](_0x730bf4))return![];}return!![];}if(_0x4f7d17['match'](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5c6b8c=JSON[_0x33dfb3(0x650)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x10c729 of _0x5c6b8c){if($gameSwitches['value'](_0x10c729))return!![];}return![];}if(_0x4f7d17['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x59cdf6=JSON[_0x33dfb3(0x650)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x374fe0 of _0x59cdf6){if(!$gameSwitches['value'](_0x374fe0))return!![];}return![];}if(_0x4f7d17[_0x33dfb3(0x712)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0xe8a48=JSON['parse']('['+RegExp['$1'][_0x33dfb3(0x712)](/\d+/g)+']');for(const _0x15651f of _0xe8a48){if(!$gameSwitches[_0x33dfb3(0x6ea)](_0x15651f))return!![];}return![];}if(_0x4f7d17['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1c2099=JSON[_0x33dfb3(0x650)]('['+RegExp['$1'][_0x33dfb3(0x712)](/\d+/g)+']');for(const _0x2d2fb1 of _0x1c2099){if($gameSwitches[_0x33dfb3(0x6ea)](_0x2d2fb1))return![];}return!![];}return!![];},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x6d4)]=function(){const _0x115575=_0x46c6a8,_0xc7b61a=this[_0x115575(0x5a4)](),_0xec8f19=VisuMZ['BattleCore']['Settings'][_0x115575(0x305)]['CmdIconStatus']??0x57,_0x102a17=_0xc7b61a===_0x115575(0x555)?TextManager['status']:'\x5cI[%1]%2'[_0x115575(0x1ba)](_0xec8f19,TextManager[_0x115575(0x489)]),_0x2274ed=!![];this['addCommand'](_0x102a17,_0x115575(0x489),_0x2274ed);},Window_ActorCommand[_0x46c6a8(0x669)]['addEscapeCommand']=function(){const _0x15ddd0=_0x46c6a8,_0x1215f3=this[_0x15ddd0(0x5a4)](),_0x4c4037=VisuMZ[_0x15ddd0(0xa74)][_0x15ddd0(0x154)][_0x15ddd0(0x821)]['CmdIconEscape'],_0x25944c=_0x1215f3===_0x15ddd0(0x555)?TextManager['escape']:_0x15ddd0(0x772)[_0x15ddd0(0x1ba)](_0x4c4037,TextManager['escape']),_0x4cff30=this[_0x15ddd0(0xc35)]();this[_0x15ddd0(0x241)](_0x25944c,_0x15ddd0(0x7e8),_0x4cff30);},Window_ActorCommand['prototype'][_0x46c6a8(0xc35)]=function(){const _0x2de0c5=_0x46c6a8;return BattleManager[_0x2de0c5(0xa08)]();},Window_ActorCommand[_0x46c6a8(0x669)]['addAutoBattleCommand']=function(){const _0x228025=_0x46c6a8,_0x28e6ab=this['commandStyle'](),_0x4dd3fc=VisuMZ['BattleCore'][_0x228025(0x154)][_0x228025(0x821)][_0x228025(0x433)],_0x20e4d1=_0x28e6ab==='text'?TextManager[_0x228025(0x581)]:_0x228025(0x772)[_0x228025(0x1ba)](_0x4dd3fc,TextManager[_0x228025(0x581)]),_0x4628fc=this[_0x228025(0x43c)]();this[_0x228025(0x241)](_0x20e4d1,_0x228025(0x581),_0x4628fc);},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x43c)]=function(){return!![];},Window_ActorCommand[_0x46c6a8(0x669)]['itemTextAlign']=function(){const _0x2552c1=_0x46c6a8;return VisuMZ[_0x2552c1(0xa74)][_0x2552c1(0x154)]['ActorCmd'][_0x2552c1(0x792)];},Window_ActorCommand['prototype']['drawItem']=function(_0x3541b7){const _0x54f267=_0x46c6a8,_0x2673c0=this['commandStyleCheck'](_0x3541b7);if(_0x2673c0===_0x54f267(0x863))this[_0x54f267(0x9f6)](_0x3541b7);else _0x2673c0===_0x54f267(0xa1c)?this[_0x54f267(0x46d)](_0x3541b7):Window_Command['prototype'][_0x54f267(0xbfc)][_0x54f267(0x515)](this,_0x3541b7);this[_0x54f267(0x741)](_0x3541b7);},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x5a4)]=function(){const _0x74838d=_0x46c6a8;return VisuMZ[_0x74838d(0xa74)][_0x74838d(0x154)][_0x74838d(0x17a)][_0x74838d(0x25f)];},Window_ActorCommand['prototype'][_0x46c6a8(0x971)]=function(_0x2e7768){const _0x5d4a2=_0x46c6a8;if(_0x2e7768<0x0)return _0x5d4a2(0x555);const _0x477041=this['commandStyle']();if(_0x477041!==_0x5d4a2(0x2ce))return _0x477041;else{if(this[_0x5d4a2(0x280)]()>0x0){const _0x46d3bd=this['commandName'](_0x2e7768);if(_0x46d3bd[_0x5d4a2(0x712)](/\\I\[(\d+)\]/i)){const _0x4ed319=this[_0x5d4a2(0x7fe)](_0x2e7768),_0x196d7f=this[_0x5d4a2(0xa0c)](_0x46d3bd)[_0x5d4a2(0x1e1)];return _0x196d7f<=_0x4ed319[_0x5d4a2(0x1e1)]?_0x5d4a2(0x863):_0x5d4a2(0xa1c);}}}return'text';},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x9f6)]=function(_0x1d3e7a){const _0x3ed340=_0x46c6a8,_0xf62884=this['itemLineRect'](_0x1d3e7a),_0x20ec15=this[_0x3ed340(0x7ca)](_0x1d3e7a),_0x42b8ec=this['textSizeEx'](_0x20ec15)[_0x3ed340(0x1e1)];this[_0x3ed340(0x57b)](this[_0x3ed340(0x43d)](_0x1d3e7a));const _0x2b7967=this[_0x3ed340(0xa65)]();if(_0x2b7967===_0x3ed340(0x46f))this['drawTextEx'](_0x20ec15,_0xf62884['x']+_0xf62884[_0x3ed340(0x1e1)]-_0x42b8ec,_0xf62884['y'],_0x42b8ec);else{if(_0x2b7967==='center'){const _0x49c4e0=_0xf62884['x']+Math[_0x3ed340(0x2f2)]((_0xf62884[_0x3ed340(0x1e1)]-_0x42b8ec)/0x2);this[_0x3ed340(0x38c)](_0x20ec15,_0x49c4e0,_0xf62884['y'],_0x42b8ec);}else this['drawTextEx'](_0x20ec15,_0xf62884['x'],_0xf62884['y'],_0x42b8ec);}},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x46d)]=function(_0x56b476){const _0x4a5da0=_0x46c6a8;this[_0x4a5da0(0x7ca)](_0x56b476)['match'](/\\I\[(\d+)\]/i);const _0x75dd80=Number(RegExp['$1'])||0x0,_0x444342=this[_0x4a5da0(0x7fe)](_0x56b476),_0x3c64bb=_0x444342['x']+Math['floor']((_0x444342[_0x4a5da0(0x1e1)]-ImageManager[_0x4a5da0(0x945)])/0x2),_0x5b4d6e=_0x444342['y']+(_0x444342['height']-ImageManager[_0x4a5da0(0xa9c)])/0x2;this['drawIcon'](_0x75dd80,_0x3c64bb,_0x5b4d6e);},Window_ActorCommand['prototype'][_0x46c6a8(0x741)]=function(_0x350254){const _0xc829cf=_0x46c6a8;if(!(VisuMZ['BattleCore'][_0xc829cf(0x154)][_0xc829cf(0x17a)][_0xc829cf(0x176)]??!![]))return;const _0x28974a=this[_0xc829cf(0x8ed)](_0x350254);if(![_0xc829cf(0xc28),_0xc829cf(0x930),_0xc829cf(0x942)][_0xc829cf(0x4a3)](_0x28974a))return;const _0x151e0d=this[_0xc829cf(0x7fe)](_0x350254);let _0x39d220=null;if(_0x28974a==='attack')_0x39d220=$dataSkills[this[_0xc829cf(0x715)][_0xc829cf(0xb16)]()];else _0x28974a===_0xc829cf(0x930)?_0x39d220=$dataSkills[this[_0xc829cf(0x715)]['guardSkillId']()]:_0x39d220=$dataSkills[this[_0xc829cf(0x1f3)][_0x350254]['ext']];this[_0xc829cf(0x39e)](this[_0xc829cf(0x715)],_0x39d220,_0x151e0d['x'],_0x151e0d['y'],_0x151e0d[_0xc829cf(0x1e1)]);},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x39e)]=function(_0x471d55,_0x185780,_0x28084c,_0x3a7835,_0x3e3cb1){const _0x3dc006=_0x46c6a8;if(!_0x185780)return;Imported[_0x3dc006(0xabd)]?Window_Command['prototype'][_0x3dc006(0x39e)][_0x3dc006(0x515)](this,_0x471d55,_0x185780,_0x28084c,_0x3a7835,_0x3e3cb1):Window_SkillList[_0x3dc006(0x669)][_0x3dc006(0x39e)][_0x3dc006(0x515)](this,_0x185780,_0x28084c,_0x3a7835,_0x3e3cb1);},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x9dd)]=function(){},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0xbf7)]=function(){const _0x573405=_0x46c6a8;Window_Command['prototype'][_0x573405(0xbf7)]['call'](this);const _0x352177=this[_0x573405(0x753)]();_0x352177==='border'&&this['showHelpWindow']();},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x753)]=function(){const _0x402b84=_0x46c6a8;if(this[_0x402b84(0x2e6)])return this[_0x402b84(0x2e6)];return this[_0x402b84(0x2e6)]=SceneManager[_0x402b84(0x7a7)][_0x402b84(0x753)](),this['_battleLayoutStyle'];},VisuMZ[_0x46c6a8(0xa74)]['Window_ActorCommand_setup']=Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x208)],Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x208)]=function(_0x2b8e35){const _0x3d221c=_0x46c6a8,_0x2babde=this['battleLayoutStyle']();if(_0x2b8e35&&['xp',_0x3d221c(0x23e)][_0x3d221c(0x4a3)](_0x2babde))this['resizeWindowXPStyle'](_0x2b8e35);else _0x2b8e35&&[_0x3d221c(0x9a1)][_0x3d221c(0x4a3)](_0x2babde)&&(this['resizeWindowBorderStyle'](_0x2b8e35),this[_0x3d221c(0x4eb)]());VisuMZ[_0x3d221c(0xa74)]['Window_ActorCommand_setup']['call'](this,_0x2b8e35),_0x2b8e35&&$gameTroop['aliveMembers']()[_0x3d221c(0x50d)]>0x0&&_0x2b8e35[_0x3d221c(0x62d)]()&&_0x2b8e35[_0x3d221c(0x62d)]()[_0x3d221c(0x94f)]();},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x9da)]=function(_0xc81801){const _0x4ceae1=_0x46c6a8,_0xef8737=VisuMZ[_0x4ceae1(0xa74)][_0x4ceae1(0x154)][_0x4ceae1(0x5ab)][_0x4ceae1(0x6e8)],_0x5936bb=Math[_0x4ceae1(0xa5e)](Graphics[_0x4ceae1(0xb13)]/0x3),_0x3c381c=Math[_0x4ceae1(0xa5e)](Graphics[_0x4ceae1(0xb13)]/$gameParty[_0x4ceae1(0x198)]()[_0x4ceae1(0x50d)]),_0x2d5577=Math['max'](Math[_0x4ceae1(0x9bd)](_0x5936bb,_0x3c381c),_0xef8737),_0x25e816=this['fittingHeight'](VisuMZ[_0x4ceae1(0xa74)][_0x4ceae1(0x154)][_0x4ceae1(0x5ab)][_0x4ceae1(0x201)]),_0x4f4bbd=Math[_0x4ceae1(0x2f2)]((Graphics['boxWidth']-Graphics[_0x4ceae1(0x1e1)])/0x2),_0x37bd4f=Graphics[_0x4ceae1(0xb13)]-_0x4f4bbd,_0x17a8e4=(Math[_0x4ceae1(0xa5e)](_0x3c381c*_0xc81801['index']())+Math[_0x4ceae1(0xa5e)]((_0x3c381c-_0x2d5577)/0x2))[_0x4ceae1(0xbf6)](_0x4f4bbd,_0x37bd4f-_0x2d5577),_0x3e0b34=Math[_0x4ceae1(0xa5e)](SceneManager[_0x4ceae1(0x7a7)][_0x4ceae1(0x624)]['y']-_0x25e816);this[_0x4ceae1(0x8d8)](_0x17a8e4,_0x3e0b34,_0x2d5577,_0x25e816),this[_0x4ceae1(0xb8d)](),this[_0x4ceae1(0x7d7)](0x1);},Window_ActorCommand[_0x46c6a8(0x669)]['resizeWindowBorderStyle']=function(_0x185747){const _0x640911=_0x46c6a8,_0x42ee25=SceneManager['_scene'][_0x640911(0xa5a)]();this[_0x640911(0x8d8)](_0x42ee25['x'],_0x42ee25['y'],_0x42ee25['width'],_0x42ee25[_0x640911(0x1fc)]),this[_0x640911(0xb8d)](),this[_0x640911(0x7d7)](0x0);},Window_ActorCommand[_0x46c6a8(0x669)]['refreshDimmerBitmap']=function(){const _0x47f5a9=_0x46c6a8;if(this['_dimmerSprite']){const _0x2da18d=this[_0x47f5a9(0x227)][_0x47f5a9(0x64c)],_0x49211f=this[_0x47f5a9(0x1e1)]-0x8,_0x520353=this[_0x47f5a9(0x1fc)],_0x329e68=this[_0x47f5a9(0x180)],_0x5bdef0=ColorManager[_0x47f5a9(0x83f)](),_0x68566b=ColorManager['dimColor2']();this['_dimmerSprite']['x']=0x4,_0x2da18d[_0x47f5a9(0xc5e)](_0x49211f,_0x520353),_0x2da18d[_0x47f5a9(0x326)](0x0,0x0,_0x49211f,_0x329e68,_0x68566b,_0x5bdef0,!![]),_0x2da18d[_0x47f5a9(0x86a)](0x0,_0x329e68,_0x49211f,_0x520353-_0x329e68*0x2,_0x5bdef0),_0x2da18d[_0x47f5a9(0x326)](0x0,_0x520353-_0x329e68,_0x49211f,_0x329e68,_0x5bdef0,_0x68566b,!![]),this['_dimmerSprite']['setFrame'](0x0,0x0,_0x49211f,_0x520353);}},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x8e5)]=function(){const _0x524430=_0x46c6a8;if(!this[_0x524430(0x715)])return;const _0x65c675=VisuMZ[_0x524430(0xa74)][_0x524430(0x154)]['ActorCmd'],_0x14633c=this[_0x524430(0x763)]();switch(_0x14633c){case _0x524430(0xc28):this[_0x524430(0x60c)]($dataSkills[this[_0x524430(0x715)][_0x524430(0xb16)]()]);break;case _0x524430(0x930):this[_0x524430(0x60c)]($dataSkills[this[_0x524430(0x715)][_0x524430(0xb29)]()]);break;case _0x524430(0x7c2):const _0x3830b5=_0x65c675['HelpSkillType'],_0xe04c74=_0x3830b5[_0x524430(0x1ba)]($dataSystem['skillTypes'][this[_0x524430(0x1cb)]()]);this[_0x524430(0xbc0)][_0x524430(0xb7d)](_0xe04c74);break;case'singleSkill':this[_0x524430(0x60c)]($dataSkills[this['currentExt']()]);break;case _0x524430(0x6e9):this[_0x524430(0xbc0)][_0x524430(0xb7d)](_0x65c675['HelpItem']);break;case _0x524430(0x7e8):this[_0x524430(0xbc0)][_0x524430(0xb7d)](_0x65c675['HelpEscape']);break;case'autoBattle':this[_0x524430(0xbc0)][_0x524430(0xb7d)](_0x65c675[_0x524430(0xa8f)]);break;case _0x524430(0x489):this[_0x524430(0xbc0)]['setText'](Window_InBattleStatus[_0x524430(0x671)][_0x524430(0xb37)]);break;default:this[_0x524430(0xbc0)][_0x524430(0xb7d)]('');break;}},Window_ActorCommand['prototype'][_0x46c6a8(0x6df)]=function(){const _0x19f919=_0x46c6a8;this[_0x19f919(0xbff)](0x0);if(this[_0x19f919(0x715)]&&ConfigManager[_0x19f919(0xac2)]){const _0x4e01c0=this[_0x19f919(0x715)][_0x19f919(0x188)]();this[_0x19f919(0x31e)](_0x4e01c0);if(_0x4e01c0===_0x19f919(0x7c2)){const _0x139165=this[_0x19f919(0x715)][_0x19f919(0x513)]();if(_0x139165){const _0x9188b5=this[_0x19f919(0x7d3)](_0x19f919(0x7c2),_0x139165['stypeId']);this[_0x19f919(0x387)](_0x9188b5||0x0);}}else{if(_0x4e01c0===_0x19f919(0x942)){const _0x493ab4=this['_actor'][_0x19f919(0x513)]();if(_0x493ab4){const _0x508dba=this[_0x19f919(0x7d3)](_0x19f919(0x942),_0x493ab4['id']);this[_0x19f919(0x387)](_0x508dba||0x0);}}}}},Window_ActorCommand[_0x46c6a8(0x669)][_0x46c6a8(0x7d3)]=function(_0x30430c,_0x435f83){const _0x465be2=_0x46c6a8;return this[_0x465be2(0x1f3)][_0x465be2(0x506)](_0x58cb9a=>_0x58cb9a[_0x465be2(0x299)]===_0x30430c&&_0x58cb9a[_0x465be2(0x8eb)]===_0x435f83);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x4f4)]=Window_BattleStatus[_0x46c6a8(0x669)]['initialize'],Window_BattleStatus[_0x46c6a8(0x669)]['initialize']=function(_0x213e3a){const _0x3e32a0=_0x46c6a8;VisuMZ['BattleCore'][_0x3e32a0(0x4f4)][_0x3e32a0(0x515)](this,_0x213e3a),this[_0x3e32a0(0xc2b)](),this[_0x3e32a0(0xa40)]();},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x753)]=function(){const _0x35640d=_0x46c6a8;if(this[_0x35640d(0x2e6)])return this['_battleLayoutStyle'];return this[_0x35640d(0x2e6)]=SceneManager[_0x35640d(0x7a7)][_0x35640d(0x753)](),this[_0x35640d(0x2e6)];},Window_BattleStatus['prototype'][_0x46c6a8(0xc2b)]=function(){const _0x490cab=_0x46c6a8;this['frameVisible']=this[_0x490cab(0xab6)]();const _0x676c44=VisuMZ[_0x490cab(0xa74)][_0x490cab(0x154)]['BattleLayout'];_0x676c44[_0x490cab(0x765)]&&(this['opacity']=0x0);},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0xab6)]=function(){const _0x255a33=_0x46c6a8,_0xcf691f=VisuMZ['BattleCore'][_0x255a33(0x154)][_0x255a33(0x5ab)];if(_0xcf691f[_0x255a33(0x426)])return!![];const _0x71c269=this[_0x255a33(0x753)]();switch(_0x71c269){case'list':case _0x255a33(0x9a1):return!![];break;case _0x255a33(0x9bb):case'xp':case _0x255a33(0x23e):default:return![];break;}},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x911)]=function(){const _0x204fe9=_0x46c6a8;return this[_0x204fe9(0xab6)]()?0x0:0xa;},Window_BattleStatus[_0x46c6a8(0x669)]['maxCols']=function(){const _0x1d02ca=_0x46c6a8,_0x3da6e1=this[_0x1d02ca(0x753)]();switch(_0x3da6e1){case _0x1d02ca(0x8b3):return 0x1;break;case'xp':case'portrait':return $gameParty[_0x1d02ca(0x198)]()['length'];break;case _0x1d02ca(0x9bb):default:return $gameParty[_0x1d02ca(0x769)]();break;}},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x272)]=function(){const _0x2ecb91=_0x46c6a8,_0x2ee372=this['battleLayoutStyle']();switch(_0x2ee372){case'list':return Window_StatusBase[_0x2ecb91(0x669)][_0x2ecb91(0x272)][_0x2ecb91(0x515)](this);break;case _0x2ecb91(0x9bb):case'xp':case _0x2ecb91(0x23e):default:return this[_0x2ecb91(0xae8)];break;}},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x395)]=function(){const _0x26832c=_0x46c6a8,_0x5354de=this[_0x26832c(0x753)]();switch(_0x5354de){case _0x26832c(0x8b3):return Window_StatusBase[_0x26832c(0x669)][_0x26832c(0x395)]['call'](this);break;case _0x26832c(0x9bb):case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0xc63)]=function(){const _0x37250a=_0x46c6a8;this[_0x37250a(0xab6)]()?Window_StatusBase[_0x37250a(0x669)][_0x37250a(0xc63)]['call'](this):this[_0x37250a(0x180)]=0x8;},Window_BattleStatus[_0x46c6a8(0x669)]['loadWindowskin']=function(){const _0x26925c=_0x46c6a8,_0x5b883a=VisuMZ['BattleCore'][_0x26925c(0x154)][_0x26925c(0x5ab)];_0x5b883a[_0x26925c(0x426)]?this['windowskin']=ImageManager['loadSystem'](_0x5b883a[_0x26925c(0x426)]):Window_StatusBase[_0x26925c(0x669)][_0x26925c(0x7f0)][_0x26925c(0x515)](this);},Window_BattleStatus['prototype'][_0x46c6a8(0x164)]=function(_0x4c5b00){const _0x5ac509=_0x46c6a8,_0x4daebb=VisuMZ[_0x5ac509(0xa74)]['Settings'][_0x5ac509(0x5ab)];if(_0x4daebb[_0x5ac509(0x9fd)])return;Window_StatusBase[_0x5ac509(0x669)][_0x5ac509(0x164)][_0x5ac509(0x515)](this,_0x4c5b00);},Window_BattleStatus['prototype']['requestRefresh']=function(){const _0xf0bc28=_0x46c6a8;this[_0xf0bc28(0x547)]=!![];},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x50f)]=function(){const _0x23a067=_0x46c6a8;Window_StatusBase[_0x23a067(0x669)][_0x23a067(0x50f)][_0x23a067(0x515)](this),this[_0x23a067(0x4e1)](),this[_0x23a067(0x66c)]();if(this[_0x23a067(0x753)]()==='border')this['updateBorderStyle']();},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x4e1)]=function(){const _0x36b5cd=_0x46c6a8;if($gameTemp[_0x36b5cd(0x3fe)]())this[_0x36b5cd(0x656)](),this[_0x36b5cd(0x547)]=![],$gameTemp[_0x36b5cd(0xa55)]();else this[_0x36b5cd(0x547)]&&(this[_0x36b5cd(0x547)]=![],this[_0x36b5cd(0x233)](),this[_0x36b5cd(0x4d6)]());},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0xab7)]=function(){const _0x3edc4a=_0x46c6a8;Window_StatusBase[_0x3edc4a(0x669)][_0x3edc4a(0xab7)][_0x3edc4a(0x515)](this);if(!$gameSystem['isSideView']())this[_0x3edc4a(0x233)]();},Window_BattleStatus[_0x46c6a8(0x669)]['hide']=function(){const _0x4435d7=_0x46c6a8;if(this[_0x4435d7(0x2cf)]===Window_BattleStatus)return;Window_StatusBase[_0x4435d7(0x669)][_0x4435d7(0x9dd)][_0x4435d7(0x515)](this);},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x21c)]=function(_0x1ba66c){const _0x38346b=_0x46c6a8,_0x2d3fab=this[_0x38346b(0x753)]();switch(_0x2d3fab){case'xp':case _0x38346b(0x23e):break;case _0x38346b(0x9bb):case'list':case _0x38346b(0x9a1):default:return Window_StatusBase[_0x38346b(0x669)][_0x38346b(0x21c)]['call'](this,_0x1ba66c);break;}},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x558)]=Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x311)],Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x311)]=function(_0x13cb7f){const _0x4b81b8=_0x46c6a8,_0x69a2b7=this[_0x4b81b8(0x753)]();switch(_0x69a2b7){case _0x4b81b8(0x8b3):this[_0x4b81b8(0x92b)](_0x13cb7f);break;case'xp':this[_0x4b81b8(0x613)](_0x13cb7f);break;case _0x4b81b8(0x23e):this[_0x4b81b8(0x563)](_0x13cb7f);break;case _0x4b81b8(0x9bb):case'border':default:VisuMZ[_0x4b81b8(0xa74)][_0x4b81b8(0x558)][_0x4b81b8(0x515)](this,_0x13cb7f);break;}},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x1a1)]=function(_0x5a98fb){const _0x9926f0=_0x46c6a8,_0x4ceb11=this[_0x9926f0(0x753)]();if(!$gameSystem[_0x9926f0(0x33c)]())this['centerFrontViewSprite'](_0x5a98fb);switch(_0x4ceb11){case _0x9926f0(0x8b3):this[_0x9926f0(0x5f5)](_0x5a98fb);break;case'xp':case _0x9926f0(0x23e):case'default':case _0x9926f0(0x9a1):default:this[_0x9926f0(0x608)](_0x5a98fb);break;}},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x84b)]=function(){const _0x2314fe=_0x46c6a8,_0x33a2e8=this[_0x2314fe(0x753)]();if(['xp'][_0x2314fe(0x4a3)](_0x33a2e8)&&!$gameSystem['isSideView']()){this[_0x2314fe(0xa95)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x2314fe(0x669)][_0x2314fe(0x84b)]['call'](this);},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x32e)]=function(_0x35d806){const _0x5a74ed=_0x46c6a8,_0x4c1828=this[_0x5a74ed(0x185)](_0x35d806)[_0x5a74ed(0x62d)]();if(!_0x4c1828)return;const _0x35d41e=this[_0x5a74ed(0x753)](),_0x42d3c2=this[_0x5a74ed(0x795)](_0x35d806);let _0x3099ff=Math[_0x5a74ed(0xa5e)](_0x42d3c2['x']+_0x42d3c2[_0x5a74ed(0x1e1)]/0x2)+this['padding'];[_0x5a74ed(0x8b3)][_0x5a74ed(0x4a3)](_0x35d41e)&&(_0x3099ff=_0x42d3c2[_0x5a74ed(0x1e1)]/$gameParty[_0x5a74ed(0x198)]()[_0x5a74ed(0x50d)],_0x3099ff*=_0x35d806,_0x3099ff+=_0x42d3c2[_0x5a74ed(0x1e1)]/$gameParty['battleMembers']()['length']/0x2);let _0x5480e8=Math[_0x5a74ed(0xa5e)](this[_0x5a74ed(0x657)](_0x35d806,_0x4c1828,_0x42d3c2));_0x4c1828[_0x5a74ed(0x6ae)](_0x3099ff,_0x5480e8),this['addChildAt'](_0x4c1828,0x1),_0x4c1828[_0x5a74ed(0xab7)](),this[_0x5a74ed(0x22c)](),this[_0x5a74ed(0x4d6)]();},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x657)]=function(_0x21d6e1,_0x2e652e,_0x3abd55){const _0x8030fc=_0x46c6a8,_0x11628c=VisuMZ[_0x8030fc(0xa74)][_0x8030fc(0x154)][_0x8030fc(0x5ab)],_0x2eb87d=this[_0x8030fc(0x753)]();if(_0x2eb87d==='xp'){const _0x243407=_0x11628c[_0x8030fc(0xbbf)];switch(_0x243407[_0x8030fc(0x4ed)]()[_0x8030fc(0xa28)]()){case _0x8030fc(0x3ff):return _0x3abd55['height']-_0x2e652e[_0x8030fc(0x4de)]['height']/0x4;break;case _0x8030fc(0x2bb):const _0x5837dc=_0x11628c[_0x8030fc(0xa78)];return(_0x3abd55[_0x8030fc(0x1fc)]+(_0x2e652e[_0x8030fc(0x1fc)]||_0x5837dc))/0x2;break;case _0x8030fc(0xc2c):return 0x0;case _0x8030fc(0x106):default:return this[_0x8030fc(0x9b2)](_0x3abd55);break;}}else{if(_0x2eb87d===_0x8030fc(0x23e)){}}return _0x2e652e[_0x8030fc(0x1fc)];},Sprite_Name['prototype']['bitmapHeight']=function(){return 0x24;},Sprite_Name[_0x46c6a8(0x669)][_0x46c6a8(0xa5c)]=function(){const _0x598159=_0x46c6a8,_0x24d8b1=this[_0x598159(0x106)](),_0x2764e9=this['bitmapWidth'](),_0x2e712e=this[_0x598159(0x797)]();this['setupFont'](),this[_0x598159(0x64c)][_0x598159(0x518)](),this[_0x598159(0x64c)][_0x598159(0x8e6)](_0x24d8b1,0x4,0x0,_0x2764e9,_0x2e712e,_0x598159(0x1ef));},Bitmap[_0x46c6a8(0x669)][_0x46c6a8(0x8e6)]=function(_0x559c50,_0x1ef53b,_0x1892b4,_0x14c1ea,_0x1a73e5,_0x469758){const _0x52c431=_0x46c6a8;TextManager[_0x52c431(0x79a)]&&(_0x559c50=TextManager[_0x52c431(0x79a)](_0x559c50));const _0x52759d=this[_0x52c431(0x8f4)],_0x3d3717=_0x52759d[_0x52c431(0x29b)];_0x14c1ea=_0x14c1ea||0xffffffff;let _0x4494e6=_0x1ef53b,_0x3ae616=Math[_0x52c431(0xa5e)](_0x1892b4+0x18/0x2+this[_0x52c431(0x23a)]*0.35);_0x469758===_0x52c431(0x2bb)&&(_0x4494e6+=_0x14c1ea/0x2),_0x469758==='right'&&(_0x4494e6+=_0x14c1ea),_0x52759d[_0x52c431(0x27c)](),_0x52759d['font']=this[_0x52c431(0x9a3)](),_0x52759d[_0x52c431(0x868)]=_0x469758,_0x52759d[_0x52c431(0xc42)]=_0x52c431(0x4ff),_0x52759d['globalAlpha']=0x1,this['_drawTextOutline'](_0x559c50,_0x4494e6,_0x3ae616,_0x14c1ea),_0x52759d['globalAlpha']=_0x3d3717,this[_0x52c431(0xace)](_0x559c50,_0x4494e6,_0x3ae616,_0x14c1ea),_0x52759d[_0x52c431(0x2fd)](),this[_0x52c431(0xb33)]['update']();},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x9b2)]=function(_0x1c1ef5){const _0x1cd5c2=_0x46c6a8;return this[_0x1cd5c2(0x621)](_0x1c1ef5)-this['gaugeLineHeight']();},Window_BattleStatus[_0x46c6a8(0x669)]['drawItemImageListStyle']=function(_0x1a4508){const _0x58d59b=_0x46c6a8;if(!VisuMZ['BattleCore']['Settings']['BattleLayout'][_0x58d59b(0x2d6)])return;const _0x2eb966=this[_0x58d59b(0x185)](_0x1a4508),_0x4f33e6=this[_0x58d59b(0x795)](_0x1a4508);_0x4f33e6[_0x58d59b(0x1e1)]=ImageManager[_0x58d59b(0x733)],_0x4f33e6['height']-=0x2,this[_0x58d59b(0x4f1)](_0x2eb966,_0x4f33e6['x']+0x1,_0x4f33e6['y']+0x1,_0x4f33e6[_0x58d59b(0x1e1)],_0x4f33e6[_0x58d59b(0x1fc)]);},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x5f5)]=function(_0x860605){const _0x90daa3=_0x46c6a8,_0x345207=VisuMZ[_0x90daa3(0xa74)][_0x90daa3(0x154)][_0x90daa3(0x5ab)],_0xb63cef=$dataSystem[_0x90daa3(0xac6)]?0x4:0x3,_0x105a3d=_0xb63cef*0x80+(_0xb63cef-0x1)*0x8+0x4,_0x8ea351=this[_0x90daa3(0x185)](_0x860605),_0x2a48e2=this[_0x90daa3(0x795)](_0x860605);let _0x5842a8=_0x2a48e2['x']+this[_0x90daa3(0x180)];_0x345207[_0x90daa3(0x2d6)]?_0x5842a8=_0x2a48e2['x']+ImageManager[_0x90daa3(0x733)]+0x8:_0x5842a8+=ImageManager[_0x90daa3(0x945)];const _0xa0c19c=Math[_0x90daa3(0xa5e)](Math[_0x90daa3(0x9bd)](_0x2a48e2['x']+_0x2a48e2[_0x90daa3(0x1e1)]-_0x105a3d,_0x5842a8)),_0x328193=Math[_0x90daa3(0xa5e)](_0x2a48e2['y']+(_0x2a48e2[_0x90daa3(0x1fc)]-Sprite_Name['prototype'][_0x90daa3(0x797)]())/0x2),_0x497fcd=Math[_0x90daa3(0xa5e)](_0xa0c19c-ImageManager[_0x90daa3(0x945)]/0x2-0x4),_0x38ac7e=Math[_0x90daa3(0xa5e)](_0x2a48e2['y']+(_0x2a48e2[_0x90daa3(0x1fc)]-ImageManager['iconHeight'])/0x2+ImageManager[_0x90daa3(0xa9c)]/0x2);let _0x48d85c=_0xa0c19c+0x88;const _0xb96dc1=_0x328193;this['placeTimeGauge'](_0x8ea351,_0xa0c19c-0x4+(_0x345207[_0x90daa3(0xada)]||0x0),_0x328193+(_0x345207[_0x90daa3(0xaef)]||0x0)),this[_0x90daa3(0x1f5)](_0x8ea351,_0xa0c19c+(_0x345207[_0x90daa3(0x944)]||0x0),_0x328193+(_0x345207[_0x90daa3(0x6b7)]||0x0)),this[_0x90daa3(0xa68)](_0x8ea351,_0x497fcd+(_0x345207['StateIconOffsetX']||0x0),_0x38ac7e+(_0x345207[_0x90daa3(0x12a)]||0x0)),this[_0x90daa3(0x545)](_0x8ea351,'hp',_0x48d85c+0x88*0x0+(_0x345207[_0x90daa3(0x26c)]||0x0),_0xb96dc1+(_0x345207[_0x90daa3(0x9d0)]||0x0)),this[_0x90daa3(0x545)](_0x8ea351,'mp',_0x48d85c+0x88*0x1+(_0x345207['MpGaugeOffsetX']||0x0),_0xb96dc1+(_0x345207[_0x90daa3(0xa0e)]||0x0)),$dataSystem[_0x90daa3(0xac6)]&&this[_0x90daa3(0x545)](_0x8ea351,'tp',_0x48d85c+0x88*0x2+(_0x345207[_0x90daa3(0x250)]||0x0),_0xb96dc1+(_0x345207['TpGaugeOffsetY']||0x0));},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x613)]=function(_0x205684){const _0x21ffd9=_0x46c6a8;if(!$gameSystem[_0x21ffd9(0x33c)]())return;VisuMZ['BattleCore'][_0x21ffd9(0x558)][_0x21ffd9(0x515)](this,_0x205684);},Window_BattleStatus[_0x46c6a8(0x669)]['drawItemStatusXPStyle']=function(_0x41f0a7){const _0x501772=_0x46c6a8,_0x561e1f=VisuMZ[_0x501772(0xa74)][_0x501772(0x154)][_0x501772(0x5ab)],_0x2650ff=this[_0x501772(0x185)](_0x41f0a7),_0x664c3f=this[_0x501772(0x795)](_0x41f0a7),_0x576edb=Math[_0x501772(0xa5e)](_0x664c3f['x']+(_0x664c3f[_0x501772(0x1e1)]-0x80)/0x2),_0x1d19f6=this[_0x501772(0x9b2)](_0x664c3f);let _0x180680=_0x576edb-ImageManager[_0x501772(0x945)]/0x2-0x4,_0x3acbb3=_0x1d19f6+ImageManager[_0x501772(0xa9c)]/0x2;_0x180680-ImageManager[_0x501772(0x945)]/0x2<_0x664c3f['x']&&(_0x180680=_0x576edb+ImageManager['iconWidth']/0x2-0x4,_0x3acbb3=_0x1d19f6-ImageManager['iconHeight']/0x2);const _0x55a632=_0x576edb,_0x3ee00d=this['basicGaugesY'](_0x664c3f);this[_0x501772(0x4ae)](_0x2650ff,_0x576edb+(_0x561e1f[_0x501772(0xada)]||0x0),_0x1d19f6+(_0x561e1f[_0x501772(0xaef)]||0x0)),this[_0x501772(0x1f5)](_0x2650ff,_0x576edb+(_0x561e1f[_0x501772(0x944)]||0x0),_0x1d19f6+(_0x561e1f[_0x501772(0x6b7)]||0x0)),this[_0x501772(0xa68)](_0x2650ff,_0x180680+(_0x561e1f[_0x501772(0x4f9)]||0x0),_0x3acbb3+(_0x561e1f[_0x501772(0x12a)]||0x0)),this[_0x501772(0x545)](_0x2650ff,'hp',_0x55a632+(_0x561e1f[_0x501772(0x26c)]||0x0),_0x3ee00d+(_0x561e1f['HpGaugeOffsetY']||0x0)),this[_0x501772(0x545)](_0x2650ff,'mp',_0x55a632+(_0x561e1f[_0x501772(0x3bb)]||0x0),_0x3ee00d+this[_0x501772(0xb87)]()+(_0x561e1f['MpGaugeOffsetY']||0x0)),$dataSystem[_0x501772(0xac6)]&&this[_0x501772(0x545)](_0x2650ff,'tp',_0x55a632+(_0x561e1f['TpGaugeOffsetX']||0x0),_0x3ee00d+this[_0x501772(0xb87)]()*0x2+(_0x561e1f[_0x501772(0x3c0)]||0x0));},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0xb66)]=function(_0x6646bd){const _0xfff850=_0x46c6a8;if(!VisuMZ['BattleCore'][_0xfff850(0x154)][_0xfff850(0x5ab)][_0xfff850(0x3ce)])return![];if(_0x6646bd[_0xfff850(0x9fe)]())return!![];return Imported[_0xfff850(0xc32)]&&_0x6646bd[_0xfff850(0x65d)]();},Game_Actor['prototype']['getBattlePortraitOffsetX']=function(){const _0x35cc19=_0x46c6a8;if(this[_0x35cc19(0x185)]()[_0x35cc19(0xb03)][_0x35cc19(0x712)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x35cc19(0xb03)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor['prototype'][_0x46c6a8(0x583)]=function(){const _0xf60f25=_0x46c6a8;if(this['actor']()[_0xf60f25(0xb03)][_0xf60f25(0x712)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0xf60f25(0x185)]()['note'][_0xf60f25(0x712)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x563)]=function(_0x24bbb9){const _0x304a83=_0x46c6a8,_0x286f58=this[_0x304a83(0x185)](_0x24bbb9);if(this['showPortraits'](_0x286f58)){const _0x101cdc='actor%1-portrait'[_0x304a83(0x1ba)](_0x286f58['actorId']()),_0x488ee4=this[_0x304a83(0x258)](_0x101cdc,Sprite),_0x423f6d=_0x286f58[_0x304a83(0xa8e)]();_0x423f6d!==''?_0x488ee4['bitmap']=ImageManager['loadPicture'](_0x423f6d):_0x488ee4[_0x304a83(0x64c)]=ImageManager[_0x304a83(0x286)];const _0x3f53e1=this[_0x304a83(0x795)](_0x24bbb9);_0x488ee4[_0x304a83(0x2da)]['x']=0.5,_0x488ee4[_0x304a83(0x2da)]['y']=0x1;let _0xc42a8c=Math['round'](_0x3f53e1['x']+_0x3f53e1[_0x304a83(0x1e1)]/0x2)+this[_0x304a83(0x180)];_0xc42a8c+=_0x286f58[_0x304a83(0x619)]();let _0x37d359=Math[_0x304a83(0xa5e)](this[_0x304a83(0x1fc)]);_0x37d359+=_0x286f58['getBattlePortraitOffsetY'](),_0x488ee4['move'](_0xc42a8c,_0x37d359);const _0x2a9902=VisuMZ[_0x304a83(0xa74)]['Settings']['BattleLayout'][_0x304a83(0x7b2)];_0x488ee4[_0x304a83(0x918)]['x']=_0x2a9902,_0x488ee4[_0x304a83(0x918)]['y']=_0x2a9902,_0x488ee4[_0x304a83(0xab7)]();}else{const _0x7fa49c=this[_0x304a83(0xad3)](_0x24bbb9);this[_0x304a83(0x4f1)](_0x286f58,_0x7fa49c['x'],_0x7fa49c['y'],_0x7fa49c[_0x304a83(0x1e1)],_0x7fa49c[_0x304a83(0x1fc)]);}},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x258)]=function(_0x188277,_0x75d80a){const _0x3236d4=_0x46c6a8,_0x31c513=this[_0x3236d4(0x91a)];if(_0x31c513[_0x188277])return _0x31c513[_0x188277];else{const _0x4732c6=new _0x75d80a();return _0x31c513[_0x188277]=_0x4732c6,this['addChildToBack'](_0x4732c6),this[_0x3236d4(0x95d)](this[_0x3236d4(0x6aa)]),_0x4732c6;}},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x831)]=function(){const _0xbf4b45=_0x46c6a8;this[_0xbf4b45(0xbcf)](),this[_0xbf4b45(0xbbb)](),Window_StatusBase['prototype'][_0xbf4b45(0x831)]['call'](this),this[_0xbf4b45(0x7f8)]();},Window_BattleStatus['prototype']['_createCursorArea']=function(){const _0x5068ed=_0x46c6a8;this[_0x5068ed(0x6aa)]=new Sprite(),this[_0x5068ed(0x6aa)]['filters']=[new PIXI[(_0x5068ed(0x1ce))][(_0x5068ed(0x9ac))]()],this[_0x5068ed(0x6aa)][_0x5068ed(0x2ec)]=new Rectangle(),this[_0x5068ed(0x6aa)][_0x5068ed(0x8d8)](this[_0x5068ed(0x94e)],this[_0x5068ed(0x94e)]),this[_0x5068ed(0xa85)](this[_0x5068ed(0x6aa)]);},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0xbbb)]=function(){const _0x1dec33=_0x46c6a8;this[_0x1dec33(0x504)]=new Sprite(),this[_0x1dec33(0xa85)](this[_0x1dec33(0x504)]);},Window_BattleStatus['prototype']['updateEffectsContainer']=function(){const _0x3b8113=_0x46c6a8;this[_0x3b8113(0x504)]&&this[_0x3b8113(0xa85)](this[_0x3b8113(0x504)]);},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x7f8)]=function(){const _0xaaa259=_0x46c6a8;this[_0xaaa259(0x60f)]=new Sprite(),this[_0xaaa259(0xa85)](this[_0xaaa259(0x60f)]);},Window_BattleStatus['prototype'][_0x46c6a8(0xb23)]=function(){const _0x593008=_0x46c6a8;this[_0x593008(0x43a)]=new Sprite();for(let _0x31c89e=0x0;_0x31c89e<0x9;_0x31c89e++){this[_0x593008(0x43a)][_0x593008(0xa85)](new Sprite());}this[_0x593008(0x6aa)][_0x593008(0xa85)](this[_0x593008(0x43a)]);},Window_BattleStatus['prototype']['_updateClientArea']=function(){const _0x584989=_0x46c6a8;Window_StatusBase[_0x584989(0x669)][_0x584989(0x2fb)][_0x584989(0x515)](this),this[_0x584989(0x4c1)]();},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x4c1)]=function(){const _0x3e22eb=_0x46c6a8,_0x427a5e=this[_0x3e22eb(0x94e)];this[_0x3e22eb(0x6aa)]['move'](_0x427a5e,_0x427a5e),this[_0x3e22eb(0x6aa)]['x']=_0x427a5e-this[_0x3e22eb(0xbc5)]['x'],this[_0x3e22eb(0x6aa)]['y']=_0x427a5e-this['origin']['y'],this[_0x3e22eb(0x158)]>0x0&&this[_0x3e22eb(0xae8)]>0x0?this[_0x3e22eb(0x6aa)]['visible']=this[_0x3e22eb(0x34e)]():this[_0x3e22eb(0x6aa)][_0x3e22eb(0x6cb)]=![];},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x113)]=function(){const _0x307a3a=_0x46c6a8;Window_StatusBase[_0x307a3a(0x669)]['_updateFilterArea'][_0x307a3a(0x515)](this),this[_0x307a3a(0x676)]();},Window_BattleStatus['prototype']['_updateCursorFilterArea']=function(){const _0x4647c0=_0x46c6a8,_0x24f11a=this[_0x4647c0(0x6aa)]['worldTransform'][_0x4647c0(0x89e)](new Point(0x0,0x0)),_0x7347d8=this[_0x4647c0(0x6aa)][_0x4647c0(0x2ec)];_0x7347d8['x']=_0x24f11a['x']+this[_0x4647c0(0xbc5)]['x'],_0x7347d8['y']=_0x24f11a['y']+this[_0x4647c0(0xbc5)]['y'],_0x7347d8[_0x4647c0(0x1e1)]=this[_0x4647c0(0x158)],_0x7347d8[_0x4647c0(0x1fc)]=this[_0x4647c0(0xae8)];},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0xa31)]=function(_0x41b200){const _0x150f39=_0x46c6a8;if(this[_0x150f39(0x753)]()!=='portrait')return;this[_0x150f39(0x563)](_0x41b200[_0x150f39(0x4f0)]());},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x274)]=function(_0x37bb7f,_0x221e7b){const _0x576376=_0x46c6a8;if(!this[_0x576376(0x60f)])return;if(!_0x37bb7f)return;if(!_0x221e7b)return;const _0x211bd6=this[_0x576376(0x795)](_0x221e7b['index']());_0x211bd6['x']+=_0x211bd6[_0x576376(0x1e1)]/0x2+this[_0x576376(0x180)],_0x37bb7f['x']=_0x211bd6['x'],_0x37bb7f['y']=_0x211bd6['y'],this[_0x576376(0x60f)][_0x576376(0xa85)](_0x37bb7f);},Window_BattleStatus[_0x46c6a8(0x669)]['removeDamageSprite']=function(_0x400f11){const _0x3205b4=_0x46c6a8;if(!this[_0x3205b4(0x60f)])return;if(!_0x400f11)return;this[_0x3205b4(0x60f)][_0x3205b4(0x806)](_0x400f11);},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x5d5)]=function(){const _0x100da1=_0x46c6a8;if(!this[_0x100da1(0x3e3)]())return;if(!this[_0x100da1(0x248)])this[_0x100da1(0x130)]();this['prepareBorderActor'](),this[_0x100da1(0x701)]();},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x3e3)]=function(){const _0x39e167=_0x46c6a8;if(this[_0x39e167(0x2cf)]!==Window_BattleStatus)return![];if(!SceneManager['isSceneBattle']())return![];return VisuMZ['BattleCore'][_0x39e167(0x154)]['BattleLayout'][_0x39e167(0xb55)];},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x130)]=function(){const _0x59963b=_0x46c6a8;this['_borderPortraitSprite']=new Sprite();const _0x4b8b16=SceneManager['_scene'],_0x5c2fa4=_0x4b8b16[_0x59963b(0x615)][_0x59963b(0x3bd)](_0x4b8b16[_0x59963b(0xc65)]);_0x4b8b16['addChildAt'](this[_0x59963b(0x248)],_0x5c2fa4),this[_0x59963b(0x248)]['anchor']['x']=0.5,this[_0x59963b(0x248)][_0x59963b(0x2da)]['y']=0x1;const _0x16a32e=VisuMZ['BattleCore'][_0x59963b(0x154)][_0x59963b(0x5ab)][_0x59963b(0x1bd)];this['_borderPortraitSprite']['scale']['x']=_0x16a32e,this['_borderPortraitSprite'][_0x59963b(0x918)]['y']=_0x16a32e,this[_0x59963b(0x248)]['y']=this['y']+this[_0x59963b(0x1fc)],this['_borderPortraitDuration']=0x0;},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x1a5)]=function(){const _0x1be561=_0x46c6a8;return BattleManager[_0x1be561(0x653)]();},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x19c)]=function(){const _0x116292=_0x46c6a8;this['_borderPortraitSprite'][_0x116292(0x6cb)]=this[_0x116292(0x1a5)]();const _0x2d4aaf=BattleManager[_0x116292(0x185)](),_0x5302e7=_0x2d4aaf?_0x2d4aaf['getBattlePortraitFilename']()||'':'';if(_0x2d4aaf===this[_0x116292(0x248)][_0x116292(0x185)]&&_0x5302e7===this[_0x116292(0x248)][_0x116292(0x78d)])return;this['_borderPortraitSprite']['actor']=_0x2d4aaf||this[_0x116292(0x248)][_0x116292(0x185)],this[_0x116292(0x248)]['lastFilename']=_0x5302e7;if(!_0x2d4aaf)return;else{if(_0x5302e7===''){this[_0x116292(0x248)]['bitmap']=ImageManager[_0x116292(0x286)],this[_0x116292(0x248)][_0x116292(0x78d)]='';return;}else{const _0xbae289=ImageManager[_0x116292(0x892)](_0x5302e7);this[_0x116292(0x248)][_0x116292(0x1d7)]=0x0,_0xbae289[_0x116292(0xb7c)](this['processBorderActor'][_0x116292(0x5fa)](this,_0xbae289));}}},Window_BattleStatus[_0x46c6a8(0x669)]['processBorderActor']=function(_0x89493a){const _0x3a92b0=_0x46c6a8;this[_0x3a92b0(0xae7)]=0x14,this['_borderPortraitSprite'][_0x3a92b0(0x64c)]=_0x89493a;SceneManager['_scene'][_0x3a92b0(0x5e4)]()?(this[_0x3a92b0(0x248)]['x']=0x0,this['_borderPortraitTargetX']=Math[_0x3a92b0(0x182)](_0x89493a[_0x3a92b0(0x1e1)]/0x2)):(this[_0x3a92b0(0x248)]['x']=this[_0x3a92b0(0x1e1)],this[_0x3a92b0(0x7ee)]=this[_0x3a92b0(0x1e1)]*0x3/0x4);this[_0x3a92b0(0x248)]['opacity']=0x0,this[_0x3a92b0(0x248)]['y']=this['y']+this['height'];const _0x113045=BattleManager['actor']();_0x113045&&(this[_0x3a92b0(0x7ee)]+=_0x113045['getBattlePortraitOffsetX'](),this[_0x3a92b0(0x248)]['y']+=_0x113045[_0x3a92b0(0x583)]());},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x701)]=function(){const _0x35364d=_0x46c6a8;if(this['_borderPortraitDuration']>0x0){const _0x143e5c=this[_0x35364d(0xae7)],_0x43cb82=this[_0x35364d(0x248)];_0x43cb82['x']=(_0x43cb82['x']*(_0x143e5c-0x1)+this['_borderPortraitTargetX'])/_0x143e5c,_0x43cb82[_0x35364d(0x1d7)]=(_0x43cb82[_0x35364d(0x1d7)]*(_0x143e5c-0x1)+0xff)/_0x143e5c,this[_0x35364d(0xae7)]--;}},Window_BattleStatus[_0x46c6a8(0x669)]['updateEffectContainers']=function(){const _0xeb7ea8=_0x46c6a8;return;this[_0xeb7ea8(0x504)]&&(this['_effectsContainer']['x']=this['x'],this[_0xeb7ea8(0x504)]['y']=this['y']),this['_damageContainer']&&(this[_0xeb7ea8(0x60f)]['x']=this['x'],this['_damageContainer']['y']=this['y']);},Window_BattleStatus['prototype'][_0x46c6a8(0xa40)]=function(){const _0x5655ab=_0x46c6a8,_0x5b8a1a=VisuMZ[_0x5655ab(0xa74)][_0x5655ab(0x154)][_0x5655ab(0x5ab)];if(_0x5b8a1a[_0x5655ab(0x9fc)]){const _0x4e6e8f=new Sprite();_0x4e6e8f[_0x5655ab(0x64c)]=ImageManager['loadSystem'](_0x5b8a1a['StatusWindowAttachmentBack']),_0x4e6e8f['x']=_0x5b8a1a[_0x5655ab(0x693)]||0x0,_0x4e6e8f['y']=_0x5b8a1a[_0x5655ab(0x850)]||0x0,this[_0x5655ab(0x95d)](_0x4e6e8f),this[_0x5655ab(0x4fa)]=_0x4e6e8f;}if(_0x5b8a1a[_0x5655ab(0x631)]){const _0x2396b9=new Sprite();_0x2396b9['bitmap']=ImageManager[_0x5655ab(0xaec)](_0x5b8a1a[_0x5655ab(0x631)]),_0x2396b9['x']=_0x5b8a1a[_0x5655ab(0xa20)]||0x0,_0x2396b9['y']=_0x5b8a1a[_0x5655ab(0x822)]||0x0,this[_0x5655ab(0xa85)](_0x2396b9),this['_frontAttachmentSprite']=_0x2396b9;}},Window_BattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x4d6)]=function(){const _0x29c70d=_0x46c6a8;this[_0x29c70d(0x90c)]&&this[_0x29c70d(0xa85)](this[_0x29c70d(0x90c)]),this[_0x29c70d(0x4fa)]&&this[_0x29c70d(0x95d)](this['_backAttachmentSprite']);},Window_BattleActor[_0x46c6a8(0x669)]['isCurrentItemEnabled']=function(){const _0x2df2bd=_0x46c6a8;return this[_0x2df2bd(0x423)]();},Window_BattleActor[_0x46c6a8(0x669)][_0x46c6a8(0x423)]=function(){const _0x17b15f=_0x46c6a8,_0x1362a9=BattleManager[_0x17b15f(0x819)]();if(!_0x1362a9)return!![];if(!_0x1362a9[_0x17b15f(0x6e9)]())return!![];const _0x1b7023=this[_0x17b15f(0x185)](this['index']()),_0x25ad75=_0x1362a9[_0x17b15f(0x6e9)]()[_0x17b15f(0xb03)];if(_0x1362a9[_0x17b15f(0xb2b)]()){if(_0x1b7023===BattleManager[_0x17b15f(0x185)]())return![];}if(_0x1362a9[_0x17b15f(0x839)]()){if(!_0x1b7023[_0x17b15f(0xa10)]())return![];}if(_0x1362a9[_0x17b15f(0x8fa)]()){if(!_0x1b7023[_0x17b15f(0x3d5)]())return![];}return!![];},Window_BattleActor['prototype'][_0x46c6a8(0x432)]=function(_0x3c5ba9){const _0x27dd72=_0x46c6a8;this[_0x27dd72(0x484)]=_0x3c5ba9;},VisuMZ['BattleCore'][_0x46c6a8(0x894)]=Window_BattleActor[_0x46c6a8(0x669)]['processTouch'],Window_BattleActor['prototype'][_0x46c6a8(0x8fc)]=function(){const _0x74fd69=_0x46c6a8;Window_BattleStatus[_0x74fd69(0x669)][_0x74fd69(0x8fc)][_0x74fd69(0x515)](this),this[_0x74fd69(0x484)]?this[_0x74fd69(0x229)]():VisuMZ[_0x74fd69(0xa74)][_0x74fd69(0x894)]['call'](this);},Window_BattleActor[_0x46c6a8(0x669)][_0x46c6a8(0x229)]=function(){const _0x48a705=_0x46c6a8,_0x4c81c6=SceneManager[_0x48a705(0x7a7)][_0x48a705(0x44f)];if(!_0x4c81c6)return;this[_0x48a705(0xc49)]=![];const _0x5c3b74=this[_0x48a705(0x16a)]();if(_0x5c3b74>=0x0){this[_0x48a705(0x387)](_0x5c3b74);if(TouchInput[_0x48a705(0xc1e)]()){const _0xf378f7=$gameParty['members']()[_0x5c3b74],_0x349893=_0x4c81c6[_0x48a705(0x97b)]['indexOf'](_0xf378f7);_0x349893>=0x0&&(_0x4c81c6[_0x48a705(0x387)](_0x349893),_0x4c81c6[_0x48a705(0x4fe)]());}}},Window_BattleActor['prototype'][_0x46c6a8(0x139)]=function(){const _0x83bcd1=_0x46c6a8;this['_enemyWindowMode']&&(this[_0x83bcd1(0x6ac)]++,this[_0x83bcd1(0x998)]=!![]);const _0x2554cf=Window_BattleStatus[_0x83bcd1(0x669)][_0x83bcd1(0x139)][_0x83bcd1(0x515)](this);return this[_0x83bcd1(0x484)]&&(this[_0x83bcd1(0x998)]=![]),_0x2554cf;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x5c4)]=Window_BattleActor[_0x46c6a8(0x669)]['show'],Window_BattleActor[_0x46c6a8(0x669)][_0x46c6a8(0xab7)]=function(){const _0x397ab9=_0x46c6a8;VisuMZ[_0x397ab9(0xa74)]['Window_BattleActor_show'][_0x397ab9(0x515)](this);const _0x51bcc9=BattleManager[_0x397ab9(0x819)]();if(_0x51bcc9){const _0x16f952=$gameParty[_0x397ab9(0xa1f)]();_0x51bcc9['canSingleOrMultipleSelect']()&&_0x16f952[_0x397ab9(0x50d)]>0x1&&this[_0x397ab9(0x226)](_0x397ab9(0x9b7),this[_0x397ab9(0x117)]['bind'](this));}},VisuMZ['BattleCore'][_0x46c6a8(0x614)]=Window_BattleActor['prototype'][_0x46c6a8(0x9dd)],Window_BattleActor[_0x46c6a8(0x669)][_0x46c6a8(0x9dd)]=function(){const _0x2cc8aa=_0x46c6a8;VisuMZ[_0x2cc8aa(0xa74)][_0x2cc8aa(0x614)][_0x2cc8aa(0x515)](this),delete this['_handlers'][_0x2cc8aa(0x869)],delete this['_handlers'][_0x2cc8aa(0x9b7)];},Window_BattleActor[_0x46c6a8(0x669)]['selectAllActors']=function(){const _0x491878=_0x46c6a8,_0x36299b=BattleManager[_0x491878(0x819)]();if(_0x36299b)_0x36299b[_0x491878(0x372)](_0x491878(0x560));this['processOk']();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xb47)]=Window_BattleEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x82c)],Window_BattleEnemy['prototype'][_0x46c6a8(0x82c)]=function(_0x548a95){const _0x49bfc8=_0x46c6a8;this['_lastEnemy']=null,VisuMZ[_0x49bfc8(0xa74)]['Window_BattleEnemy_initialize'][_0x49bfc8(0x515)](this,_0x548a95);if(Imported[_0x49bfc8(0xbaa)]){if(VisuMZ[_0x49bfc8(0xbf1)]['version']<1.12){let _0x2827f3='';_0x2827f3+='VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20',_0x2827f3+=_0x49bfc8(0xafd),_0x2827f3+=_0x49bfc8(0xb41),alert(_0x2827f3),SceneManager[_0x49bfc8(0x761)]();}}},Window_BattleEnemy[_0x46c6a8(0x669)][_0x46c6a8(0xbc8)]=function(){return this['maxItems']();},VisuMZ[_0x46c6a8(0xa74)]['Window_BattleEnemy_show']=Window_BattleEnemy[_0x46c6a8(0x669)][_0x46c6a8(0xab7)],Window_BattleEnemy[_0x46c6a8(0x669)][_0x46c6a8(0xab7)]=function(){const _0x205cbd=_0x46c6a8;VisuMZ[_0x205cbd(0xa74)][_0x205cbd(0x9f1)]['call'](this),this['y']=Graphics[_0x205cbd(0x1fc)]*0xa,this['meetsSelectFrontviewActorConditions']()&&this[_0x205cbd(0x112)]();},VisuMZ[_0x46c6a8(0xa74)]['Window_BattleEnemy_hide']=Window_BattleEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x9dd)],Window_BattleEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x9dd)]=function(){const _0xeeba7=_0x46c6a8;VisuMZ['BattleCore'][_0xeeba7(0x512)][_0xeeba7(0x515)](this),$gameParty['select'](null),delete this[_0xeeba7(0x7ec)][_0xeeba7(0x869)],delete this[_0xeeba7(0x7ec)][_0xeeba7(0x9b7)];},Window_BattleEnemy[_0x46c6a8(0x669)][_0x46c6a8(0xa1d)]=function(){const _0x622ae3=_0x46c6a8;let _0x5390e3=$gameTroop['aliveMembers']();const _0x29d121=BattleManager['inputtingAction']();if(_0x29d121){_0x29d121['canSingleOrMultipleSelect']()&&_0x5390e3['length']>0x1&&this['setHandler']('pageup',this[_0x622ae3(0xb26)][_0x622ae3(0x5fa)](this));if(_0x29d121['isForAnyone']()){const _0x4b7720=$gameParty['aliveMembers']();_0x5390e3=_0x5390e3['concat'](_0x4b7720),_0x29d121['canSingleOrMultipleSelect']()&&_0x4b7720['length']>0x1&&this[_0x622ae3(0x226)](_0x622ae3(0x9b7),this[_0x622ae3(0x117)][_0x622ae3(0x5fa)](this));}}return _0x5390e3;},Window_BattleEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x233)]=function(){const _0x1dbc63=_0x46c6a8;this['_enemies']=this[_0x1dbc63(0xa1d)](),this['sortEnemies'](),Window_Selectable[_0x1dbc63(0x669)][_0x1dbc63(0x233)][_0x1dbc63(0x515)](this);},Window_BattleEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x467)]=function(){const _0x1482a7=_0x46c6a8;this[_0x1482a7(0x97b)]['sort']((_0x4d9a73,_0x4a024a)=>{const _0x129723=_0x1482a7;if(_0x4d9a73['isActor']()!==_0x4a024a['isActor']()){if(_0x4d9a73[_0x129723(0x8de)]())return-0x1;if(_0x4a024a[_0x129723(0x8de)]())return 0x1;}if(_0x4d9a73['isActor']()&&_0x4a024a['isActor']())return _0x4d9a73[_0x129723(0x4f0)]()-_0x4a024a['index']();return _0x4d9a73[_0x129723(0x62d)]()[_0x129723(0xc31)]===_0x4a024a[_0x129723(0x62d)]()[_0x129723(0xc31)]?_0x4d9a73[_0x129723(0x62d)]()['_baseY']-_0x4a024a[_0x129723(0x62d)]()[_0x129723(0x960)]:_0x4d9a73['battler']()[_0x129723(0xc31)]-_0x4a024a[_0x129723(0x62d)]()['_baseX'];}),SceneManager[_0x1482a7(0x5ee)]()&&this[_0x1482a7(0x97b)][_0x1482a7(0x1d3)]();},Window_BattleEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x24d)]=function(){const _0x13613f=_0x46c6a8,_0x44b309=VisuMZ[_0x13613f(0xa74)][_0x13613f(0x154)][_0x13613f(0x6de)];_0x44b309[_0x13613f(0x167)]?this[_0x13613f(0x487)]():this[_0x13613f(0x356)]();},Window_BattleEnemy[_0x46c6a8(0x669)]['autoSelectLastSelected']=function(){const _0x3e22e3=_0x46c6a8,_0x26f9b0=BattleManager['inputtingAction']();if(_0x26f9b0&&_0x26f9b0[_0x3e22e3(0x9ae)]()){if(_0x26f9b0[_0x3e22e3(0x6a5)]()){if(this['_lastActor']&&this[_0x3e22e3(0x97b)]['includes'](this[_0x3e22e3(0xae3)])){const _0x47620c=this[_0x3e22e3(0x97b)]['indexOf'](this[_0x3e22e3(0xae3)]);return this[_0x3e22e3(0xbff)](_0x47620c);}else return this[_0x3e22e3(0x356)]();}}if(this[_0x3e22e3(0x5c6)]&&this[_0x3e22e3(0x97b)][_0x3e22e3(0x4a3)](this[_0x3e22e3(0x5c6)])){const _0xa73d93=this['_enemies'][_0x3e22e3(0x3bd)](this[_0x3e22e3(0x5c6)]);this[_0x3e22e3(0xbff)](_0xa73d93);}else this[_0x3e22e3(0x356)]();},Window_BattleEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x356)]=function(){const _0x599fcc=_0x46c6a8,_0x2b98ef=BattleManager['inputtingAction']();if(_0x2b98ef&&_0x2b98ef['isForAnyone']()){const _0x116e52=$gameParty[_0x599fcc(0xa1f)]()[0x0];let _0x156b1c=this['_enemies']['indexOf'](_0x116e52);const _0x3e343f=_0x2b98ef[_0x599fcc(0x6e9)]()[_0x599fcc(0x476)];if(_0x3e343f['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x599fcc(0xbff)](_0x156b1c);return;}else{if(_0x3e343f[_0x599fcc(0x712)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x599fcc(0xbff)](_0x156b1c-0x1);return;}}}const _0x116206=VisuMZ['BattleCore']['Settings'][_0x599fcc(0x6de)];let _0x375269=![];$gameSystem[_0x599fcc(0x33c)]()?_0x375269=_0x116206[_0x599fcc(0x52f)]:_0x375269=_0x116206[_0x599fcc(0x24b)],this['forceSelect'](_0x375269?this[_0x599fcc(0x280)]()-0x1:0x0);},Window_BattleEnemy[_0x46c6a8(0x669)][_0x46c6a8(0xa19)]=function(){const _0x37fe6e=_0x46c6a8;Window_Selectable[_0x37fe6e(0x669)][_0x37fe6e(0xa19)][_0x37fe6e(0x515)](this);if(!this['enemy']())return;if(this[_0x37fe6e(0x78f)]()['isEnemy']())this[_0x37fe6e(0x5c6)]=this[_0x37fe6e(0x78f)]();if(this[_0x37fe6e(0x78f)]()[_0x37fe6e(0x4ec)]())this['_lastActor']=this['enemy']();},Window_BattleEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x387)]=function(_0x19221c){const _0x451945=_0x46c6a8;Window_Selectable[_0x451945(0x669)]['select'][_0x451945(0x515)](this,_0x19221c),$gameTroop[_0x451945(0x387)](this[_0x451945(0x78f)]()),$gameParty['select'](this['enemy']());if(!this[_0x451945(0x78f)]())return;if(this[_0x451945(0xc3a)]()){const _0x56f732=SceneManager[_0x451945(0x7a7)][_0x451945(0x3ee)];this[_0x451945(0x78f)]()[_0x451945(0x4ec)]()?_0x56f732[_0x451945(0x387)](this[_0x451945(0x78f)]()['index']()):_0x56f732[_0x451945(0x846)]();}},Window_BattleEnemy[_0x46c6a8(0x669)]['meetsSelectFrontviewActorConditions']=function(){const _0x4e9155=_0x46c6a8;if(!this[_0x4e9155(0x6cb)])return![];if($gameSystem[_0x4e9155(0x33c)]())return![];const _0x88b50a=SceneManager[_0x4e9155(0x7a7)][_0x4e9155(0x753)](),_0x462d87=['default',_0x4e9155(0x8b3),'xp',_0x4e9155(0x23e),_0x4e9155(0x9a1)];return _0x462d87[_0x4e9155(0x4a3)](_0x88b50a);},Window_BattleEnemy['prototype'][_0x46c6a8(0x112)]=function(){const _0x39ba2e=_0x46c6a8,_0x3098f3=SceneManager[_0x39ba2e(0x7a7)][_0x39ba2e(0x3ee)];_0x3098f3['show'](),_0x3098f3['setEnemyWindowMode'](!![]),_0x3098f3['refresh'](),_0x3098f3[_0x39ba2e(0x846)]();const _0x1a753a=SceneManager[_0x39ba2e(0x7a7)][_0x39ba2e(0x753)](),_0xf1204e=['xp','portrait',_0x39ba2e(0x9a1)];if(_0xf1204e[_0x39ba2e(0x4a3)](_0x1a753a)){const _0x26a24a=SceneManager['_scene'][_0x39ba2e(0x624)];_0x26a24a[_0x39ba2e(0x918)]['y']=0x0;}},Window_BattleEnemy[_0x46c6a8(0x669)]['closeBattleActorWindow']=function(){const _0x597321=_0x46c6a8,_0x2063f6=SceneManager['_scene'][_0x597321(0x3ee)];_0x2063f6[_0x597321(0x9dd)](),_0x2063f6['setEnemyWindowMode'](![]),_0x2063f6[_0x597321(0x846)]();const _0x22ec0c=SceneManager[_0x597321(0x7a7)][_0x597321(0x624)];_0x22ec0c[_0x597321(0x918)]['y']=0x1;},Window_BattleEnemy[_0x46c6a8(0x669)]['selectAllEnemies']=function(){const _0x18342b=_0x46c6a8,_0x1ceca0=BattleManager[_0x18342b(0x819)]();if(_0x1ceca0)_0x1ceca0[_0x18342b(0x372)](_0x18342b(0x63d));this['processOk']();},Window_BattleEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x117)]=function(){const _0x516b36=_0x46c6a8,_0x452b48=BattleManager[_0x516b36(0x819)]();if(_0x452b48)_0x452b48[_0x516b36(0x372)](_0x516b36(0x560));this[_0x516b36(0x4fe)]();},Window_BattleEnemy[_0x46c6a8(0x669)][_0x46c6a8(0x505)]=function(){const _0x3d6273=_0x46c6a8;return this[_0x3d6273(0x423)]();},Window_BattleEnemy[_0x46c6a8(0x669)]['isActionSelectionValid']=function(){const _0x3cca44=_0x46c6a8,_0x47c5b7=BattleManager['inputtingAction']();if(!_0x47c5b7)return!![];if(!_0x47c5b7[_0x3cca44(0x6e9)]())return!![];const _0x81b9d=this[_0x3cca44(0x78f)](),_0x191ef6=_0x47c5b7[_0x3cca44(0x6e9)]()[_0x3cca44(0xb03)];if(_0x47c5b7[_0x3cca44(0xb2b)]()){if(_0x81b9d===BattleManager[_0x3cca44(0x185)]())return![];}return!![];},Window_BattleItem[_0x46c6a8(0x669)][_0x46c6a8(0x4a3)]=function(_0x233309){const _0x7beeeb=_0x46c6a8;if(!_0x233309)return![];return _0x233309[_0x7beeeb(0xc6e)]===0x0||_0x233309[_0x7beeeb(0xc6e)]===0x1;};function _0x2a7f(_0x20aa0e,_0x180efd){const _0x5220a9=_0x5220();return _0x2a7f=function(_0x2a7ff9,_0x229965){_0x2a7ff9=_0x2a7ff9-0x101;let _0x5ebc62=_0x5220a9[_0x2a7ff9];return _0x5ebc62;},_0x2a7f(_0x20aa0e,_0x180efd);}function Window_AutoBattleCancel(){const _0x4fe921=_0x46c6a8;this[_0x4fe921(0x82c)](...arguments);}Window_AutoBattleCancel[_0x46c6a8(0x669)]=Object[_0x46c6a8(0x4c2)](Window_Base[_0x46c6a8(0x669)]),Window_AutoBattleCancel['prototype'][_0x46c6a8(0x2cf)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x46c6a8(0x669)][_0x46c6a8(0x82c)]=function(_0x2dd9c8){const _0x25f32c=_0x46c6a8;Window_Base['prototype'][_0x25f32c(0x82c)][_0x25f32c(0x515)](this,_0x2dd9c8),this['setBackgroundType'](this[_0x25f32c(0x33e)]()),this[_0x25f32c(0x233)]();},Window_AutoBattleCancel[_0x46c6a8(0x669)][_0x46c6a8(0x33e)]=function(){const _0x47990e=_0x46c6a8;return VisuMZ[_0x47990e(0xa74)][_0x47990e(0x154)][_0x47990e(0x70d)][_0x47990e(0x952)];},Window_AutoBattleCancel[_0x46c6a8(0x669)][_0x46c6a8(0x233)]=function(){const _0x1ef4ef=_0x46c6a8;this[_0x1ef4ef(0x15c)][_0x1ef4ef(0x518)]();const _0x4a6172=VisuMZ['BattleCore'][_0x1ef4ef(0x154)][_0x1ef4ef(0x70d)][_0x1ef4ef(0x218)],_0x4fc02e=_0x4a6172[_0x1ef4ef(0x1ba)](this['okButtonText'](),this['cancelButtonText']()),_0x56740e=this['textSizeEx'](_0x4fc02e)['width'],_0x3c69c5=Math[_0x1ef4ef(0x2f2)]((this[_0x1ef4ef(0x158)]-_0x56740e)/0x2);this[_0x1ef4ef(0x38c)](_0x4fc02e,_0x3c69c5,0x0,_0x56740e);},Window_AutoBattleCancel[_0x46c6a8(0x669)][_0x46c6a8(0x3e5)]=function(){const _0x133f6d=_0x46c6a8;return Imported['VisuMZ_0_CoreEngine']?TextManager[_0x133f6d(0x236)]('ok'):VisuMZ[_0x133f6d(0xa74)]['Settings'][_0x133f6d(0x70d)]['AutoBattleOK'];},Window_AutoBattleCancel['prototype'][_0x46c6a8(0x52d)]=function(){const _0x8448e0=_0x46c6a8;return Imported['VisuMZ_0_CoreEngine']?TextManager[_0x8448e0(0x236)](_0x8448e0(0xbc1)):VisuMZ['BattleCore'][_0x8448e0(0x154)][_0x8448e0(0x70d)]['AutoBattleCancel'];},Window_AutoBattleCancel[_0x46c6a8(0x669)][_0x46c6a8(0x50f)]=function(){const _0x335a7b=_0x46c6a8;Window_Base[_0x335a7b(0x669)][_0x335a7b(0x50f)]['call'](this),this[_0x335a7b(0x3b4)](),this[_0x335a7b(0x138)]();},Window_AutoBattleCancel[_0x46c6a8(0x669)][_0x46c6a8(0x3b4)]=function(){const _0x509e92=_0x46c6a8;this[_0x509e92(0x6cb)]=BattleManager[_0x509e92(0x6d9)];},Window_AutoBattleCancel['prototype'][_0x46c6a8(0x138)]=function(){const _0x21174a=_0x46c6a8;if(!BattleManager[_0x21174a(0x6d9)])return;(Input[_0x21174a(0x7d6)]('ok')||Input['isTriggered']('cancel')||TouchInput['isClicked']()||TouchInput[_0x21174a(0x369)]())&&(SoundManager[_0x21174a(0x83d)](),BattleManager[_0x21174a(0x6d9)]=![],Input[_0x21174a(0x518)](),TouchInput[_0x21174a(0x518)]());};function Window_EnemyName(){const _0x46a232=_0x46c6a8;this[_0x46a232(0x82c)](...arguments);}Window_EnemyName['prototype']=Object['create'](Window_StatusBase[_0x46c6a8(0x669)]),Window_EnemyName['prototype'][_0x46c6a8(0x2cf)]=Window_EnemyName,Window_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x82c)]=function(_0x2a5fda){const _0x8eabfe=_0x46c6a8;this[_0x8eabfe(0x984)]=_0x2a5fda,this[_0x8eabfe(0x5c9)]='';const _0x56e16e=new Rectangle(0x0,0x0,Graphics[_0x8eabfe(0xb13)],this[_0x8eabfe(0x1f8)]()*0x4);Window_StatusBase[_0x8eabfe(0x669)][_0x8eabfe(0x82c)]['call'](this,_0x56e16e),this[_0x8eabfe(0x7d7)](0x2),this[_0x8eabfe(0x98a)]=0x0;},Window_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0xc63)]=function(){const _0x9ab348=_0x46c6a8;this[_0x9ab348(0x180)]=0x0;},Window_EnemyName['prototype'][_0x46c6a8(0x78f)]=function(){const _0x4b2dc7=_0x46c6a8;return $gameTroop[_0x4b2dc7(0x24a)]()[this['_enemyID']];},Window_EnemyName[_0x46c6a8(0x669)]['update']=function(){const _0x34543c=_0x46c6a8;Window_StatusBase[_0x34543c(0x669)]['update'][_0x34543c(0x515)](this),this[_0x34543c(0x78f)]()&&this[_0x34543c(0x78f)]()[_0x34543c(0x106)]()!==this['_text']&&(this[_0x34543c(0x5c9)]=this['enemy']()['name'](),this[_0x34543c(0x233)]()),this[_0x34543c(0x26d)](),this[_0x34543c(0x28b)]();},Window_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x26d)]=function(){const _0x50c648=_0x46c6a8;if(!this[_0x50c648(0x78f)]()){if(this[_0x50c648(0x98a)]>0x0)this[_0x50c648(0x98a)]-=0x10;}else{if(this['enemy']()[_0x50c648(0xa10)]()){if(this[_0x50c648(0x98a)]>0x0)this[_0x50c648(0x98a)]-=0x10;}else{if(SceneManager['_scene']['_enemyWindow']&&SceneManager[_0x50c648(0x7a7)][_0x50c648(0x44f)][_0x50c648(0x998)]&&SceneManager[_0x50c648(0x7a7)][_0x50c648(0x44f)][_0x50c648(0x97b)][_0x50c648(0x4a3)](this[_0x50c648(0x78f)]())){if(this['contentsOpacity']<0xff)this[_0x50c648(0x98a)]+=0x10;}else this[_0x50c648(0x98a)]>0x0&&(this[_0x50c648(0x98a)]-=0x10);}}},Window_EnemyName[_0x46c6a8(0x669)]['updatePosition']=function(){const _0xef27b0=_0x46c6a8;if(!this[_0xef27b0(0x78f)]())return;SceneManager['isBattleFlipped']()?this['x']=Graphics[_0xef27b0(0xb13)]-this[_0xef27b0(0x78f)]()['battler']()['_baseX']:this['x']=this[_0xef27b0(0x78f)]()[_0xef27b0(0x62d)]()[_0xef27b0(0xc31)];this['x']-=Math[_0xef27b0(0xa5e)](this['width']/0x2),this['y']=this['enemy']()['battler']()[_0xef27b0(0x960)]-Math[_0xef27b0(0xa5e)](this[_0xef27b0(0x1f8)]()*1.5);const _0x390924=VisuMZ['BattleCore']['Settings'][_0xef27b0(0x6de)];this['x']+=_0x390924['NameOffsetX']||0x0,this['y']+=_0x390924['NameOffsetY']||0x0;},Window_EnemyName[_0x46c6a8(0x669)]['resetFontSettings']=function(){const _0x26d039=_0x46c6a8;Window_Base['prototype'][_0x26d039(0x74a)][_0x26d039(0x515)](this),this[_0x26d039(0x15c)]['fontSize']=VisuMZ[_0x26d039(0xa74)]['Settings'][_0x26d039(0x6de)][_0x26d039(0x28a)];},Window_EnemyName[_0x46c6a8(0x669)]['refresh']=function(){const _0x2caf38=_0x46c6a8;Window_StatusBase['prototype'][_0x2caf38(0x233)][_0x2caf38(0x515)](this),this[_0x2caf38(0x15c)][_0x2caf38(0x518)]();if(!this[_0x2caf38(0x78f)]())return;this[_0x2caf38(0x427)]();},Window_EnemyName[_0x46c6a8(0x669)][_0x46c6a8(0x427)]=function(){const _0x1a828a=_0x46c6a8;this[_0x1a828a(0x5c9)]=this[_0x1a828a(0x78f)]()[_0x1a828a(0x106)]();const _0x510d6e=this[_0x1a828a(0xa0c)](this[_0x1a828a(0x5c9)])[_0x1a828a(0x1e1)],_0x46000c=Math[_0x1a828a(0xa5e)]((this['innerWidth']-_0x510d6e)/0x2);this[_0x1a828a(0x38c)](this[_0x1a828a(0x5c9)],_0x46000c,0x0,_0x510d6e+0x8);},Window_BattleLog['prototype'][_0x46c6a8(0x6c3)]=function(){const _0x146818=_0x46c6a8;return VisuMZ['BattleCore']['Settings']['BattleLog'][_0x146818(0x25e)];},Window_BattleLog['prototype'][_0x46c6a8(0xbe7)]=function(){const _0x4e3108=_0x46c6a8;return VisuMZ['BattleCore'][_0x4e3108(0x154)]['BattleLog'][_0x4e3108(0x492)];},Window_BattleLog['prototype'][_0x46c6a8(0x276)]=function(){const _0x3b4fc2=_0x46c6a8;return VisuMZ[_0x3b4fc2(0xa74)][_0x3b4fc2(0x154)][_0x3b4fc2(0x519)]['BackColor'];},Window_BattleLog['prototype'][_0x46c6a8(0xbc7)]=function(){return![];},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0xc1d)]=function(_0x35d8f9,_0x526b4a){const _0x461415=_0x46c6a8;this[_0x461415(0x9db)](_0x461415(0x275)),BattleManager[_0x461415(0x5c0)](_0x35d8f9,_0x526b4a),this[_0x461415(0xbb4)]();},Window_BattleLog['prototype'][_0x46c6a8(0x611)]=function(_0x5136af,_0x60ed4c,_0x5561ce){const _0x3e1e40=_0x46c6a8;this[_0x3e1e40(0x9db)](_0x3e1e40(0x275)),BattleManager[_0x3e1e40(0xaad)](_0x5136af,_0x60ed4c,_0x5561ce),this[_0x3e1e40(0xbb4)]();},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x275)]=function(){this['callNextMethod']();},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x78c)]=function(_0x280651){const _0x4bcfce=_0x46c6a8,_0x358978=Array[_0x4bcfce(0x669)][_0x4bcfce(0x7da)][_0x4bcfce(0x515)](arguments,0x1),_0x3227ef={'name':_0x280651,'params':_0x358978},_0x53e022=this[_0x4bcfce(0x3e9)][_0x4bcfce(0x883)](_0x2dda29=>_0x2dda29[_0x4bcfce(0x106)])[_0x4bcfce(0x3bd)](_0x4bcfce(0x275));_0x53e022>=0x0?this[_0x4bcfce(0x3e9)][_0x4bcfce(0x27b)](_0x53e022,0x0,_0x3227ef):this[_0x4bcfce(0x3e9)]['push'](_0x3227ef);},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x9db)]=function(_0xeeb60a){const _0x437918=_0x46c6a8,_0x5d6930=Array[_0x437918(0x669)][_0x437918(0x7da)][_0x437918(0x515)](arguments,0x1);this['_methods'][_0x437918(0x9db)]({'name':_0xeeb60a,'params':_0x5d6930});},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x53d)]=function(){const _0x4a0b4b=_0x46c6a8;if(!$gameTemp[_0x4a0b4b(0x7a4)]())return;console[_0x4a0b4b(0x221)](this[_0x4a0b4b(0x3e9)][_0x4a0b4b(0x883)](_0x3662ca=>_0x3662ca[_0x4a0b4b(0x106)])[_0x4a0b4b(0x830)]('\x0a'));},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x412)]=Window_BattleLog['prototype'][_0x46c6a8(0x233)],Window_BattleLog['prototype'][_0x46c6a8(0x233)]=function(){const _0x29c6c6=_0x46c6a8;this[_0x29c6c6(0x547)]=!![];},VisuMZ[_0x46c6a8(0xa74)]['Window_BattleLog_update']=Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x50f)],Window_BattleLog[_0x46c6a8(0x669)]['update']=function(){const _0x3528d0=_0x46c6a8;VisuMZ[_0x3528d0(0xa74)][_0x3528d0(0x9c6)][_0x3528d0(0x515)](this);if(this[_0x3528d0(0x547)])this[_0x3528d0(0x94a)]();},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x94a)]=function(){const _0x134010=_0x46c6a8;this[_0x134010(0x547)]=![],VisuMZ['BattleCore'][_0x134010(0x412)]['call'](this);},Window_BattleLog['prototype'][_0x46c6a8(0x87f)]=function(_0x314352){const _0x1e8bed=_0x46c6a8;let _0x1b6b25=VisuMZ[_0x1e8bed(0xa74)]['Settings']['BattleLog'][_0x1e8bed(0x521)][_0x1e8bed(0x4ed)]()[_0x1e8bed(0xa28)](),_0x1b1a56=this[_0x1e8bed(0x7f4)][_0x314352];if(_0x1b1a56[_0x1e8bed(0x712)](/<LEFT>/i))_0x1b6b25=_0x1e8bed(0x1ef);else{if(_0x1b1a56[_0x1e8bed(0x712)](/<CENTER>/i))_0x1b6b25=_0x1e8bed(0x2bb);else _0x1b1a56[_0x1e8bed(0x712)](/<RIGHT>/i)&&(_0x1b6b25='right');}_0x1b1a56=_0x1b1a56[_0x1e8bed(0xa75)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x1b1a56=_0x1b1a56[_0x1e8bed(0xa75)](/\\I\[0\]/gi,'');const _0x10fecc=this[_0x1e8bed(0xa4c)](_0x314352);this[_0x1e8bed(0x15c)]['clearRect'](_0x10fecc['x'],_0x10fecc['y'],_0x10fecc[_0x1e8bed(0x1e1)],_0x10fecc[_0x1e8bed(0x1fc)]);const _0x19f665=this[_0x1e8bed(0xa0c)](_0x1b1a56)[_0x1e8bed(0x1e1)];let _0x3a8931=_0x10fecc['x'];if(_0x1b6b25===_0x1e8bed(0x2bb))_0x3a8931+=(_0x10fecc[_0x1e8bed(0x1e1)]-_0x19f665)/0x2;else _0x1b6b25==='right'&&(_0x3a8931+=_0x10fecc[_0x1e8bed(0x1e1)]-_0x19f665);this['drawTextEx'](_0x1b1a56,_0x3a8931,_0x10fecc['y'],_0x19f665+0x8);},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x386)]=function(_0x219077){const _0x3ad729=_0x46c6a8;this['_lines'][_0x3ad729(0x78c)](_0x219077),this[_0x3ad729(0x233)](),this[_0x3ad729(0xbb4)]();},Window_BattleLog['prototype'][_0x46c6a8(0x290)]=function(){const _0x2399c0=_0x46c6a8;let _0x53a0b9=![];switch(this[_0x2399c0(0x8e0)]){case _0x2399c0(0x3b5):_0x53a0b9=this[_0x2399c0(0x81e)][_0x2399c0(0x493)]();break;case _0x2399c0(0xacf):_0x53a0b9=this[_0x2399c0(0x81e)][_0x2399c0(0x150)]();break;case'animation':_0x53a0b9=this['_spriteset']['isAnimationPlaying']();break;case _0x2399c0(0xb08):_0x53a0b9=this[_0x2399c0(0x81e)]['isAnyoneFloating']();break;case _0x2399c0(0x750):_0x53a0b9=this['_spriteset'][_0x2399c0(0x1c8)]();break;case _0x2399c0(0x1d7):_0x53a0b9=this['_spriteset'][_0x2399c0(0x1cd)]();break;}return!_0x53a0b9&&(this['_waitMode']=''),_0x53a0b9;},Window_BattleLog['prototype'][_0x46c6a8(0xa23)]=function(){const _0x1d4d0d=_0x46c6a8;this[_0x1d4d0d(0x77f)]('animation');},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0xa0f)]=function(){const _0x2debea=_0x46c6a8;this[_0x2debea(0x77f)]('float');},Window_BattleLog['prototype'][_0x46c6a8(0x913)]=function(){const _0x1b1ad3=_0x46c6a8;this[_0x1b1ad3(0x77f)](_0x1b1ad3(0x750));},Window_BattleLog['prototype'][_0x46c6a8(0x90e)]=function(){const _0x358ad7=_0x46c6a8;this[_0x358ad7(0x77f)]('opacity');},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0xbef)]=function(){const _0x376f17=_0x46c6a8,_0x3613f3=VisuMZ[_0x376f17(0xa74)][_0x376f17(0x154)][_0x376f17(0x519)];if(!_0x3613f3[_0x376f17(0xad9)])return;this[_0x376f17(0x78c)](_0x376f17(0x386),_0x3613f3[_0x376f17(0x698)][_0x376f17(0x1ba)]($gameTroop[_0x376f17(0x814)]())),this['push']('waitCount',_0x3613f3[_0x376f17(0xa2a)]),this[_0x376f17(0x78c)](_0x376f17(0x518));};var $subject,$action,$targets;Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x5a9)]=function(_0x26d742,_0x140001,_0xa949c2){const _0x54fbe1=_0x46c6a8;$subject=_0x26d742,$action=_0x140001,$targets=_0xa949c2,this['isCustomActionSequence'](_0x140001)?BattleManager['prepareCustomActionSequence']():this[_0x54fbe1(0x838)](_0x26d742,_0x140001,_0xa949c2);},Window_BattleLog[_0x46c6a8(0x669)]['isCustomActionSequence']=function(_0xf242a){const _0x2b2c78=_0x46c6a8;if(!SceneManager[_0x2b2c78(0x849)]())return![];if(!_0xf242a)return![];if(!_0xf242a['item']())return![];if(_0xf242a[_0x2b2c78(0x6e9)]()[_0x2b2c78(0xb03)][_0x2b2c78(0x712)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0xf242a[_0x2b2c78(0x6e9)]()))return!![];return![];},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x838)]=function(_0x2f5da0,_0x20f810,_0x141fd1){const _0x314fc9=_0x46c6a8;this[_0x314fc9(0x1a7)](_0x2f5da0,_0x20f810,_0x141fd1),this[_0x314fc9(0x8fe)](_0x2f5da0,_0x20f810,_0x141fd1),this[_0x314fc9(0x56c)](_0x2f5da0,_0x20f810,_0x141fd1);},Window_BattleLog['prototype']['displayAction']=function(_0x338516,_0x21553b){const _0x3f1ce5=_0x46c6a8,_0x185d79=VisuMZ['BattleCore'][_0x3f1ce5(0x154)][_0x3f1ce5(0x519)];_0x185d79[_0x3f1ce5(0x333)]&&this[_0x3f1ce5(0x78c)](_0x3f1ce5(0x386),_0x3f1ce5(0x148)[_0x3f1ce5(0x1ba)](DataManager[_0x3f1ce5(0x44c)](_0x21553b)));if(DataManager[_0x3f1ce5(0x66a)](_0x21553b)){if(_0x185d79['ActionSkillMsg1'])this[_0x3f1ce5(0x60a)](_0x21553b[_0x3f1ce5(0xc26)],_0x338516,_0x21553b);if(_0x185d79[_0x3f1ce5(0x798)])this[_0x3f1ce5(0x60a)](_0x21553b[_0x3f1ce5(0x4c9)],_0x338516,_0x21553b);}else{if(_0x185d79[_0x3f1ce5(0x5e1)])this['displayItemMessage'](TextManager['useItem'],_0x338516,_0x21553b);}},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x1a7)]=function(_0x4661d7,_0x3a8908,_0x30ba57){const _0x16a76e=_0x46c6a8,_0x438307=_0x3a8908[_0x16a76e(0x6e9)]();this[_0x16a76e(0x2c1)](_0x4661d7,_0x438307),this[_0x16a76e(0x78c)](_0x16a76e(0x85d),_0x4661d7,_0x30ba57,!![]),this['push'](_0x16a76e(0x975),_0x4661d7,_0x3a8908),this[_0x16a76e(0x78c)](_0x16a76e(0xb00)),this['push'](_0x16a76e(0xbc4),_0x4661d7,_0x3a8908),this[_0x16a76e(0x78c)]('waitForAnimation');},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x8fe)]=function(_0x5b76fc,_0x289938,_0x4d8e77){const _0x2f455e=_0x46c6a8;if(this[_0x2f455e(0xbb9)](_0x289938))this[_0x2f455e(0xa2e)](_0x5b76fc,_0x289938,_0x4d8e77);else{if(this['isMeleeMultiTargetAction'](_0x289938))this[_0x2f455e(0x79f)](_0x5b76fc,_0x289938,_0x4d8e77);else _0x289938[_0x2f455e(0x2ba)]()?this[_0x2f455e(0x785)](_0x5b76fc,_0x289938,_0x4d8e77):this['wholeActionSet'](_0x5b76fc,_0x289938,_0x4d8e77);}},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x95b)]=function(_0x2fcab3,_0x3d3282,_0x162bf8,_0x4f59aa){const _0x14d685=_0x46c6a8;if(_0x3d3282){const _0x243436=_0x2fcab3[_0x14d685(0x62d)]();this[_0x14d685(0x78c)](_0x14d685(0xaf0),[_0x2fcab3],_0x162bf8,_0x4f59aa),this['push'](_0x14d685(0x5f4),_0x2fcab3,_0x243436[_0x14d685(0x637)],_0x243436[_0x14d685(0x128)],_0x4f59aa,![],_0x14d685(0x3de)),this['push'](_0x14d685(0x191),[_0x2fcab3],_0x14d685(0x929)),this['push'](_0x14d685(0xb00)),this[_0x14d685(0x78c)](_0x14d685(0x191),[_0x2fcab3],'walk');}},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0xbb9)]=function(_0x50aa7a){const _0xd47514=_0x46c6a8;if(!_0x50aa7a['isPhysical']())return![];if(!_0x50aa7a[_0xd47514(0x50e)]())return![];if(!_0x50aa7a[_0xd47514(0x3c3)]())return![];return VisuMZ[_0xd47514(0xa74)]['Settings'][_0xd47514(0x3bf)]['AutoMeleeSolo'];},Window_BattleLog['prototype'][_0x46c6a8(0xa2e)]=function(_0x23fb65,_0x4e72e6,_0x59258a){const _0x33ff82=_0x46c6a8,_0x17460e=_0x23fb65[_0x33ff82(0x740)]()[_0x33ff82(0xaa8)]<0x2,_0x27ea6e=0x14,_0x5d28f8=0x30;let _0x3f5816=!![];_0x59258a['length']>0x0&&_0x23fb65['isActor']()===_0x59258a[0x0]['isActor']()&&(_0x3f5816=![]);_0x17460e&&_0x3f5816&&(this[_0x33ff82(0x78c)](_0x33ff82(0xaf0),[_0x23fb65],_0x5d28f8,_0x27ea6e),this[_0x33ff82(0x78c)]('performMoveToTargets',_0x23fb65,_0x59258a,'front\x20base',_0x27ea6e,!![],'Linear',!![]),this[_0x33ff82(0x78c)](_0x33ff82(0x191),[_0x23fb65],'walk'),this['push'](_0x33ff82(0xb00)));let _0x2f35bb=_0x4e72e6[_0x33ff82(0x3a9)]()?this['getDualWieldTimes'](_0x23fb65):0x1;for(let _0x436c47=0x0;_0x436c47<_0x2f35bb;_0x436c47++){_0x4e72e6[_0x33ff82(0x3a9)]()&&_0x23fb65[_0x33ff82(0x4ec)]()&&this['push'](_0x33ff82(0x1fe),_0x23fb65,_0x436c47),_0x4e72e6[_0x33ff82(0x6e9)]()[_0x33ff82(0x815)]<0x0?this[_0x33ff82(0x785)](_0x23fb65,_0x4e72e6,_0x59258a):this[_0x33ff82(0x399)](_0x23fb65,_0x4e72e6,_0x59258a);}_0x4e72e6[_0x33ff82(0x3a9)]()&&_0x23fb65[_0x33ff82(0x4ec)]()&&this[_0x33ff82(0x78c)](_0x33ff82(0xa48),_0x23fb65),this[_0x33ff82(0x78c)]('applyImmortal',_0x23fb65,_0x59258a,![]),this[_0x33ff82(0x95b)](_0x23fb65,_0x17460e,_0x5d28f8,_0x27ea6e);},Window_BattleLog['prototype']['isMeleeMultiTargetAction']=function(_0x1cb2b2){const _0x18b700=_0x46c6a8;if(!_0x1cb2b2[_0x18b700(0x2ef)]())return![];if(!_0x1cb2b2[_0x18b700(0x330)]())return![];if(!_0x1cb2b2[_0x18b700(0x3c3)]())return![];return VisuMZ[_0x18b700(0xa74)][_0x18b700(0x154)][_0x18b700(0x3bf)][_0x18b700(0xb3d)];},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x79f)]=function(_0x4275ef,_0x39be7c,_0x534cd0){const _0x272aea=_0x46c6a8,_0x3fe873=_0x4275ef[_0x272aea(0x740)]()['type']<0x2,_0x13adc2=0x14,_0x22796=0x30;if(_0x3fe873){this['push']('performJump',[_0x4275ef],_0x22796,_0x13adc2);const _0x3f7c13=_0x534cd0[_0x272aea(0x50d)]>0x1?_0x272aea(0x3db):'front\x20base';this[_0x272aea(0x78c)](_0x272aea(0x20f),_0x4275ef,_0x534cd0,_0x3f7c13,_0x13adc2,!![],'Linear',!![]),this[_0x272aea(0x78c)]('requestMotion',[_0x4275ef],_0x272aea(0x1eb)),this[_0x272aea(0x78c)](_0x272aea(0xb00));}let _0x509e16=_0x39be7c[_0x272aea(0x3a9)]()?this[_0x272aea(0x75c)](_0x4275ef):0x1;for(let _0x12e37b=0x0;_0x12e37b<_0x509e16;_0x12e37b++){_0x39be7c[_0x272aea(0x3a9)]()&&_0x4275ef[_0x272aea(0x4ec)]()&&this[_0x272aea(0x78c)]('setActiveWeaponSet',_0x4275ef,_0x12e37b),this[_0x272aea(0x399)](_0x4275ef,_0x39be7c,_0x534cd0);}_0x39be7c['isAttack']()&&_0x4275ef[_0x272aea(0x4ec)]()&&this['push'](_0x272aea(0xa48),_0x4275ef),this['push'](_0x272aea(0x85d),_0x4275ef,_0x534cd0,![]),this[_0x272aea(0x95b)](_0x4275ef,_0x3fe873,_0x22796,_0x13adc2);},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x785)]=function(_0x38aeda,_0x45f33d,_0x561fe1){const _0x5b8e56=_0x46c6a8,_0x1c68c0=_0x45f33d['item']();for(const _0x43065b of _0x561fe1){if(!_0x43065b)continue;this[_0x5b8e56(0x78c)](_0x5b8e56(0x1ee),_0x38aeda,_0x45f33d),this['push'](_0x5b8e56(0xb84),Sprite_Battler[_0x5b8e56(0xc33)]),this[_0x5b8e56(0x78c)](_0x5b8e56(0x8d5),_0x38aeda,[_0x43065b],_0x1c68c0[_0x5b8e56(0x815)]),this[_0x5b8e56(0x78c)](_0x5b8e56(0xb84),0x18),this[_0x5b8e56(0x78c)]('actionEffect',_0x38aeda,_0x43065b);}},Window_BattleLog['prototype'][_0x46c6a8(0x399)]=function(_0x25298e,_0xec0d97,_0xf7701c){const _0x362d6f=_0x46c6a8,_0x1c5dc3=_0xec0d97[_0x362d6f(0x6e9)]();let _0x4e1f54=_0xec0d97[_0x362d6f(0x3a9)]()?0x1+_0x25298e[_0x362d6f(0xb2e)]():0x1;while(_0x4e1f54--){this[_0x362d6f(0x78c)](_0x362d6f(0x1ee),_0x25298e,_0xec0d97),this[_0x362d6f(0x78c)](_0x362d6f(0xb84),Sprite_Battler[_0x362d6f(0xc33)]),this[_0x362d6f(0x78c)](_0x362d6f(0x8d5),_0x25298e,_0xf7701c[_0x362d6f(0xbdc)](),_0x1c5dc3[_0x362d6f(0x815)]),this[_0x362d6f(0x78c)](_0x362d6f(0xa23));}for(const _0x4c8d5c of _0xf7701c){if(!_0x4c8d5c)continue;this['push']('actionEffect',_0x25298e,_0x4c8d5c);}},Window_BattleLog[_0x46c6a8(0x669)]['finishActionSet']=function(_0x6ce43c,_0x532e00,_0xc7c94){const _0x5c1495=_0x46c6a8,_0x1d1da4=_0x532e00[_0x5c1495(0x6e9)]();this[_0x5c1495(0x78c)](_0x5c1495(0x85d),_0x6ce43c,_0xc7c94,![]),this[_0x5c1495(0x78c)](_0x5c1495(0x565)),this[_0x5c1495(0x78c)](_0x5c1495(0xb49)),this[_0x5c1495(0x78c)](_0x5c1495(0x518)),this['push'](_0x5c1495(0xc22),_0x6ce43c),this[_0x5c1495(0x78c)](_0x5c1495(0xb00));},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x1c2)]=function(_0x3306b8){$subject=null,$action=null,$targets=[];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x7b1)]=Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x497)],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x497)]=function(_0x2ab325){const _0x3f0953=_0x46c6a8;if(!VisuMZ[_0x3f0953(0xa74)][_0x3f0953(0x154)][_0x3f0953(0x519)][_0x3f0953(0x921)])return;VisuMZ['BattleCore'][_0x3f0953(0x7b1)]['call'](this,_0x2ab325);},Window_BattleLog['prototype'][_0x46c6a8(0xbda)]=function(_0xae2fc9){const _0xc67b77=_0x46c6a8;this[_0xc67b77(0x78c)](_0xc67b77(0x8c7),_0xae2fc9);VisuMZ['BattleCore'][_0xc67b77(0x154)][_0xc67b77(0x3bf)]['CounterPlayback']&&this[_0xc67b77(0x78c)](_0xc67b77(0x8d5),_0xae2fc9,[BattleManager[_0xc67b77(0x80d)]],-0x1);if(!VisuMZ[_0xc67b77(0xa74)][_0xc67b77(0x154)][_0xc67b77(0x519)][_0xc67b77(0x377)])return;this['push']('addText',TextManager[_0xc67b77(0x773)]['format'](_0xae2fc9[_0xc67b77(0x106)]()));const _0x72f87a=VisuMZ[_0xc67b77(0xa74)][_0xc67b77(0x154)]['BattleLog']['ShowCounterWait']??0x0;if(_0x72f87a>0x0)this[_0xc67b77(0x78c)]('waitCount',_0x72f87a);;},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x451)]=function(_0x408e55){const _0x39f18f=_0x46c6a8;this[_0x39f18f(0x78c)]('performReflection',_0x408e55);if(!VisuMZ[_0x39f18f(0xa74)][_0x39f18f(0x154)][_0x39f18f(0x519)][_0x39f18f(0xc3c)])return;this[_0x39f18f(0x78c)]('addText',TextManager[_0x39f18f(0x2ea)][_0x39f18f(0x1ba)](_0x408e55[_0x39f18f(0x106)]()));const _0x2df20d=VisuMZ['BattleCore'][_0x39f18f(0x154)][_0x39f18f(0x519)]['ShowReflectWait']??0x0;if(_0x2df20d>0x0)this['push']('waitCount',_0x2df20d);;},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0xa2d)]=function(_0x2cc027,_0x498e38){const _0x368f3c=_0x46c6a8;if(VisuMZ[_0x368f3c(0xa74)]['Settings']['ActionSequence'][_0x368f3c(0x309)]){const _0x201aed=_0x498e38['item']();this[_0x368f3c(0x78c)](_0x368f3c(0x8d5),_0x2cc027,[_0x2cc027],_0x201aed[_0x368f3c(0x815)]);}},Window_BattleLog['prototype'][_0x46c6a8(0x7b8)]=function(_0x21f69a,_0x159acb){const _0x4dbd00=_0x46c6a8;this[_0x4dbd00(0x78c)](_0x4dbd00(0x588),_0x21f69a,_0x159acb);if(!VisuMZ['BattleCore']['Settings'][_0x4dbd00(0x519)][_0x4dbd00(0x38f)])return;const _0x21af58=_0x21f69a['name'](),_0x1d0a8d=TextManager['substitute'][_0x4dbd00(0x1ba)](_0x21af58,_0x159acb[_0x4dbd00(0x106)]());this['push']('addText',_0x1d0a8d);const _0x803000=VisuMZ[_0x4dbd00(0xa74)]['Settings']['BattleLog'][_0x4dbd00(0xb97)]??0x0;if(_0x803000>0x0)this['push'](_0x4dbd00(0xb84),_0x803000);;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x3b3)]=Window_BattleLog[_0x46c6a8(0x669)]['displayActionResults'],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x3eb)]=function(_0xeefdd5,_0x422b8a){const _0x526f77=_0x46c6a8;VisuMZ[_0x526f77(0xa74)]['Window_BattleLog_displayActionResults'][_0x526f77(0x515)](this,_0xeefdd5,_0x422b8a);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xb42)]=Window_BattleLog['prototype'][_0x46c6a8(0xa86)],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0xa86)]=function(_0x1a26ed){const _0x48df0f=_0x46c6a8;if(!VisuMZ['BattleCore'][_0x48df0f(0x154)][_0x48df0f(0x519)][_0x48df0f(0x697)])return;VisuMZ[_0x48df0f(0xa74)][_0x48df0f(0xb42)][_0x48df0f(0x515)](this,_0x1a26ed);},VisuMZ[_0x46c6a8(0xa74)]['Window_BattleLog_displayCritical']=Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x630)],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x630)]=function(_0x1bb2e6){const _0x6b3ec=_0x46c6a8;if(!VisuMZ[_0x6b3ec(0xa74)][_0x6b3ec(0x154)][_0x6b3ec(0x519)][_0x6b3ec(0x8bc)])return;VisuMZ[_0x6b3ec(0xa74)][_0x6b3ec(0x8a5)][_0x6b3ec(0x515)](this,_0x1bb2e6);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x2af)]=Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0xb89)],Window_BattleLog['prototype']['displayMiss']=function(_0x49c549){const _0x11a29b=_0x46c6a8;!VisuMZ[_0x11a29b(0xa74)]['Settings'][_0x11a29b(0x519)][_0x11a29b(0x93e)]?this[_0x11a29b(0x78c)]('performMiss',_0x49c549):VisuMZ['BattleCore'][_0x11a29b(0x2af)][_0x11a29b(0x515)](this,_0x49c549);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x9c1)]=Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x428)],Window_BattleLog['prototype'][_0x46c6a8(0x428)]=function(_0xeb1068){const _0x2d76ee=_0x46c6a8;!VisuMZ[_0x2d76ee(0xa74)][_0x2d76ee(0x154)][_0x2d76ee(0x519)]['ShowMissEvasion']?_0xeb1068[_0x2d76ee(0x600)]()[_0x2d76ee(0x3ba)]?this[_0x2d76ee(0x78c)](_0x2d76ee(0x956),_0xeb1068):this[_0x2d76ee(0x78c)](_0x2d76ee(0x37c),_0xeb1068):VisuMZ[_0x2d76ee(0xa74)][_0x2d76ee(0x9c1)][_0x2d76ee(0x515)](this,_0xeb1068);},Window_BattleLog[_0x46c6a8(0x669)]['displayHpDamage']=function(_0x3f939d){const _0x10dc0c=_0x46c6a8;_0x3f939d[_0x10dc0c(0x16f)]=0x0,_0x3f939d['result']()[_0x10dc0c(0x5f9)]&&(_0x3f939d[_0x10dc0c(0x600)]()[_0x10dc0c(0x820)]>0x0&&!_0x3f939d['result']()['drain']&&(_0x3f939d[_0x10dc0c(0x16f)]=_0x3f939d[_0x10dc0c(0x600)]()[_0x10dc0c(0x820)],this[_0x10dc0c(0x78c)](_0x10dc0c(0x833),_0x3f939d)),_0x3f939d[_0x10dc0c(0x600)]()[_0x10dc0c(0x820)]<0x0&&this[_0x10dc0c(0x78c)](_0x10dc0c(0x214),_0x3f939d),VisuMZ[_0x10dc0c(0xa74)][_0x10dc0c(0x154)][_0x10dc0c(0x519)][_0x10dc0c(0x385)]&&this[_0x10dc0c(0x78c)](_0x10dc0c(0x386),this[_0x10dc0c(0xb46)](_0x3f939d)));},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x3b2)]=Window_BattleLog['prototype'][_0x46c6a8(0xc37)],Window_BattleLog['prototype'][_0x46c6a8(0xc37)]=function(_0x41ecfa){const _0x27deae=_0x46c6a8;_0x41ecfa[_0x27deae(0x900)]=0x0;$action&&$action['item']()&&$action[_0x27deae(0x6e9)]()[_0x27deae(0xb03)][_0x27deae(0x712)](/<(?:DAMAGE|DMG|SHAKE) FLINCH>/i)&&(_0x41ecfa[_0x27deae(0x600)]()['mpDamage']>0x0&&!_0x41ecfa[_0x27deae(0x600)]()[_0x27deae(0x986)]&&(_0x41ecfa[_0x27deae(0x900)]=_0x41ecfa[_0x27deae(0x600)]()[_0x27deae(0x36e)],this['push']('performDamage',_0x41ecfa)));if(!VisuMZ[_0x27deae(0xa74)]['Settings'][_0x27deae(0x519)][_0x27deae(0x33a)])return;VisuMZ['BattleCore']['Window_BattleLog_displayMpDamage'][_0x27deae(0x515)](this,_0x41ecfa);},VisuMZ['BattleCore'][_0x46c6a8(0x528)]=Window_BattleLog['prototype'][_0x46c6a8(0x53f)],Window_BattleLog[_0x46c6a8(0x669)]['displayTpDamage']=function(_0x347fd5){const _0x5b91b7=_0x46c6a8;_0x347fd5[_0x5b91b7(0xa81)]=0x0;$action&&$action[_0x5b91b7(0x6e9)]()&&$action[_0x5b91b7(0x6e9)]()[_0x5b91b7(0xb03)][_0x5b91b7(0x712)](/<(?:DAMAGE|DMG|SHAKE) FLINCH>/i)&&(_0x347fd5[_0x5b91b7(0x600)]()[_0x5b91b7(0xc0f)]>0x0&&(_0x347fd5[_0x5b91b7(0xa81)]=_0x347fd5[_0x5b91b7(0x600)]()['tpDamage'],this['push']('performDamage',_0x347fd5)));if(!VisuMZ[_0x5b91b7(0xa74)][_0x5b91b7(0x154)][_0x5b91b7(0x519)][_0x5b91b7(0xba2)])return;VisuMZ[_0x5b91b7(0xa74)]['Window_BattleLog_displayTpDamage'][_0x5b91b7(0x515)](this,_0x347fd5);},Window_BattleLog['prototype'][_0x46c6a8(0xb74)]=function(_0x34d920){const _0x3d4ff2=_0x46c6a8;_0x34d920[_0x3d4ff2(0x600)]()[_0x3d4ff2(0x9f2)]()&&(this[_0x3d4ff2(0x78c)](_0x3d4ff2(0x3b9)),this[_0x3d4ff2(0x2f7)](_0x34d920),this[_0x3d4ff2(0x4cc)](_0x34d920),this[_0x3d4ff2(0x78c)]('waitForNewLine'));},Window_BattleLog[_0x46c6a8(0x669)]['displayAddedStates']=function(_0x1fbd2d){const _0x2c751c=_0x46c6a8,_0x16aa31=_0x1fbd2d['result'](),_0x53f26f=_0x16aa31[_0x2c751c(0x417)]();for(const _0x462884 of _0x53f26f){const _0x4945ca=_0x1fbd2d[_0x2c751c(0x4ec)]()?_0x462884[_0x2c751c(0xc26)]:_0x462884[_0x2c751c(0x4c9)];_0x4945ca&&VisuMZ[_0x2c751c(0xa74)]['Settings']['BattleLog'][_0x2c751c(0x776)]&&(this[_0x2c751c(0x78c)]('popBaseLine'),this[_0x2c751c(0x78c)]('pushBaseLine'),this[_0x2c751c(0x78c)](_0x2c751c(0x386),_0x4945ca['format'](_0x1fbd2d['name']())),this[_0x2c751c(0x78c)](_0x2c751c(0x71d))),_0x462884['id']===_0x1fbd2d[_0x2c751c(0x348)]()&&this[_0x2c751c(0x78c)](_0x2c751c(0x31b),_0x1fbd2d);}},Window_BattleLog[_0x46c6a8(0x669)]['displayRemovedStates']=function(_0x2eb586){const _0x1a7105=_0x46c6a8;if(!VisuMZ[_0x1a7105(0xa74)][_0x1a7105(0x154)]['BattleLog'][_0x1a7105(0x1b9)])return;const _0x38f535=_0x2eb586[_0x1a7105(0x600)](),_0x12b247=_0x38f535[_0x1a7105(0x781)]();for(const _0x229766 of _0x12b247){_0x229766[_0x1a7105(0x9e7)]&&(this[_0x1a7105(0x78c)](_0x1a7105(0xbe0)),this[_0x1a7105(0x78c)]('pushBaseLine'),this[_0x1a7105(0x78c)](_0x1a7105(0x386),_0x229766['message4'][_0x1a7105(0x1ba)](_0x2eb586['name']())),this[_0x1a7105(0x78c)](_0x1a7105(0x71d)));}},Window_BattleLog[_0x46c6a8(0x669)]['displayChangedBuffs']=function(_0x47b763){const _0x13bc2d=_0x46c6a8,_0x470dd2=VisuMZ[_0x13bc2d(0xa74)]['Settings'][_0x13bc2d(0x519)],_0x5abb52=_0x47b763[_0x13bc2d(0x600)]();if(_0x470dd2[_0x13bc2d(0xa98)])this[_0x13bc2d(0x11e)](_0x47b763,_0x5abb52[_0x13bc2d(0xc11)],TextManager[_0x13bc2d(0x757)]);if(_0x470dd2[_0x13bc2d(0xc68)])this[_0x13bc2d(0x11e)](_0x47b763,_0x5abb52[_0x13bc2d(0x4b1)],TextManager['debuffAdd']);if(_0x470dd2[_0x13bc2d(0x39d)])this['displayBuffs'](_0x47b763,_0x5abb52[_0x13bc2d(0x790)],TextManager[_0x13bc2d(0xaab)]);},Window_BattleLog['prototype']['displayBuffs']=function(_0x3aa4e2,_0x1a3d71,_0x5757f5){const _0x1a85a9=_0x46c6a8;for(const _0x4e3f00 of _0x1a3d71){const _0x4bfe11=_0x5757f5[_0x1a85a9(0x1ba)](_0x3aa4e2[_0x1a85a9(0x106)](),TextManager[_0x1a85a9(0x4c3)](_0x4e3f00));this[_0x1a85a9(0x78c)]('popBaseLine'),this['push'](_0x1a85a9(0x3b9)),this[_0x1a85a9(0x78c)](_0x1a85a9(0x386),_0x4bfe11),this[_0x1a85a9(0x78c)](_0x1a85a9(0x71d));}},VisuMZ['BattleCore'][_0x46c6a8(0xb61)]=Window_BattleLog[_0x46c6a8(0x669)]['clear'],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x518)]=function(){const _0xf39eb7=_0x46c6a8;VisuMZ[_0xf39eb7(0xa74)]['Window_BattleLog_clear'][_0xf39eb7(0x515)](this),this[_0xf39eb7(0xbb4)]();},VisuMZ['BattleCore']['Window_BattleLog_pushBaseLine']=Window_BattleLog['prototype'][_0x46c6a8(0x3b9)],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x3b9)]=function(){const _0x1849b9=_0x46c6a8;VisuMZ['BattleCore'][_0x1849b9(0xa5d)]['call'](this),this[_0x1849b9(0xbb4)]();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x92e)]=Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0xbe0)],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0xbe0)]=function(){const _0x4e7bc1=_0x46c6a8;VisuMZ[_0x4e7bc1(0xa74)]['Window_BattleLog_popBaseLine'][_0x4e7bc1(0x515)](this),this[_0x4e7bc1(0x94a)](),this[_0x4e7bc1(0xbb4)]();},VisuMZ['BattleCore'][_0x46c6a8(0xc0d)]=Window_BattleLog['prototype'][_0x46c6a8(0x638)],Window_BattleLog['prototype']['popupDamage']=function(_0x9da0f3){const _0x84e1a=_0x46c6a8;VisuMZ[_0x84e1a(0xa74)][_0x84e1a(0xc0d)][_0x84e1a(0x515)](this,_0x9da0f3),this[_0x84e1a(0xbb4)]();},Window_BattleLog['prototype'][_0x46c6a8(0x565)]=function(){const _0x311776=_0x46c6a8;let _0x772e8f=0x0;this[_0x311776(0x156)]['length']>0x0&&(_0x772e8f=this[_0x311776(0x156)][this['_baseLineStack'][_0x311776(0x50d)]-0x1]),this[_0x311776(0x7f4)]['length']>_0x772e8f?this[_0x311776(0x71d)]():this[_0x311776(0xbb4)]();},VisuMZ[_0x46c6a8(0xa74)]['Window_BattleLog_performActionStart']=Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x975)],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x975)]=function(_0x5b0c0b,_0x423fa1){const _0x5706f5=_0x46c6a8;VisuMZ[_0x5706f5(0xa74)][_0x5706f5(0x639)]['call'](this,_0x5b0c0b,_0x423fa1),this[_0x5706f5(0xbb4)]();},VisuMZ['BattleCore']['Window_BattleLog_performAction']=Window_BattleLog[_0x46c6a8(0x669)]['performAction'],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x1ee)]=function(_0x4dcfa3,_0x339d19){const _0x2a8937=_0x46c6a8;VisuMZ[_0x2a8937(0xa74)][_0x2a8937(0x7c4)]['call'](this,_0x4dcfa3,_0x339d19),this[_0x2a8937(0xbb4)]();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xb28)]=Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0xc22)],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0xc22)]=function(_0x1fe021){const _0x5573e7=_0x46c6a8;VisuMZ['BattleCore'][_0x5573e7(0xb28)][_0x5573e7(0x515)](this,_0x1fe021);for(const _0xf15938 of BattleManager['allBattleMembers']()){if(!_0xf15938)continue;if(_0xf15938['isDead']())continue;_0xf15938['performActionEndMembers']();}this[_0x5573e7(0xbb4)]();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x19b)]=Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x833)],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x833)]=function(_0x39fefe){const _0x26e45c=_0x46c6a8;VisuMZ[_0x26e45c(0xa74)][_0x26e45c(0x19b)][_0x26e45c(0x515)](this,_0x39fefe),this['callNextMethod']();},VisuMZ['BattleCore'][_0x46c6a8(0x99a)]=Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0xa07)],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0xa07)]=function(_0xecf1fd){const _0x136a78=_0x46c6a8;VisuMZ[_0x136a78(0xa74)][_0x136a78(0x99a)][_0x136a78(0x515)](this,_0xecf1fd),this['callNextMethod']();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x7ed)]=Window_BattleLog[_0x46c6a8(0x669)]['performRecovery'],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x214)]=function(_0x56d820){const _0x2f9dee=_0x46c6a8;VisuMZ['BattleCore'][_0x2f9dee(0x7ed)]['call'](this,_0x56d820),this['callNextMethod']();},VisuMZ[_0x46c6a8(0xa74)]['Window_BattleLog_performEvasion']=Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x956)],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x956)]=function(_0x3acf31){const _0x1833f4=_0x46c6a8;VisuMZ['BattleCore'][_0x1833f4(0xb4e)]['call'](this,_0x3acf31),this['callNextMethod']();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x4a5)]=Window_BattleLog[_0x46c6a8(0x669)]['performMagicEvasion'],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x37c)]=function(_0x1a95b4){const _0x4c4f2e=_0x46c6a8;VisuMZ[_0x4c4f2e(0xa74)][_0x4c4f2e(0x4a5)]['call'](this,_0x1a95b4),this['callNextMethod']();},VisuMZ['BattleCore'][_0x46c6a8(0x1fb)]=Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x8c7)],Window_BattleLog['prototype'][_0x46c6a8(0x8c7)]=function(_0x5f6e60){const _0x4d6a85=_0x46c6a8;VisuMZ[_0x4d6a85(0xa74)]['Window_BattleLog_performCounter'][_0x4d6a85(0x515)](this,_0x5f6e60),this[_0x4d6a85(0xbb4)]();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x99e)]=Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x6c2)],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x6c2)]=function(_0x4421d8){const _0x4e8aa8=_0x46c6a8;VisuMZ[_0x4e8aa8(0xa74)][_0x4e8aa8(0x99e)]['call'](this,_0x4421d8),this[_0x4e8aa8(0xbb4)]();},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x2f1)]=Window_BattleLog['prototype'][_0x46c6a8(0x588)],Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x588)]=function(_0x458095,_0x1dcfaf){const _0x431cf7=_0x46c6a8;VisuMZ[_0x431cf7(0xa74)][_0x431cf7(0x2f1)][_0x431cf7(0x515)](this,_0x458095,_0x1dcfaf),this['callNextMethod']();},VisuMZ[_0x46c6a8(0xa74)]['Window_BattleLog_performCollapse']=Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x31b)],Window_BattleLog[_0x46c6a8(0x669)]['performCollapse']=function(_0x187f06){const _0x1801cf=_0x46c6a8;VisuMZ[_0x1801cf(0xa74)]['Window_BattleLog_performCollapse']['call'](this,_0x187f06),this[_0x1801cf(0xbb4)]();},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0xbc4)]=function(_0x53648e,_0x212cba){const _0x15c54f=_0x46c6a8;_0x53648e[_0x15c54f(0xbc4)](_0x212cba),this[_0x15c54f(0xbb4)]();},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x5ca)]=function(_0x5785bd,_0x44ea16){const _0x344fdf=_0x46c6a8,_0x38fb7a=_0x5785bd[_0x344fdf(0x722)]();_0x38fb7a<=0x0?SoundManager[_0x344fdf(0xb0b)]():this[_0x344fdf(0x902)](_0x44ea16,_0x38fb7a);},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x85d)]=function(_0x24590e,_0x53b9b1,_0x3ba564){const _0x256d7c=_0x46c6a8,_0x2a0a28=[_0x24590e][_0x256d7c(0x5ba)](_0x53b9b1);for(const _0x384d7a of _0x2a0a28){if(!_0x384d7a)continue;_0x384d7a[_0x256d7c(0x41a)](_0x3ba564);}this['callNextMethod']();},Window_BattleLog[_0x46c6a8(0x669)]['waitCount']=function(_0x28ab30){const _0x387c21=_0x46c6a8;this[_0x387c21(0xa09)]=_0x28ab30;},Window_BattleLog['prototype'][_0x46c6a8(0x191)]=function(_0x199cd6,_0x1385f8){const _0x45c951=_0x46c6a8;for(const _0x500caa of _0x199cd6){if(!_0x500caa)continue;_0x500caa['requestMotion'](_0x1385f8);}this[_0x45c951(0xbb4)]();},Window_BattleLog[_0x46c6a8(0x669)]['performMoveToPoint']=function(_0x4439d2,_0x190361,_0x21b15a,_0x458441,_0x50fcee,_0x26053d){const _0x3cf9a1=_0x46c6a8;_0x4439d2[_0x3cf9a1(0x120)](_0x190361,_0x21b15a,_0x458441,_0x50fcee,_0x26053d,-0x1),this[_0x3cf9a1(0xbb4)]();},Window_BattleLog[_0x46c6a8(0x669)][_0x46c6a8(0x20f)]=function(_0x47004d,_0x56aaea,_0x2c6e4b,_0x5ef4c0,_0x9c7178,_0xdf48c,_0x5b3fc4){const _0x8c20ca=_0x46c6a8,_0x5f27cb=Math['min'](..._0x56aaea[_0x8c20ca(0x883)](_0x454a05=>_0x454a05[_0x8c20ca(0x62d)]()[_0x8c20ca(0xc31)]-_0x454a05[_0x8c20ca(0x62d)]()[_0x8c20ca(0x3c8)]()/0x2)),_0x3aaa93=Math['max'](..._0x56aaea['map'](_0x4121ad=>_0x4121ad[_0x8c20ca(0x62d)]()[_0x8c20ca(0xc31)]+_0x4121ad[_0x8c20ca(0x62d)]()[_0x8c20ca(0x3c8)]()/0x2)),_0x45d90a=Math[_0x8c20ca(0x9bd)](..._0x56aaea[_0x8c20ca(0x883)](_0x38d6fa=>_0x38d6fa[_0x8c20ca(0x62d)]()[_0x8c20ca(0x960)]-_0x38d6fa[_0x8c20ca(0x62d)]()[_0x8c20ca(0x230)]())),_0x321e15=Math['max'](..._0x56aaea[_0x8c20ca(0x883)](_0x35c831=>_0x35c831['battler']()['_baseY'])),_0x47d8da=_0x56aaea[_0x8c20ca(0x2ed)](_0x235bf5=>_0x235bf5[_0x8c20ca(0x4ec)]())['length'],_0x3edbe1=_0x56aaea['filter'](_0x987d0e=>_0x987d0e[_0x8c20ca(0x8de)]())['length'];let _0x3e02ea=0x0,_0x2f5cf0=0x0;if(_0x2c6e4b['match'](/front/i))_0x3e02ea=_0x47d8da>=_0x3edbe1?_0x5f27cb:_0x3aaa93;else{if(_0x2c6e4b[_0x8c20ca(0x712)](/middle/i))_0x3e02ea=(_0x5f27cb+_0x3aaa93)/0x2,_0x5b3fc4=-0x1;else _0x2c6e4b[_0x8c20ca(0x712)](/back/i)&&(_0x3e02ea=_0x47d8da>=_0x3edbe1?_0x3aaa93:_0x5f27cb);}if(_0x2c6e4b[_0x8c20ca(0x712)](/head/i))_0x2f5cf0=_0x45d90a;else{if(_0x2c6e4b[_0x8c20ca(0x712)](/center/i)){_0x2f5cf0=(_0x45d90a+_0x321e15)/0x2;if(_0x47004d[_0x8c20ca(0x62d)]())_0x2f5cf0+=_0x47004d[_0x8c20ca(0x62d)]()[_0x8c20ca(0x1fc)]/0x2;}else _0x2c6e4b[_0x8c20ca(0x712)](/base/i)&&(_0x2f5cf0=_0x321e15);}_0x47004d[_0x8c20ca(0x120)](_0x3e02ea,_0x2f5cf0,_0x5ef4c0,_0x9c7178,_0xdf48c,_0x5b3fc4),this[_0x8c20ca(0xbb4)]();},Window_BattleLog['prototype']['performJump']=function(_0x3904f7,_0x33a772,_0x5bf746){const _0xd3265b=_0x46c6a8;for(const _0x344f81 of _0x3904f7){if(!_0x344f81)continue;_0x344f81[_0xd3265b(0x7ff)](_0x33a772,_0x5bf746);}this[_0xd3265b(0xbb4)]();};function Window_BattleMultiTarget(){const _0x5131a3=_0x46c6a8;this[_0x5131a3(0x82c)](...arguments);}Window_BattleMultiTarget[_0x46c6a8(0x669)]=Object[_0x46c6a8(0x4c2)](Window_Command[_0x46c6a8(0x669)]),Window_BattleMultiTarget['prototype'][_0x46c6a8(0x2cf)]=Window_BattleMultiTarget,VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x55d)]=VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x55d)]||{},Window_BattleMultiTarget[_0x46c6a8(0x10a)]=VisuMZ[_0x46c6a8(0xa74)]['Settings'][_0x46c6a8(0x55d)][_0x46c6a8(0x5db)]??0x118,Window_BattleMultiTarget[_0x46c6a8(0x12f)]=VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x55d)][_0x46c6a8(0x935)]??0x2,Window_BattleMultiTarget['SHOW_BUTTON']=VisuMZ[_0x46c6a8(0xa74)]['Settings']['MultiTarget']['ShowButton']??!![],Window_BattleMultiTarget[_0x46c6a8(0x3f3)]=VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x55d)][_0x46c6a8(0xc0c)]??_0x46c6a8(0x891),Window_BattleMultiTarget['ALL_ENEMIES']=VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x55d)]['AllEnemiesText']??_0x46c6a8(0x23c),Window_BattleMultiTarget[_0x46c6a8(0x35c)]=VisuMZ['BattleCore'][_0x46c6a8(0x154)][_0x46c6a8(0x55d)][_0x46c6a8(0x32a)]??0x0,Window_BattleMultiTarget[_0x46c6a8(0x1c4)]=VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x55d)][_0x46c6a8(0xa59)]??0x0,Window_BattleMultiTarget[_0x46c6a8(0x878)]=VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)]['MultiTarget'][_0x46c6a8(0xa9e)]??0x0,Window_BattleMultiTarget[_0x46c6a8(0x482)]=VisuMZ['BattleCore']['Settings']['MultiTarget'][_0x46c6a8(0x1b4)]??0x0,Window_BattleMultiTarget[_0x46c6a8(0x669)]['initialize']=function(_0x56c986,_0x53d33c){const _0x179a13=_0x46c6a8;this[_0x179a13(0xb75)]=_0x53d33c,Window_Command[_0x179a13(0x669)][_0x179a13(0x82c)][_0x179a13(0x515)](this,_0x56c986),this[_0x179a13(0x7d7)](Window_BattleMultiTarget['BG_TYPE']),this['deactivate'](),this[_0x179a13(0x9dd)](),this[_0x179a13(0x846)]();},Window_BattleMultiTarget[_0x46c6a8(0x669)][_0x46c6a8(0x332)]=function(){const _0x3111a9=_0x46c6a8;return this[_0x3111a9(0xb75)];},Window_BattleMultiTarget[_0x46c6a8(0x669)]['makeCommandList']=function(){const _0x19a5ef=_0x46c6a8;let _0x32de52=this['forActor']()?Window_BattleMultiTarget[_0x19a5ef(0x3f3)]:Window_BattleMultiTarget[_0x19a5ef(0x319)];if(Imported[_0x19a5ef(0x12b)]&&Window_BattleMultiTarget[_0x19a5ef(0x5b9)]){this[_0x19a5ef(0x343)]=this['forActor']()?_0x19a5ef(0x9b7):_0x19a5ef(0x869),this['_buttonText']=TextManager['getInputButtonString'](this['_buttonKey']);const _0x40d1e4=VisuMZ['CoreEngine'][_0x19a5ef(0x154)][_0x19a5ef(0xa6d)][_0x19a5ef(0x48b)];_0x32de52=_0x40d1e4['format'](this['_buttonText'],_0x32de52);}this[_0x19a5ef(0x241)](_0x32de52,'selectAll');},Window_BattleMultiTarget[_0x46c6a8(0x669)]['drawItem']=function(_0x46fdfa){const _0xa8e904=_0x46c6a8,_0x450b36=this[_0xa8e904(0x7fe)](_0x46fdfa);this[_0xa8e904(0x6ef)](),this[_0xa8e904(0x57b)](this[_0xa8e904(0x43d)](_0x46fdfa));const _0x395453=this[_0xa8e904(0x7ca)](_0x46fdfa),_0x4e222f=this[_0xa8e904(0xa0c)](_0x395453)[_0xa8e904(0x1e1)],_0x5c8fff=_0x450b36['x']+Math[_0xa8e904(0x2f2)]((_0x450b36[_0xa8e904(0x1e1)]-_0x4e222f)/0x2);this[_0xa8e904(0x38c)](_0x395453,_0x5c8fff,_0x450b36['y'],_0x450b36[_0xa8e904(0x1e1)]);},Window_BattleMultiTarget[_0x46c6a8(0x669)]['update']=function(){const _0x4c10ee=_0x46c6a8;Window_Command[_0x4c10ee(0x669)][_0x4c10ee(0x50f)][_0x4c10ee(0x515)](this),this['updateVisibility'](),this[_0x4c10ee(0xa87)]();},Window_BattleMultiTarget[_0x46c6a8(0x669)][_0x46c6a8(0x3b4)]=function(){const _0x54d302=_0x46c6a8;this[_0x54d302(0x6cb)]=this[_0x54d302(0x2a3)]();},Window_BattleMultiTarget[_0x46c6a8(0x669)][_0x46c6a8(0x2a3)]=function(){const _0x56f3a2=_0x46c6a8,_0x1338a9=BattleManager['inputtingAction'](),_0x177a89=_0x1338a9&&_0x1338a9[_0x56f3a2(0x861)]();if(!_0x177a89)return![];const _0x47174b=SceneManager['_scene'];if(this[_0x56f3a2(0x332)]()){if(_0x47174b['_actorWindow'][_0x56f3a2(0x998)]&&_0x47174b[_0x56f3a2(0x3ee)][_0x56f3a2(0x7ec)][_0x56f3a2(0x9b7)])return!![];if(_0x47174b['_enemyWindow'][_0x56f3a2(0x998)]&&_0x47174b[_0x56f3a2(0x44f)][_0x56f3a2(0x7ec)]['pagedown'])return!![];}else{if(_0x47174b[_0x56f3a2(0x44f)]['active']&&_0x47174b['_enemyWindow'][_0x56f3a2(0x7ec)]['pageup'])return!![];}return![];},Window_BattleMultiTarget['prototype'][_0x46c6a8(0xa87)]=function(){const _0x1a6d3c=_0x46c6a8;if(!Imported[_0x1a6d3c(0x12b)])return;this['_buttonText']!==TextManager[_0x1a6d3c(0x236)](this[_0x1a6d3c(0x343)])&&this[_0x1a6d3c(0x233)]();},Window_BattleMultiTarget[_0x46c6a8(0x669)]['processTouch']=function(){const _0x1d92b6=_0x46c6a8;if(this['visible']&&TouchInput[_0x1d92b6(0xc1e)]()){const _0x34a41c=this['hitIndex']();if(_0x34a41c>=0x0){const _0x5efefd=this[_0x1d92b6(0x332)]()?_0x1d92b6(0x9b7):_0x1d92b6(0x869);Input[_0x1d92b6(0xbbd)](_0x5efefd);}}};function Window_DamageCounter(){const _0x31ef35=_0x46c6a8;this[_0x31ef35(0x82c)](...arguments);}Window_DamageCounter['prototype']=Object['create'](Window_Base[_0x46c6a8(0x669)]),Window_DamageCounter[_0x46c6a8(0x669)][_0x46c6a8(0x2cf)]=Window_DamageCounter,Window_DamageCounter[_0x46c6a8(0x671)]={'enabled':VisuMZ[_0x46c6a8(0xa74)]['Settings'][_0x46c6a8(0x378)][_0x46c6a8(0x4b3)]??!![],'customFontFace':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x378)][_0x46c6a8(0x367)]??'','textAlign':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x378)][_0x46c6a8(0x521)]??'left','hitsDmgFmt':VisuMZ['BattleCore']['Settings'][_0x46c6a8(0x378)][_0x46c6a8(0x747)]??_0x46c6a8(0x370),'hitsHealFmt':VisuMZ[_0x46c6a8(0xa74)]['Settings']['ComboWindow'][_0x46c6a8(0x958)]??_0x46c6a8(0x479),'totalDmgFmt':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x378)][_0x46c6a8(0xb25)]??_0x46c6a8(0xc2d),'totalHealFmt':VisuMZ[_0x46c6a8(0xa74)]['Settings']['ComboWindow']['totalHealFmt']??_0x46c6a8(0x690),'fadeShiftX':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x378)][_0x46c6a8(0x37a)]??-0x2,'fadeShiftY':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x378)][_0x46c6a8(0x9fa)]??0x0,'positionOffsetX':VisuMZ['BattleCore']['Settings']['ComboWindow'][_0x46c6a8(0xafe)]??0x0,'positionOffsetY':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)]['ComboWindow'][_0x46c6a8(0x4cf)]??0x0,'updateDuration':VisuMZ['BattleCore'][_0x46c6a8(0x154)][_0x46c6a8(0x378)][_0x46c6a8(0x6b0)]??0x14,'minimumStayDuration':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x378)][_0x46c6a8(0xabf)]??0x28,'minimumHits':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x378)][_0x46c6a8(0x394)]??0x1,'opacitySpeed':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x378)][_0x46c6a8(0x874)]??0x10},Window_DamageCounter['prototype'][_0x46c6a8(0x82c)]=function(_0x537f64){const _0xb65d30=_0x46c6a8;this['_visibleDuration']=0x0,Window_Base[_0xb65d30(0x669)][_0xb65d30(0x82c)][_0xb65d30(0x515)](this,_0x537f64),this['_targetX']=_0x537f64['x'],this['_targetY']=_0x537f64['y'],this[_0xb65d30(0x17d)](),this['setBackgroundType'](0x2);},Window_DamageCounter[_0x46c6a8(0x669)][_0x46c6a8(0x17d)]=function(){const _0x5609c7=_0x46c6a8;this['_updateDuration']=0x0,this[_0x5609c7(0x837)]=0x0,this[_0x5609c7(0xaa2)]=0x0,this[_0x5609c7(0xc66)]=0x0,this[_0x5609c7(0x442)]=0x0;},Window_DamageCounter[_0x46c6a8(0x669)][_0x46c6a8(0x74a)]=function(){const _0x51f231=_0x46c6a8;Window_Base[_0x51f231(0x669)][_0x51f231(0x74a)][_0x51f231(0x515)](this);const _0x2880ed=Window_DamageCounter[_0x51f231(0x671)];_0x2880ed[_0x51f231(0x5c5)]?this[_0x51f231(0x15c)][_0x51f231(0x8e8)]=_0x2880ed['customFontFace']:this[_0x51f231(0x15c)]['fontFace']=$gameSystem['numberFontFace']();};var $comboWindowReset=function(){const _0x194e7c=_0x46c6a8;if(!SceneManager[_0x194e7c(0x849)]())return;const _0x4a7aec=SceneManager[_0x194e7c(0x7a7)]['_damageCounterWindow'];if(_0x4a7aec)_0x4a7aec['resetCounter']();};Window_DamageCounter['prototype']['increaseHits']=function(_0x27d712){const _0x19fec2=_0x46c6a8;this[_0x19fec2(0xc66)]+=Math[_0x19fec2(0xa5e)](_0x27d712);const _0x1c1fbf=Window_DamageCounter[_0x19fec2(0x671)];this[_0x19fec2(0x2e9)]=_0x1c1fbf['updateDuration'],this['_targetHits']>=_0x1c1fbf['minimumHits']&&(this[_0x19fec2(0x4bf)]=_0x1c1fbf[_0x19fec2(0xabf)]);};var $comboWindowIncreaseHits=function(_0x61c0ce){const _0x4cf945=_0x46c6a8;if(!SceneManager[_0x4cf945(0x849)]())return;const _0x51cce3=SceneManager[_0x4cf945(0x7a7)][_0x4cf945(0x302)];if(_0x51cce3)_0x51cce3[_0x4cf945(0xbae)](_0x61c0ce);};Window_DamageCounter[_0x46c6a8(0x669)][_0x46c6a8(0x610)]=function(_0x298761){const _0x227ab3=_0x46c6a8;this[_0x227ab3(0x442)]+=Math[_0x227ab3(0xa5e)](_0x298761);const _0x37c918=Window_DamageCounter[_0x227ab3(0x671)];this['_updateDuration']=_0x37c918['updateDuration'],this[_0x227ab3(0xc66)]>=_0x37c918[_0x227ab3(0x394)]&&(this[_0x227ab3(0x4bf)]=_0x37c918[_0x227ab3(0xabf)]);};var $comboWindowIncreaseDamage=function(_0x1ccdfb){const _0x38a70a=_0x46c6a8;if(!SceneManager['isSceneBattle']())return;const _0x357b1b=SceneManager[_0x38a70a(0x7a7)][_0x38a70a(0x302)];if(_0x357b1b)_0x357b1b['increaseTotal'](_0x1ccdfb);},$comboWindowIncreaseHealing=function(_0x3fb97f){const _0x59789b=_0x46c6a8;if(!SceneManager[_0x59789b(0x849)]())return;const _0xb40572=SceneManager[_0x59789b(0x7a7)][_0x59789b(0x302)];if(_0xb40572)_0xb40572['increaseTotal'](-_0x3fb97f);};VisuMZ[_0x46c6a8(0xa74)]['Scene_Battle_createAllWindows_ComboWindow']=Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x14d)],Scene_Battle[_0x46c6a8(0x669)]['createAllWindows']=function(){const _0x39ce53=_0x46c6a8;this[_0x39ce53(0x896)](),VisuMZ['BattleCore'][_0x39ce53(0x7a5)][_0x39ce53(0x515)](this);},Scene_Battle[_0x46c6a8(0x669)]['createDamageCounterWindow']=function(){const _0x2fc02a=_0x46c6a8;if(!Window_DamageCounter[_0x2fc02a(0x671)]['enabled'])return;const _0x103f57=this[_0x2fc02a(0xc16)](),_0x1f63cb=new Window_DamageCounter(_0x103f57);this['addWindow'](_0x1f63cb),this[_0x2fc02a(0x302)]=_0x1f63cb;},Scene_Battle['prototype'][_0x46c6a8(0xc16)]=function(){const _0x3fdb9c=_0x46c6a8;if(VisuMZ[_0x3fdb9c(0xa74)][_0x3fdb9c(0x154)][_0x3fdb9c(0x378)][_0x3fdb9c(0x7ae)])return VisuMZ[_0x3fdb9c(0xa74)][_0x3fdb9c(0x154)][_0x3fdb9c(0x378)][_0x3fdb9c(0x7ae)][_0x3fdb9c(0x515)](this);const _0x576ca2=Math[_0x3fdb9c(0x182)](Graphics[_0x3fdb9c(0x1e1)]/0x4),_0x8ad617=this[_0x3fdb9c(0x3c4)](0x2,!![]),_0x1f31c6=0x0+this[_0x3fdb9c(0x82e)](),_0x209a29=Math[_0x3fdb9c(0xa5e)](Graphics['boxHeight']*0x1/0x3)+this['comboWindowOffsetY']();return new Rectangle(_0x1f31c6,_0x209a29,_0x576ca2,_0x8ad617);},Scene_Battle[_0x46c6a8(0x669)][_0x46c6a8(0x82e)]=function(){const _0x44bd85=_0x46c6a8;return Window_DamageCounter[_0x44bd85(0x671)][_0x44bd85(0x746)];},Scene_Battle['prototype']['comboWindowOffsetY']=function(){const _0x31e682=_0x46c6a8;return Window_DamageCounter[_0x31e682(0x671)]['positionOffsetY'];},Window_DamageCounter[_0x46c6a8(0x669)]['update']=function(){const _0x126d46=_0x46c6a8;Window_Base[_0x126d46(0x669)][_0x126d46(0x50f)][_0x126d46(0x515)](this),this['updateCounter'](),this[_0x126d46(0x26d)]();},Window_DamageCounter['prototype']['updateCounter']=function(){const _0x1bfe35=_0x46c6a8;if(this[_0x1bfe35(0x2e9)]<=0x0)return;const _0x107f33=this[_0x1bfe35(0x2e9)];this[_0x1bfe35(0x837)]=this[_0x1bfe35(0xc66)],this['_totalDamage']=(this[_0x1bfe35(0xaa2)]*(_0x107f33-0x1)+this[_0x1bfe35(0x442)])/_0x107f33,this['_updateDuration']--,this[_0x1bfe35(0x2e9)]<=0x0&&(this[_0x1bfe35(0x837)]=this['_targetHits'],this[_0x1bfe35(0xaa2)]=this[_0x1bfe35(0x442)]),this[_0x1bfe35(0x233)]();},Window_DamageCounter['prototype'][_0x46c6a8(0x26d)]=function(){const _0x48df81=_0x46c6a8,_0x518536=Window_DamageCounter[_0x48df81(0x671)],_0xd3f277=this[_0x48df81(0x2a3)](),_0x36807f=_0x518536['opacitySpeed']||0x1;if(_0xd3f277&&this[_0x48df81(0x98a)]<0xff)this['contentsOpacity']+=_0x36807f;else!_0xd3f277&&this[_0x48df81(0x98a)]>0x0&&(this['contentsOpacity']-=_0x36807f,this['x']+=_0x518536[_0x48df81(0x37a)]||0x0,this['y']+=_0x518536[_0x48df81(0x9fa)]||0x0);},Window_DamageCounter[_0x46c6a8(0x669)][_0x46c6a8(0x2a3)]=function(){const _0x2fa795=_0x46c6a8,_0x30e33e=Window_DamageCounter[_0x2fa795(0x671)];if(this[_0x2fa795(0xc66)]>=_0x30e33e['minimumHits'])return!![];if(this[_0x2fa795(0x4bf)]-->0x0)return!![];return![];},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0xa06)]=Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x680)],Game_Action[_0x46c6a8(0x669)][_0x46c6a8(0x680)]=function(_0x3c3694,_0x555122){const _0x27de10=_0x46c6a8;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x555122),VisuMZ[_0x27de10(0xa74)][_0x27de10(0xa06)][_0x27de10(0x515)](this,_0x3c3694,_0x555122);},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x576)]=BattleManager[_0x46c6a8(0x1c2)],BattleManager[_0x46c6a8(0x1c2)]=function(){const _0x3d1b28=_0x46c6a8;$comboWindowReset(),VisuMZ[_0x3d1b28(0xa74)][_0x3d1b28(0x576)]['call'](this);},Window_DamageCounter[_0x46c6a8(0x669)][_0x46c6a8(0x233)]=function(){const _0x5ef9ae=_0x46c6a8;this['contents'][_0x5ef9ae(0x518)](),this[_0x5ef9ae(0x4fb)](),this['x']=this[_0x5ef9ae(0x445)],this['y']=this[_0x5ef9ae(0x28d)];},Window_DamageCounter[_0x46c6a8(0x669)][_0x46c6a8(0x171)]=function(){const _0x4bdc95=_0x46c6a8,_0x5ea846=Window_DamageCounter[_0x4bdc95(0x671)];return _0x5ea846[_0x4bdc95(0x868)]||'left';},Window_DamageCounter[_0x46c6a8(0x669)][_0x46c6a8(0x51b)]=function(){const _0x426d61=_0x46c6a8,_0x54a93d=Window_DamageCounter[_0x426d61(0x671)];let _0x3b7536=this[_0x426d61(0xaa2)]>=0x0?_0x54a93d[_0x426d61(0x747)]:_0x54a93d[_0x426d61(0x958)];return _0x3b7536['format'](Math[_0x426d61(0xc59)](Math[_0x426d61(0x182)](this['_totalHits'])));},Window_DamageCounter[_0x46c6a8(0x669)][_0x46c6a8(0x8bd)]=function(){const _0x559e31=_0x46c6a8,_0x546ec1=Window_DamageCounter[_0x559e31(0x671)];let _0x52e0c1=this[_0x559e31(0xaa2)]>=0x0?_0x546ec1[_0x559e31(0xb25)]:_0x546ec1[_0x559e31(0x37b)];return _0x52e0c1[_0x559e31(0x1ba)](Math[_0x559e31(0xc59)](Math[_0x559e31(0xa5e)](this[_0x559e31(0xaa2)])));},Window_DamageCounter[_0x46c6a8(0x669)][_0x46c6a8(0x4fb)]=function(){const _0x371127=_0x46c6a8;if(VisuMZ['BattleCore'][_0x371127(0x154)]['ComboWindow'][_0x371127(0x6fc)])return VisuMZ[_0x371127(0xa74)][_0x371127(0x154)]['ComboWindow'][_0x371127(0x6fc)][_0x371127(0x515)](this);let _0xc77f6e=0x0,_0xbac6fa=0x0;const _0x262051=this[_0x371127(0x51b)](),_0x581ae1=this[_0x371127(0xa0c)](_0x262051);if(this[_0x371127(0x171)]()==='right')_0xc77f6e=this['innerWidth']-this[_0x371127(0x22d)]()-_0x581ae1[_0x371127(0x1e1)];else this['textAlignment']()===_0x371127(0x2bb)?_0xc77f6e=Math[_0x371127(0x2f2)]((this[_0x371127(0x158)]-_0x581ae1[_0x371127(0x1e1)])/0x2):_0xc77f6e=this['itemPadding']();this[_0x371127(0x38c)](_0x262051,_0xc77f6e,_0xbac6fa),_0xbac6fa+=Math['ceil'](this['lineHeight']()*0x2/0x3);const _0x4e9705=this['damageText'](),_0x2d4dff=this['textSizeEx'](_0x4e9705);if(this[_0x371127(0x171)]()===_0x371127(0x46f))_0xc77f6e=this[_0x371127(0x158)]-this['itemPadding']()-_0x2d4dff[_0x371127(0x1e1)];else this['textAlignment']()===_0x371127(0x2bb)?_0xc77f6e=Math[_0x371127(0x2f2)]((this[_0x371127(0x158)]-_0x2d4dff[_0x371127(0x1e1)])/0x2):_0xc77f6e=this['itemPadding']();this[_0x371127(0x38c)](_0x4e9705,_0xc77f6e,_0xbac6fa);};function Window_InBattleStatus(){this['initialize'](...arguments);}Window_InBattleStatus[_0x46c6a8(0x669)]=Object[_0x46c6a8(0x4c2)](Window_StatusBase[_0x46c6a8(0x669)]),Window_InBattleStatus['prototype'][_0x46c6a8(0x2cf)]=Window_InBattleStatus,Window_InBattleStatus[_0x46c6a8(0x671)]={'bgType':VisuMZ['BattleCore']['Settings'][_0x46c6a8(0x305)]['StatusWindow_BgType']??0x0,'statusGraphic':VisuMZ[_0x46c6a8(0xa74)]['Settings'][_0x46c6a8(0x305)][_0x46c6a8(0x6dd)]??_0x46c6a8(0x3a3),'statusHelpDesc':VisuMZ['BattleCore'][_0x46c6a8(0x154)][_0x46c6a8(0x305)][_0x46c6a8(0x4a6)]??'View\x20battle\x20member\x20status.','pageButtons':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)]['InBattleStatus'][_0x46c6a8(0x7d4)]??!![],'pageButtonPosition':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)]['InBattleStatus'][_0x46c6a8(0x692)]??_0x46c6a8(0x1ef),'pageOffsetX':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x305)][_0x46c6a8(0x4e4)]??0x0,'pageOffsetY':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x305)]['pageOffsetY']??0x0,'buffValueFmt':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x305)][_0x46c6a8(0xaeb)]??_0x46c6a8(0x937),'debuffValueFmt':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x305)][_0x46c6a8(0xba7)]??_0x46c6a8(0x7c5),'enemyStatus':VisuMZ['BattleCore'][_0x46c6a8(0x154)][_0x46c6a8(0x305)][_0x46c6a8(0x40d)]??!![],'enemyShowLevel':VisuMZ['BattleCore']['Settings'][_0x46c6a8(0x305)][_0x46c6a8(0xba1)]??!![],'enemyHpGaugeRate':!![],'enemyMpGaugeRate':!![],'enemyTpGaugeRate':!![],'enemyHiddenParameter':VisuMZ[_0x46c6a8(0xa74)]['Settings'][_0x46c6a8(0x305)]['enemyHiddenParameter']??_0x46c6a8(0x6f2),'enemyShowParametersAlways':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x305)][_0x46c6a8(0x91b)]??![],'enemyShowParametersIfBattleTest':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x305)]['enemyShowParametersIfBattleTest']??!![],'enemyShowParametersIfDefeated':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)]['InBattleStatus'][_0x46c6a8(0x480)]??!![]},Window_InBattleStatus[_0x46c6a8(0x669)]['initialize']=function(_0x23a1a3){const _0x1b1d9a=_0x46c6a8;Window_StatusBase[_0x1b1d9a(0x669)][_0x1b1d9a(0x82c)][_0x1b1d9a(0x515)](this,_0x23a1a3),this[_0x1b1d9a(0x7d7)](Window_InBattleStatus[_0x1b1d9a(0x671)][_0x1b1d9a(0x33e)]),this[_0x1b1d9a(0x288)](),this[_0x1b1d9a(0x904)](),this[_0x1b1d9a(0x4b6)]();},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x585)]=function(_0x227b77){const _0x4f82a6=_0x46c6a8;this[_0x4f82a6(0xa4d)]=_0x227b77,this['refresh'](),this[_0x4f82a6(0x132)]&&this['_statesWindow'][_0x4f82a6(0x585)](_0x227b77);},Window_InBattleStatus[_0x46c6a8(0x669)]['open']=function(){const _0x1700f3=_0x46c6a8;Window_StatusBase['prototype']['open']['call'](this);if(this[_0x1700f3(0x132)])this['_statesWindow']['open']();this['updatePageButtonVisibility'](),Imported[_0x1700f3(0x91c)]&&SceneManager[_0x1700f3(0x7c3)](null);},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x485)]=function(){const _0x18c4ed=_0x46c6a8;Window_StatusBase['prototype'][_0x18c4ed(0x485)][_0x18c4ed(0x515)](this);if(this['_statesWindow'])this[_0x18c4ed(0x132)][_0x18c4ed(0x485)]();},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0xbf8)]=function(_0x392815){const _0x3d742f=_0x46c6a8;this[_0x3d742f(0x81a)]=_0x392815;},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x618)]=function(){const _0x234756=_0x46c6a8;return this[_0x234756(0x81a)]||SceneManager['_scene'][_0x234756(0x4d5)];},Window_InBattleStatus[_0x46c6a8(0x669)]['loadFaceImages']=function(){const _0xdb0c60=_0x46c6a8;Window_StatusBase[_0xdb0c60(0x669)]['loadFaceImages']['call'](this),this['loadOtherActorImages']();},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x1b3)]=function(){const _0x6cb925=_0x46c6a8;for(const _0x56bb26 of $gameParty[_0x6cb925(0x24a)]()){if(!_0x56bb26)continue;_0x56bb26[_0x6cb925(0x5bc)]()&&ImageManager[_0x6cb925(0xc53)](_0x56bb26[_0x6cb925(0x5bc)]()),_0x56bb26['battlerName']()&&ImageManager[_0x6cb925(0x95e)](_0x56bb26[_0x6cb925(0x4f8)]()),Imported[_0x6cb925(0xc32)]&&_0x56bb26[_0x6cb925(0x65d)]()&&ImageManager[_0x6cb925(0x892)](_0x56bb26[_0x6cb925(0x65d)]());}},Window_InBattleStatus[_0x46c6a8(0x669)]['createEnemySprite']=function(){const _0x3c8050=_0x46c6a8;this[_0x3c8050(0x502)]=new Sprite(),this['_enemySprite'][_0x3c8050(0x2da)]['x']=0.5,this[_0x3c8050(0x502)]['anchor']['y']=0x1,this['addChild'](this[_0x3c8050(0x502)]);},Window_InBattleStatus['prototype'][_0x46c6a8(0x904)]=function(){const _0x3c08fa=_0x46c6a8,_0x277982=this['statesWindowRect'](),_0x520b44=new Window_InBattleStatusStates(_0x277982);this[_0x3c08fa(0xa85)](_0x520b44),_0x520b44[_0x3c08fa(0x3a8)](SceneManager[_0x3c08fa(0x7a7)][_0x3c08fa(0xbc0)]),this[_0x3c08fa(0x132)]=_0x520b44;},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x2eb)]=function(){const _0x198fa6=_0x46c6a8,_0x2e9b6d=Window_InBattleStatusStates['SETTINGS'][_0x198fa6(0x49a)],_0x1bfc5a=Math[_0x198fa6(0x9bd)](_0x2e9b6d,Math[_0x198fa6(0x2f2)](this[_0x198fa6(0x1e1)]/0x2)),_0x3632ea=Graphics[_0x198fa6(0xb13)]>0x44c?this[_0x198fa6(0x1fc)]:this[_0x198fa6(0x1f8)]()*0x4+this[_0x198fa6(0x180)]*0x2,_0x1895e9=this[_0x198fa6(0x1e1)]-_0x1bfc5a,_0x508f76=this[_0x198fa6(0x1fc)]-_0x3632ea;return new Rectangle(_0x1895e9,_0x508f76,_0x1bfc5a,_0x3632ea);},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x4b6)]=function(){const _0x2729ab=_0x46c6a8;if(!ConfigManager[_0x2729ab(0x947)])return;if(!Window_InBattleStatus['SETTINGS']['pageButtons'])return;this[_0x2729ab(0x89c)]=new Sprite_Button(_0x2729ab(0x869)),this[_0x2729ab(0x89c)]['x']=this[_0x2729ab(0x9e2)]()+Window_InBattleStatus[_0x2729ab(0x671)][_0x2729ab(0x4e4)],this[_0x2729ab(0x89c)]['y']=this[_0x2729ab(0x32d)]()+Window_InBattleStatus[_0x2729ab(0x671)]['pageOffsetY'];const _0x4c64f4=this[_0x2729ab(0x89c)]['x']+this[_0x2729ab(0x89c)][_0x2729ab(0x1e1)];this[_0x2729ab(0xc06)]=new Sprite_Button('pagedown'),this[_0x2729ab(0xc06)]['x']=_0x4c64f4+0x4,this[_0x2729ab(0xc06)]['y']=this[_0x2729ab(0x89c)]['y'],this[_0x2729ab(0xa85)](this[_0x2729ab(0x89c)]),this['addChild'](this[_0x2729ab(0xc06)]),this[_0x2729ab(0x89c)]['setClickHandler'](this[_0x2729ab(0x7d8)][_0x2729ab(0x5fa)](this)),this[_0x2729ab(0xc06)]['setClickHandler'](this[_0x2729ab(0x699)][_0x2729ab(0x5fa)](this));},Window_InBattleStatus[_0x46c6a8(0x669)]['pageButtonX']=function(){const _0x4a7c23=_0x46c6a8;if(Graphics[_0x4a7c23(0xb13)]>0x44c&&Graphics[_0x4a7c23(0x187)]>0x2bc){if(Window_InBattleStatus['SETTINGS'][_0x4a7c23(0x692)]==='left'){let _0x49ee49=Math[_0x4a7c23(0x182)]((-this['x']-0x64)/0x2);if(_0x49ee49>=-0x64)_0x49ee49=this['padding'];return _0x49ee49;}else{const _0x3408bd=Graphics[_0x4a7c23(0xb13)]-this['x']-this[_0x4a7c23(0x1e1)];let _0x14660b=Math[_0x4a7c23(0x2f2)]((_0x3408bd-0x64)/0x2)+this[_0x4a7c23(0x1e1)];return _0x14660b;}}else return this[_0x4a7c23(0x1e1)]-0x64-this[_0x4a7c23(0x180)]/0x2;},Window_InBattleStatus[_0x46c6a8(0x669)]['pageButtonY']=function(){const _0x25ee67=_0x46c6a8;return Graphics[_0x25ee67(0xb13)]>0x44c&&Graphics[_0x25ee67(0x187)]>0x2bc?this[_0x25ee67(0x1fc)]-0x30-this['padding']:0x30+this['padding'];},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x7d8)]=function(){const _0x406637=_0x46c6a8;let _0x571f7c=this[_0x406637(0x263)]();if(_0x571f7c['length']<=0x1&&!Window_InBattleStatus[_0x406637(0x671)]['enemyStatus'])return;let _0x520eb0=_0x571f7c[_0x406637(0x3bd)](this['_battler']);_0x520eb0--;_0x520eb0<0x0&&(Window_InBattleStatus[_0x406637(0x671)][_0x406637(0x40d)]&&(_0x571f7c=this[_0x406637(0x263)](!![])),_0x520eb0=_0x571f7c[_0x406637(0x50d)]-0x1);const _0x5a7785=_0x571f7c[_0x520eb0];this['setBattler'](_0x5a7785),SoundManager[_0x406637(0x674)]();},Window_InBattleStatus[_0x46c6a8(0x669)]['nextActor']=function(){const _0x106a3d=_0x46c6a8;let _0xb44ec0=this[_0x106a3d(0x263)]();if(_0xb44ec0[_0x106a3d(0x50d)]<=0x1&&!Window_InBattleStatus[_0x106a3d(0x671)]['enemyStatus'])return;let _0x305508=_0xb44ec0['indexOf'](this[_0x106a3d(0xa4d)]);_0x305508++;_0x305508>=_0xb44ec0['length']&&(Window_InBattleStatus[_0x106a3d(0x671)]['enemyStatus']&&(_0xb44ec0=this[_0x106a3d(0x263)](!![])),_0x305508=0x0);const _0x345176=_0xb44ec0[_0x305508];this[_0x106a3d(0x585)](_0x345176),SoundManager['playCursor']();},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x263)]=function(_0x1b4a36){const _0x51952f=_0x46c6a8;let _0x10cd88=[];const _0x23f449=_0x1b4a36?this[_0x51952f(0xa4d)]['opponentsUnit']():this[_0x51952f(0xa4d)][_0x51952f(0x8a2)]();return _0x23f449===$gameParty?_0x10cd88=$gameParty[_0x51952f(0x198)]():_0x10cd88=$gameTroop['aliveMembers'](),_0x10cd88[_0x51952f(0x45d)](null);},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x50f)]=function(){const _0x274c6f=_0x46c6a8;Window_Base[_0x274c6f(0x669)]['update'][_0x274c6f(0x515)](this),this[_0x274c6f(0x93a)]();},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x93a)]=function(){const _0x1ce480=_0x46c6a8;if(this[_0x1ce480(0x5de)]()){if(this[_0x1ce480(0xb9a)]())return this['processCancel']();if(Input[_0x1ce480(0x35e)](_0x1ce480(0x46f)))return this[_0x1ce480(0x699)]();if(Input['isRepeated'](_0x1ce480(0x1ef)))return this[_0x1ce480(0x7d8)]();}},SoundManager['playCursor']=function(){const _0x204e06=_0x46c6a8;this[_0x204e06(0x405)](0x0);},Window_InBattleStatus[_0x46c6a8(0x669)]['isOpenAndActive']=function(){const _0x10ebd2=_0x46c6a8;return this[_0x10ebd2(0x34e)]()&&this[_0x10ebd2(0x6cb)];},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0xb9a)]=function(){const _0x9542c0=_0x46c6a8;if(Input[_0x9542c0(0x7d6)](_0x9542c0(0xbc1)))return!![];if(TouchInput[_0x9542c0(0x369)]())return!![];return![];},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x99b)]=function(){const _0x314009=_0x46c6a8;SoundManager[_0x314009(0x83d)](),this[_0x314009(0x168)](),this[_0x314009(0x132)]&&(this[_0x314009(0x132)][_0x314009(0x846)](),this['_statesWindow'][_0x314009(0x168)]()),SceneManager['_scene'][_0x314009(0xa22)]();},Window_InBattleStatus['prototype'][_0x46c6a8(0x8cf)]=function(){const _0xf1ce33=_0x46c6a8;if(!this['_pageupButton'])return;if(!this[_0xf1ce33(0xc06)])return;const _0x1125e4=$gameParty[_0xf1ce33(0x198)]()[_0xf1ce33(0x50d)]>0x0||Window_InBattleStatus[_0xf1ce33(0x671)]['enemyStatus'];this[_0xf1ce33(0x89c)]['visible']=_0x1125e4,this[_0xf1ce33(0xc06)][_0xf1ce33(0x6cb)]=_0x1125e4;},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x233)]=function(){const _0x53975f=_0x46c6a8;Window_StatusBase[_0x53975f(0x669)][_0x53975f(0x233)][_0x53975f(0x515)](this);if(this[_0x53975f(0x502)])this[_0x53975f(0x502)][_0x53975f(0x9dd)]();this['contents'][_0x53975f(0x518)](),this[_0x53975f(0xbf0)][_0x53975f(0x518)]();if(!this[_0x53975f(0xa4d)])return;this[_0x53975f(0x665)]();},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x665)]=function(){const _0x49cd57=_0x46c6a8;if(VisuMZ[_0x49cd57(0xa74)][_0x49cd57(0x154)][_0x49cd57(0x305)]['StatusWindow_DrawJS'])return VisuMZ[_0x49cd57(0xa74)][_0x49cd57(0x154)][_0x49cd57(0x305)]['StatusWindow_DrawJS'][_0x49cd57(0x515)](this);{const _0x41bb64=this['colSpacing']()/0x2,_0x2c5d42=ImageManager[_0x49cd57(0xa83)],_0x1f6190=_0x2c5d42/0x2-this[_0x49cd57(0x1f8)]()*1.5;this['drawActorGraphic'](this[_0x49cd57(0xa4d)],_0x41bb64+0x1,0x0,ImageManager[_0x49cd57(0x733)],_0x2c5d42),this[_0x49cd57(0x4c6)](this['_battler'],_0x41bb64+0xb4,_0x1f6190);}{let _0x3915ea=this['drawingAreaWidth'](),_0x477dd1=0x0,_0x1db624=Math[_0x49cd57(0x182)](this[_0x49cd57(0x4aa)]()/0x2),_0x392309=0x0;const _0x4269f0=this[_0x49cd57(0x9e4)]();let _0x58117b=_0x477dd1;const _0x577dcd=this[_0x49cd57(0xae8)]-ImageManager[_0x49cd57(0xa83)],_0x44a184=Math[_0x49cd57(0x182)](_0x4269f0[_0x49cd57(0x50d)]/0x2)*this['lineHeight']();let _0x34986d=Math[_0x49cd57(0x182)]((_0x577dcd-_0x44a184)/0x2)+ImageManager['faceHeight'],_0x196780=Math[_0x49cd57(0x2f2)](_0x3915ea/0x2);this[_0x49cd57(0x132)]['y']!==0x0&&(this[_0x49cd57(0x132)]['y']=_0x34986d);for(const _0x2acfe4 of _0x4269f0){this[_0x49cd57(0x4bd)](_0x58117b,_0x34986d,_0x196780,this['lineHeight']()),this[_0x49cd57(0xc69)](_0x2acfe4,_0x58117b,_0x34986d,_0x196780),_0x392309++,_0x392309%0x2===0x0?(_0x58117b=_0x477dd1,_0x34986d+=this['lineHeight']()):_0x58117b=_0x1db624;}}},Window_InBattleStatus[_0x46c6a8(0x669)]['graphicType']=function(){const _0x18a903=_0x46c6a8;return VisuMZ['BattleCore'][_0x18a903(0x154)]['InBattleStatus'][_0x18a903(0x6dd)];},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x6c1)]=function(_0x100866,_0x3c46c5,_0xa585d2,_0x38976d,_0x589e40){const _0x519e8e=_0x46c6a8;if(_0x100866['isActor']())switch(this[_0x519e8e(0x718)]()){case _0x519e8e(0x82d):break;case'sprite':this[_0x519e8e(0x532)](_0x100866,_0x3c46c5,_0xa585d2+0x1,_0x38976d,_0x589e40-0x2);break;case _0x519e8e(0x61f):this[_0x519e8e(0xc10)](_0x100866,_0x3c46c5,_0xa585d2+0x1,_0x38976d,_0x589e40-0x2);break;default:this[_0x519e8e(0x418)](_0x100866,_0x3c46c5,_0xa585d2,_0x38976d,_0x589e40);break;}else this[_0x519e8e(0x72f)](_0x100866,_0x3c46c5,_0xa585d2,_0x38976d,_0x589e40);},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x418)]=function(_0x4dd86b,_0x2f4ed6,_0x1c2f18,_0x1f2d49,_0x1f915f){const _0x29c804=_0x46c6a8;_0x1f2d49=_0x1f2d49||ImageManager[_0x29c804(0x733)],_0x1f915f=_0x1f915f||ImageManager[_0x29c804(0xa83)];const _0x12cc58=ImageManager[_0x29c804(0x733)],_0x31badb=_0x1f915f-0x2,_0x423677=_0x2f4ed6+Math['floor']((_0x1f2d49-_0x12cc58)/0x2);this['constructor']===Window_MenuStatus&&this[_0x29c804(0x57b)](_0x4dd86b[_0x29c804(0x4f2)]()),this['drawActorFace'](_0x4dd86b,_0x423677,_0x1c2f18,_0x12cc58,_0x31badb),this[_0x29c804(0x57b)](!![]);},Window_InBattleStatus[_0x46c6a8(0x669)]['drawItemActorSprite']=function(_0x265549,_0x50f651,_0x3c27a2,_0x157f39,_0x9ab322){const _0x19f34e=_0x46c6a8;_0x157f39=_0x157f39||ImageManager[_0x19f34e(0x733)],_0x9ab322=_0x9ab322||ImageManager[_0x19f34e(0xa83)];const _0x43bb67=_0x265549[_0x19f34e(0x5bc)](),_0x43a833=_0x265549['characterIndex'](),_0xba8b40=ImageManager[_0x19f34e(0xc53)](_0x43bb67),_0x11b8c6=ImageManager[_0x19f34e(0x7fc)](_0x43bb67),_0x46878e=_0xba8b40[_0x19f34e(0x1e1)]/(_0x11b8c6?0x3:0xc),_0x2880b=_0xba8b40['height']/(_0x11b8c6?0x4:0x8),_0x201bf3=_0x157f39,_0x4ceb2e=_0x9ab322-0x2,_0x342fe0=_0x50f651+Math[_0x19f34e(0x2f2)](_0x201bf3/0x2),_0x18af5a=_0x3c27a2+Math[_0x19f34e(0x182)]((_0x9ab322+_0x2880b)/0x2);this['constructor']===Window_MenuStatus&&this['changePaintOpacity'](_0x265549['isBattleMember']());const _0x3aab8e=Math[_0x19f34e(0x9bd)](_0x157f39,_0x46878e),_0x5ced0c=Math['min'](_0x9ab322,_0x2880b),_0x28ee10=Math[_0x19f34e(0x2f2)](_0x50f651+Math[_0x19f34e(0x968)](_0x157f39-_0x46878e,0x0)/0x2),_0x55b995=Math[_0x19f34e(0x2f2)](_0x3c27a2+Math[_0x19f34e(0x968)](_0x9ab322-_0x2880b,0x0)/0x2),_0x29a919=_0x11b8c6?0x0:_0x43a833,_0x1660ae=(_0x29a919%0x4*0x3+0x1)*_0x46878e,_0x19d47f=Math[_0x19f34e(0x2f2)](_0x29a919/0x4)*0x4*_0x2880b;this[_0x19f34e(0x15c)][_0x19f34e(0x4a7)](_0xba8b40,_0x1660ae,_0x19d47f,_0x3aab8e,_0x5ced0c,_0x28ee10,_0x55b995),this['changePaintOpacity'](!![]);},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0xc10)]=function(_0x41cf54,_0x34c3fc,_0x5d5935,_0x293add,_0x106144,_0x2b6e01){const _0x78fbcc=_0x46c6a8;_0x293add=_0x293add||ImageManager['faceWidth'],_0x106144=_0x106144||ImageManager[_0x78fbcc(0xa83)];const _0x255a47=ImageManager['loadSvActor'](_0x2b6e01?_0x41cf54[_0x78fbcc(0x295)]():_0x41cf54[_0x78fbcc(0x4f8)]()),_0x4336ec=_0x255a47['width']/ImageManager[_0x78fbcc(0x42f)],_0x3338fe=_0x255a47[_0x78fbcc(0x1fc)]/ImageManager[_0x78fbcc(0x99f)],_0x5240a8=_0x293add,_0x3a75c8=_0x106144-0x2,_0x535718=_0x34c3fc+Math['floor'](_0x5240a8/0x2),_0x3bbee2=_0x5d5935+Math[_0x78fbcc(0x182)]((_0x106144+_0x3338fe)/0x2);this[_0x78fbcc(0x2cf)]===Window_MenuStatus&&this[_0x78fbcc(0x57b)](_0x41cf54[_0x78fbcc(0x4f2)]());const _0x1340b6=_0x41cf54[_0x78fbcc(0xa4b)]&&_0x41cf54[_0x78fbcc(0xa4b)](),_0x353bbc=0x0,_0x36564a=0x0,_0x11771d=_0x1340b6?_0x255a47[_0x78fbcc(0x1e1)]:_0x4336ec,_0xdc78e4=_0x1340b6?_0x255a47['height']:_0x3338fe,_0x540beb=Math[_0x78fbcc(0x9bd)](0x1,_0x293add/_0x11771d,_0x106144/_0xdc78e4),_0x30e93d=_0x540beb*_0x11771d,_0x3c3ed1=_0x540beb*_0xdc78e4,_0x2ec505=Math[_0x78fbcc(0x2f2)](_0x34c3fc+Math[_0x78fbcc(0x968)](_0x293add-_0x30e93d,0x0)/0x2),_0xfadeff=Math['floor'](_0x5d5935+Math[_0x78fbcc(0x968)](_0x106144-_0x3c3ed1,0x0)/0x2);this[_0x78fbcc(0x15c)][_0x78fbcc(0x4a7)](_0x255a47,_0x353bbc,_0x36564a,_0x11771d,_0xdc78e4,_0x2ec505,_0xfadeff,_0x30e93d,_0x3c3ed1),this[_0x78fbcc(0x57b)](!![]);},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x72f)]=function(_0x3c6a80,_0x37d185,_0x52318d,_0x3db7cb,_0x360e3d){const _0x431522=_0x46c6a8;if(_0x3c6a80[_0x431522(0x548)]()){this[_0x431522(0xc10)](_0x3c6a80,_0x37d185,_0x52318d+0x1,_0x3db7cb,_0x360e3d-0x2,!![]);return;}const _0x59bd78=_0x3c6a80[_0x431522(0x4f8)](),_0x17b43c=$gameSystem[_0x431522(0x33c)]()?ImageManager[_0x431522(0x173)](_0x59bd78):ImageManager[_0x431522(0x9b6)](_0x59bd78);_0x17b43c[_0x431522(0xb7c)](this[_0x431522(0x85a)][_0x431522(0x5fa)](this,_0x3c6a80,_0x17b43c,_0x37d185,_0x52318d,_0x3db7cb,_0x360e3d));},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x85a)]=function(_0x32e82b,_0x51d6a5,_0x27f616,_0x5353df,_0x28c0a6,_0x2e86af){const _0x35591e=_0x46c6a8;if(this[_0x35591e(0xa4d)]!==_0x32e82b)return;this[_0x35591e(0x502)][_0x35591e(0xab7)](),this[_0x35591e(0x502)][_0x35591e(0x64c)]=new Bitmap(_0x28c0a6,_0x2e86af);const _0x1360ea=_0x28c0a6,_0x12a8de=_0x2e86af,_0x333fa3=Math[_0x35591e(0x9bd)](_0x1360ea,_0x12a8de),_0x54b5a0=this[_0x35591e(0x502)][_0x35591e(0x64c)],_0x2494c8=Math[_0x35591e(0x9bd)](0x1,_0x333fa3/_0x51d6a5[_0x35591e(0x1e1)],_0x333fa3/_0x51d6a5['height']),_0x11cf37=_0x51d6a5[_0x35591e(0x1e1)]*_0x2494c8,_0x15f285=_0x51d6a5[_0x35591e(0x1fc)]*_0x2494c8,_0x4fd346=Math[_0x35591e(0xa5e)]((_0x1360ea-_0x11cf37)/0x2),_0x5e2330=Math['round']((_0x12a8de-_0x15f285)/0x2);_0x54b5a0[_0x35591e(0x4a7)](_0x51d6a5,0x0,0x0,_0x51d6a5['width'],_0x51d6a5[_0x35591e(0x1fc)],_0x4fd346,_0x5e2330,_0x11cf37,_0x15f285),this[_0x35591e(0x502)][_0x35591e(0x2da)]['x']=0.5,this[_0x35591e(0x502)][_0x35591e(0x2da)]['y']=0x1,this[_0x35591e(0x502)]['x']=_0x27f616+_0x28c0a6/0x2+this['padding'],this[_0x35591e(0x502)]['y']=_0x5353df+_0x2e86af+this[_0x35591e(0x180)],this[_0x35591e(0x502)][_0x35591e(0x3ad)](this[_0x35591e(0xa4d)][_0x35591e(0x30e)]());},Window_InBattleStatus['prototype']['drawActorName']=function(_0x1dd593,_0x3b8465,_0x4e769b,_0x4039f8){const _0x5308b3=_0x46c6a8;if(_0x1dd593[_0x5308b3(0x8de)]())_0x4039f8=this['innerWidth']-_0x3b8465;Window_StatusBase[_0x5308b3(0x669)][_0x5308b3(0xa47)][_0x5308b3(0x515)](this,_0x1dd593,_0x3b8465,_0x4e769b,_0x4039f8);},Window_InBattleStatus[_0x46c6a8(0x669)]['drawActorClass']=function(_0x58cc30,_0x3882dc,_0x46c152,_0x17c3a4){const _0x4e086d=_0x46c6a8;if(!_0x58cc30[_0x4e086d(0x4ec)]())return;Window_StatusBase[_0x4e086d(0x669)]['drawActorClass'][_0x4e086d(0x515)](this,_0x58cc30,_0x3882dc,_0x46c152,_0x17c3a4);},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x46a)]=function(_0x254deb,_0xdd4cbd,_0x40d69f){const _0x4ca5a8=_0x46c6a8;if(_0x254deb[_0x4ca5a8(0x8de)]()&&!Window_InBattleStatus[_0x4ca5a8(0x671)][_0x4ca5a8(0xba1)])return;Window_StatusBase[_0x4ca5a8(0x669)][_0x4ca5a8(0x46a)]['call'](this,_0x254deb,_0xdd4cbd,_0x40d69f);},Window_InBattleStatus['prototype'][_0x46c6a8(0x69e)]=function(_0x5d4439,_0x550d62,_0x1de193,_0x1c7c52){const _0x149d9d=_0x46c6a8;_0x5d4439['_hideAllIcons']=!![],Window_StatusBase['prototype']['drawActorIcons'][_0x149d9d(0x515)](this,_0x5d4439,_0x550d62,_0x1de193,_0x1c7c52),_0x5d4439[_0x149d9d(0x9a9)]=undefined;},VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x3cb)]=Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x85b)],Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0x85b)]=function(){const _0x5142d7=_0x46c6a8;if(this[_0x5142d7(0x9a9)])return[];return VisuMZ[_0x5142d7(0xa74)][_0x5142d7(0x3cb)][_0x5142d7(0x515)](this);},Window_InBattleStatus[_0x46c6a8(0x669)]['placeGauge']=function(_0x553a08,_0xf3171f,_0x12f213,_0x11c325){const _0x5a3ff9=_0x46c6a8,_0x425ee3=_0x5a3ff9(0x3cd)[_0x5a3ff9(0x1ba)](_0x553a08[_0x5a3ff9(0xb12)](),_0xf3171f);let _0x2d124d=![];if(_0x553a08[_0x5a3ff9(0x8de)]()){const _0x581934=Window_InBattleStatus[_0x5a3ff9(0x671)];if(_0xf3171f==='hp'&&_0x581934[_0x5a3ff9(0x466)])_0x2d124d=!![];if(_0xf3171f==='mp'&&_0x581934[_0x5a3ff9(0x458)])_0x2d124d=!![];if(_0xf3171f==='tp'&&_0x581934[_0x5a3ff9(0xb24)])_0x2d124d=!![];}const _0x2939d4=this[_0x5a3ff9(0xadb)](_0x425ee3,_0x2d124d?Sprite_GaugeRate:Sprite_Gauge);_0x2939d4[_0x5a3ff9(0x208)](_0x553a08,_0xf3171f),_0x2939d4[_0x5a3ff9(0x8d8)](_0x12f213,_0x11c325),_0x2939d4[_0x5a3ff9(0xab7)]();},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x4aa)]=function(){const _0x13d664=_0x46c6a8,_0x135be2=this['_statesWindow']?this[_0x13d664(0x132)]['width']:0x0;return this[_0x13d664(0x158)]-_0x135be2+this['padding']*0x2;},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x9e4)]=function(){const _0x37524b=_0x46c6a8;return Imported[_0x37524b(0x12b)]?VisuMZ[_0x37524b(0x316)]['Settings'][_0x37524b(0x2c8)][_0x37524b(0xc3b)]:[_0x37524b(0x88b),_0x37524b(0x4cd),_0x37524b(0xb78),_0x37524b(0xae1),_0x37524b(0x37d),'MDF','AGI',_0x37524b(0x6e1)];},Window_InBattleStatus[_0x46c6a8(0x669)]['drawParamData']=function(_0x55cae3,_0x3de06c,_0x598fdb,_0x30cd68){const _0x3613a2=_0x46c6a8,_0x339b8e=Window_InBattleStatus[_0x3613a2(0x671)],_0x4ee88d=Imported[_0x3613a2(0x12b)];this[_0x3613a2(0x74a)]();let _0x5f3833='',_0x4706d8=0x0,_0x4c2bce=[_0x3613a2(0x899),_0x3613a2(0x912),'ATK','DEF',_0x3613a2(0x37d),_0x3613a2(0xc4c),_0x3613a2(0x97a),'LUK']['indexOf'](String(_0x55cae3)[_0x3613a2(0x85e)]()[_0x3613a2(0xa28)]());if(_0x4ee88d)_0x5f3833=TextManager['paramName'](_0x55cae3),_0x4706d8=VisuMZ[_0x3613a2(0xbb8)](_0x55cae3);else{if(_0x4c2bce>=0x0&&_0x4c2bce<0x8)_0x5f3833=TextManager['param'](_0x4c2bce);}if(_0x4c2bce>=0x0&&_0x4c2bce<0x8){const _0x2f89c8=this[_0x3613a2(0xa4d)]['_buffs'][_0x4c2bce];this['_battler']['buffIconIndex'](_0x2f89c8,_0x4c2bce)!==0x0&&(_0x4706d8=this[_0x3613a2(0xa4d)][_0x3613a2(0x8d9)](_0x2f89c8,_0x4c2bce));}if(_0x5f3833){let _0x49591f=_0x3613a2(0x429)[_0x3613a2(0x1ba)](_0x5f3833,_0x4706d8);_0x30cd68<=0xd4&&(_0x49591f='\x5cC[16]%1\x5cC[0]'[_0x3613a2(0x1ba)](_0x5f3833));const _0x5ef02d=_0x30cd68<=0xd4?'\x20':'\x20\x20';this[_0x3613a2(0x38c)](_0x5ef02d+_0x49591f,_0x3de06c,_0x598fdb);}this[_0x3613a2(0x6ef)]();let _0x217bca='';_0x4ee88d?_0x217bca=this[_0x3613a2(0xa4d)][_0x3613a2(0x419)](_0x55cae3,!![]):_0x217bca=String(this[_0x3613a2(0xa4d)][_0x3613a2(0x4c3)](_0x4c2bce));if(this['_battler']['isEnemy']()){let _0x2b6ca8=!![];if(_0x339b8e['enemyShowParametersAlways'])_0x2b6ca8=![];if(_0x339b8e[_0x3613a2(0xb19)]&&BattleManager['isBattleTest']())_0x2b6ca8=![];if(_0x339b8e[_0x3613a2(0x480)]&&$gameSystem[_0x3613a2(0x5b3)]()[_0x3613a2(0x4a3)](this[_0x3613a2(0xa4d)][_0x3613a2(0xa4f)]()))_0x2b6ca8=![];_0x2b6ca8&&(_0x217bca=_0x339b8e[_0x3613a2(0x8ca)]);}if(_0x4c2bce>=0x0&&_0x4c2bce<0x8){if(this[_0x3613a2(0xa4d)][_0x3613a2(0xc0b)](_0x4c2bce)>0x1)_0x217bca=_0x339b8e[_0x3613a2(0xaeb)][_0x3613a2(0x1ba)](_0x217bca),Imported[_0x3613a2(0xabd)]?this[_0x3613a2(0x202)](ColorManager['buffColor']()):this[_0x3613a2(0x202)](ColorManager['powerUpColor']());else this[_0x3613a2(0xa4d)]['getParamBuffAndStateRate'](_0x4c2bce)<0x1&&(_0x217bca=_0x339b8e[_0x3613a2(0xba7)][_0x3613a2(0x1ba)](_0x217bca),Imported[_0x3613a2(0xabd)]?this[_0x3613a2(0x202)](ColorManager[_0x3613a2(0xbcb)]()):this[_0x3613a2(0x202)](ColorManager[_0x3613a2(0x70c)]()));}if(String(_0x217bca)){const _0x4bece9=_0x30cd68<=0xd4?'\x20':'\x20\x20';this['drawText'](_0x217bca+_0x4bece9,_0x3de06c,_0x598fdb,_0x30cd68,_0x3613a2(0x46f));}},Window_InBattleStatus[_0x46c6a8(0x669)][_0x46c6a8(0x4bd)]=function(_0x5c3550,_0x5ed3f2,_0x1cef2f,_0x366d0a){const _0xfb7576=_0x46c6a8;_0x366d0a=_0x366d0a||this[_0xfb7576(0x1f8)](),this[_0xfb7576(0xbf0)][_0xfb7576(0xc54)]=0xa0;const _0x28942b=ColorManager[_0xfb7576(0x1c9)]();this[_0xfb7576(0xbf0)][_0xfb7576(0x86a)](_0x5c3550+0x1,_0x5ed3f2+0x1,_0x1cef2f-0x2,_0x366d0a-0x2,_0x28942b),this[_0xfb7576(0xbf0)][_0xfb7576(0xc54)]=0xff;},Game_BattlerBase[_0x46c6a8(0x669)][_0x46c6a8(0xc0b)]=function(_0x41b6c4){const _0x4b35f2=_0x46c6a8;let _0x6d9c7e=0x1;_0x6d9c7e*=this[_0x4b35f2(0x4a8)](_0x41b6c4);for(const _0x9e1bc2 of this[_0x4b35f2(0x1b2)]()){if(!_0x9e1bc2)continue;for(const _0x9283e6 of _0x9e1bc2[_0x4b35f2(0x9cd)]){if(!_0x9283e6)continue;if(_0x9283e6[_0x4b35f2(0xb27)]!==Game_BattlerBase[_0x4b35f2(0x40f)])continue;if(_0x9283e6['dataId']!==_0x41b6c4)continue;_0x6d9c7e*=_0x9283e6[_0x4b35f2(0x6ea)];}}return _0x6d9c7e;};function Window_InBattleStatusStates(){const _0x23970c=_0x46c6a8;this[_0x23970c(0x82c)](...arguments);}Window_InBattleStatusStates[_0x46c6a8(0x669)]=Object[_0x46c6a8(0x4c2)](Window_Command[_0x46c6a8(0x669)]),Window_InBattleStatusStates[_0x46c6a8(0x669)][_0x46c6a8(0x2cf)]=Window_InBattleStatusStates,Window_InBattleStatusStates[_0x46c6a8(0x671)]={'maxWidth':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)]['InBattleStatus']['statesMaxWidth']??0x180,'drawStates':VisuMZ['BattleCore']['Settings']['InBattleStatus']['drawStates']??!![],'drawBuffs':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)]['InBattleStatus'][_0x46c6a8(0x84d)]??!![],'drawDebuffs':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)]['InBattleStatus'][_0x46c6a8(0x72b)]??!![],'normalIcon':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x305)][_0x46c6a8(0x9d8)]??0x54,'normalText':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x305)][_0x46c6a8(0xb2a)]??_0x46c6a8(0x9e5),'normalHelp':VisuMZ[_0x46c6a8(0xa74)]['Settings'][_0x46c6a8(0x305)][_0x46c6a8(0x5b7)]??_0x46c6a8(0x818),'stateHelpFmt':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)]['InBattleStatus'][_0x46c6a8(0xbeb)]??_0x46c6a8(0x7cf),'buffNameFmt':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x305)][_0x46c6a8(0x39f)]??_0x46c6a8(0x228),'buffHelpFmt':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)]['InBattleStatus'][_0x46c6a8(0xc58)]??_0x46c6a8(0x87c),'debuffNameFmt':VisuMZ['BattleCore'][_0x46c6a8(0x154)][_0x46c6a8(0x305)][_0x46c6a8(0x39a)]??_0x46c6a8(0xbdb),'debuffHelpFmt':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x305)][_0x46c6a8(0x51e)]??_0x46c6a8(0x16d),'actionsFmt':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)]['InBattleStatus'][_0x46c6a8(0x2f5)]??_0x46c6a8(0x48a),'turnsFmt':VisuMZ['BattleCore']['Settings']['InBattleStatus']['TurnsFmt']??_0x46c6a8(0x5aa),'passiveText':VisuMZ[_0x46c6a8(0xa74)][_0x46c6a8(0x154)][_0x46c6a8(0x305)][_0x46c6a8(0x9ef)]??_0x46c6a8(0xb95)},Window_InBattleStatusStates[_0x46c6a8(0x669)][_0x46c6a8(0x82c)]=function(_0x3a1bd7){const _0x342e50=_0x46c6a8;this['_battler']=null,Window_Command[_0x342e50(0x669)][_0x342e50(0x82c)][_0x342e50(0x515)](this,_0x3a1bd7),this['deactivate'](),this['deselect'](),this[_0x342e50(0x7d7)](0x2);},Window_InBattleStatusStates[_0x46c6a8(0x669)][_0x46c6a8(0x585)]=function(_0x4906cd){const _0x211c4b=_0x46c6a8;this[_0x211c4b(0xa4d)]=_0x4906cd||null,this[_0x211c4b(0x233)](),this[_0x211c4b(0x114)](0x0),this['scrollTo'](0x0,0x0),this[_0x211c4b(0xbf7)]();},Window_InBattleStatusStates[_0x46c6a8(0x669)][_0x46c6a8(0x271)]=function(){},Window_InBattleStatusStates[_0x46c6a8(0x669)][_0x46c6a8(0x749)]=function(){const _0x1b2ea8=_0x46c6a8;if(!this[_0x1b2ea8(0xa4d)])return;this['addBattlerAspect'](),this[_0x1b2ea8(0x2c2)](),this[_0x1b2ea8(0x4fc)](),this['addNormalStatus']();},Window_InBattleStatusStates['prototype'][_0x46c6a8(0xa24)]=function(){const _0x507d94=_0x46c6a8;if(!this[_0x507d94(0xa4d)]['isEnemy']())return;if(!this[_0x507d94(0xa4d)]['hasAspectData']())return;const _0x3a25f2=this[_0x507d94(0xa4d)][_0x507d94(0x7f6)]()[_0x507d94(0x106)],_0x222810=this[_0x507d94(0xa4d)][_0x507d94(0x7f6)]()[_0x507d94(0x9ad)],_0x335afe=this[_0x507d94(0xa4d)][_0x507d94(0x7f6)]()[_0x507d94(0x3cc)];let _0xb4ed10='';_0x335afe[_0x507d94(0x712)](/#(.*?)/gi)&&Imported['VisuMZ_1_MessageCore']?_0xb4ed10='\x5cI[%1]\x5cHEXCOLOR<%3>%2'[_0x507d94(0x1ba)](_0x222810,_0x3a25f2,_0x335afe):_0xb4ed10=_0x507d94(0x570)[_0x507d94(0x1ba)](_0x222810,_0x3a25f2,_0x335afe),this[_0x507d94(0x241)](_0xb4ed10,_0x507d94(0x4bc),!![]);},Window_InBattleStatusStates[_0x46c6a8(0x669)][_0x46c6a8(0x2c2)]=function(){const _0x1b0d3b=_0x46c6a8;if(!Window_InBattleStatusStates[_0x1b0d3b(0x671)][_0x1b0d3b(0x439)])return;for(const _0x30fcde of this[_0x1b0d3b(0xa4d)][_0x1b0d3b(0x1b2)]()){if(!this['includeState'](_0x30fcde))continue;const _0x75b513=this['makeStateName'](_0x30fcde);this[_0x1b0d3b(0x241)](_0x75b513,'state',!![],_0x30fcde['id']);}},Window_InBattleStatusStates[_0x46c6a8(0x669)][_0x46c6a8(0x306)]=function(_0x4669ca){const _0x4dc6af=_0x46c6a8;if(!_0x4669ca)return![];if(_0x4669ca[_0x4dc6af(0x106)][_0x4dc6af(0xa28)]()==='')return![];if(_0x4669ca['name'][_0x4dc6af(0x4a3)](_0x4dc6af(0x49d)))return![];if(_0x4669ca[_0x4dc6af(0x9ad)]<=0x0)return![];if(_0x4669ca[_0x4dc6af(0xa9d)])return![];return!![];},Window_InBattleStatusStates['prototype'][_0x46c6a8(0x279)]=function(_0x514fbe){const _0x20d36b=_0x46c6a8;let _0x2fa5c7=_0x514fbe[_0x20d36b(0x9ad)],_0x416c4f=_0x514fbe[_0x20d36b(0x106)],_0x15664e='0';return Imported[_0x20d36b(0xabd)]&&Imported[_0x20d36b(0x33d)]&&(_0x15664e=String(ColorManager[_0x20d36b(0x8e1)](_0x514fbe))),_0x15664e[_0x20d36b(0x712)](/#(.*?)/gi)?_0x20d36b(0x858)['format'](_0x2fa5c7,_0x416c4f,_0x15664e):_0x20d36b(0x570)[_0x20d36b(0x1ba)](_0x2fa5c7,_0x416c4f,_0x15664e);},Window_InBattleStatusStates[_0x46c6a8(0x669)][_0x46c6a8(0x4fc)]=function(){const _0x2bdfe0=_0x46c6a8;for(let _0x2b3152=0x0;_0x2b3152<0x8;_0x2b3152++){const _0x4e7416=this[_0x2bdfe0(0x9cb)](_0x2b3152);if(!_0x4e7416)continue;this[_0x2bdfe0(0x241)](_0x4e7416,_0x2bdfe0(0x907),!![],_0x2b3152);}},Window_InBattleStatusStates[_0x46c6a8(0x669)][_0x46c6a8(0x9cb)]=function(_0x53d3f7){const _0x3fa742=_0x46c6a8;if(!this[_0x3fa742(0xa4d)][_0x3fa742(0x5a1)](_0x53d3f7)&&!this[_0x3fa742(0xa4d)][_0x3fa742(0x178)](_0x53d3f7))return'';const _0x5b6130=Window_InBattleStatusStates[_0x3fa742(0x671)];if(this[_0x3fa742(0xa4d)][_0x3fa742(0x5a1)](_0x53d3f7)&&!_0x5b6130[_0x3fa742(0x84d)])return'';if(this[_0x3fa742(0xa4d)][_0x3fa742(0x178)](_0x53d3f7)&&!_0x5b6130['drawDebuffs'])return'';const _0x2636cc=this[_0x3fa742(0xa4d)][_0x3fa742(0x71f)][_0x53d3f7];let _0x4498eb=this[_0x3fa742(0xa4d)]['buffIconIndex'](_0x2636cc,_0x53d3f7),_0x4a44e3=TextManager[_0x3fa742(0x4c3)](_0x53d3f7);_0x2636cc>0x0?_0x4a44e3=_0x5b6130[_0x3fa742(0x39f)][_0x3fa742(0x1ba)](_0x4a44e3):_0x4a44e3=_0x5b6130[_0x3fa742(0x39a)][_0x3fa742(0x1ba)](_0x4a44e3);let _0x2d09b4=0x0;return Imported[_0x3fa742(0xabd)]&&(_0x2d09b4=_0x2636cc>0x0?ColorManager['buffColor']():ColorManager['debuffColor']()),String(_0x2d09b4)[_0x3fa742(0x712)](/#(.*?)/gi)?_0x3fa742(0x858)['format'](_0x4498eb,_0x4a44e3,_0x2d09b4):'\x5cI[%1]\x5cC[%3]%2'['format'](_0x4498eb,_0x4a44e3,_0x2d09b4);},Window_InBattleStatusStates['prototype'][_0x46c6a8(0x102)]=function(){const _0x36feb6=_0x46c6a8;if(this[_0x36feb6(0x1f3)][_0x36feb6(0x50d)]>0x0)return;const _0x906bd2=Window_InBattleStatusStates[_0x36feb6(0x671)],_0x38ad67=_0x906bd2[_0x36feb6(0x9d8)],_0x1173f=_0x906bd2['normalText'],_0x39bf0b=_0x36feb6(0x772)['format'](_0x38ad67,_0x1173f);this['addCommand'](_0x39bf0b,_0x36feb6(0x60e));},Window_InBattleStatusStates[_0x46c6a8(0x669)][_0x46c6a8(0xbfc)]=function(_0x368d50){const _0x5c569e=_0x46c6a8,_0x507361=this['itemLineRect'](_0x368d50);this['changePaintOpacity'](0xff),this['drawTextEx'](this[_0x5c569e(0x7ca)](_0x368d50),_0x507361['x'],_0x507361['y']),this['drawTurnsRemaining'](_0x368d50,_0x507361);},Window_InBattleStatusStates['prototype'][_0x46c6a8(0xb4f)]=function(_0x415420,_0x52967c){const _0xf67717=_0x46c6a8;if(!Imported[_0xf67717(0xabd)])return;const _0x38aad3=this[_0xf67717(0x8ed)](_0x415420),_0xdeb26c=_0x52967c['x']+0x2;if(_0x38aad3==='state'){const _0x13d5b0=$dataStates[this[_0xf67717(0x1f3)][_0x415420][_0xf67717(0x8eb)]||0x0];this['drawActorStateTurns'](this[_0xf67717(0xa4d)],_0x13d5b0,_0xdeb26c,_0x52967c['y']),this['drawActorStateData'](this[_0xf67717(0xa4d)],_0x13d5b0,_0xdeb26c,_0x52967c['y']);}else{if(_0x38aad3==='buff'){const _0xec3dd4=this[_0xf67717(0x1f3)][_0x415420][_0xf67717(0x8eb)];this[_0xf67717(0x4db)](this[_0xf67717(0xa4d)],_0xec3dd4,_0xdeb26c,_0x52967c['y']),this[_0xf67717(0x711)](this[_0xf67717(0xa4d)],_0xec3dd4,_0xdeb26c,_0x52967c['y']);}}},Window_InBattleStatusStates[_0x46c6a8(0x669)]['updateHelp']=function(){const _0x447ce8=_0x46c6a8,_0xa3d8f1=this[_0x447ce8(0x763)]();let _0x4c8e30='';if(_0xa3d8f1===_0x447ce8(0x4bc))_0x4c8e30=this['_battler'][_0x447ce8(0x7f6)]()['description'];else{if(_0xa3d8f1===_0x447ce8(0x381))_0x4c8e30=this[_0x447ce8(0x346)]();else{if(_0xa3d8f1===_0x447ce8(0x907))_0x4c8e30=this[_0x447ce8(0x951)]();else _0xa3d8f1==='normal'&&(_0x4c8e30=Window_InBattleStatusStates[_0x447ce8(0x671)][_0x447ce8(0x5b7)]);}}_0x4c8e30?this[_0x447ce8(0xbc0)][_0x447ce8(0xb7d)](_0x4c8e30):this['_helpWindow'][_0x447ce8(0x518)]();},Window_InBattleStatusStates[_0x46c6a8(0x669)]['makeStateHelpText']=function(){const _0x3a3725=_0x46c6a8,_0x152fd4=Window_InBattleStatusStates[_0x3a3725(0x671)],_0x3cae71=this[_0x3a3725(0x1cb)]();let _0x2f3aee='';const _0xa55deb=$dataStates[_0x3cae71]||null;if(_0xa55deb){const _0x44d0b9=_0x152fd4[_0x3a3725(0xbeb)];let _0x249114=_0xa55deb[_0x3a3725(0x70f)]||_0xa55deb[_0x3a3725(0x56a)]||'';Imported['VisuMZ_1_SkillsStatesCore']&&(_0x249114=_0x249114[_0x3a3725(0x1ba)](this[_0x3a3725(0xa4d)][_0x3a3725(0x6c6)](_0x3cae71)));let _0x39eee0=_0x3a3725(0x7f3);if(this[_0x3a3725(0xa4d)][_0x3a3725(0x2c5)](_0x3cae71)){if(_0xa55deb['autoRemovalTiming']===0x0)_0x39eee0='none';if(_0xa55deb[_0x3a3725(0x74b)]===0x1)_0x39eee0='actions';if(_0xa55deb[_0x3a3725(0x74b)]===0x2)_0x39eee0=_0x3a3725(0x83a);}const _0x5d8687=this['_battler'][_0x3a3725(0xa6c)][_0x3cae71]||0x0;let _0x13ce46=_0x3a3725(0x848);Imported[_0x3a3725(0xabd)]&&Imported[_0x3a3725(0x33d)]&&(_0x13ce46=ColorManager[_0x3a3725(0x8e1)](_0xa55deb),_0x13ce46[_0x3a3725(0x712)](/#(.*?)/gi)?_0x13ce46='\x5cHEXCOLOR<%1>'[_0x3a3725(0x1ba)](_0x13ce46):_0x13ce46=_0x3a3725(0x40c)[_0x3a3725(0x1ba)](_0x13ce46)),_0x2f3aee=_0x44d0b9[_0x3a3725(0x1ba)](_0x249114,this[_0x3a3725(0x6b1)](_0x39eee0,_0x5d8687,_0x13ce46));}return _0x2f3aee;},Window_InBattleStatusStates[_0x46c6a8(0x669)]['makeBuffHelpText']=function(){const _0xbeb9bf=_0x46c6a8,_0x91842b=Window_InBattleStatusStates[_0xbeb9bf(0x671)],_0x254889=this[_0xbeb9bf(0x1cb)]();let _0x35585e='';const _0x1e03d6=this[_0xbeb9bf(0xa4d)][_0xbeb9bf(0x5a1)](_0x254889),_0x526c7c=_0x1e03d6?_0xbeb9bf(0xc58):_0xbeb9bf(0x51e),_0x39b11e=_0x91842b[_0x526c7c];let _0x45151f=_0xbeb9bf(0x848);Imported[_0xbeb9bf(0xabd)]&&Imported[_0xbeb9bf(0x33d)]&&(_0x45151f=_0x1e03d6?ColorManager[_0xbeb9bf(0x8fb)]():ColorManager['debuffColor'](),_0x45151f[_0xbeb9bf(0x712)](/#(.*?)/gi)?_0x45151f=_0xbeb9bf(0x1f9)[_0xbeb9bf(0x1ba)](_0x45151f):_0x45151f='\x5cC[%1]'['format'](_0x45151f));const _0x3ff9b9=this[_0xbeb9bf(0xa4d)][_0xbeb9bf(0x6f5)][_0x254889]||0x0;return _0x35585e=_0x39b11e[_0xbeb9bf(0x1ba)](TextManager[_0xbeb9bf(0x4c3)](_0x254889),Math[_0xbeb9bf(0x2f2)](this[_0xbeb9bf(0xa4d)][_0xbeb9bf(0x4a8)](_0x254889)*0x64)+'%',_0x45151f,this[_0xbeb9bf(0x6b1)](_0xbeb9bf(0x83a),_0x3ff9b9,_0x45151f)),_0x35585e;},Window_InBattleStatusStates['prototype'][_0x46c6a8(0x6b1)]=function(_0x4ab99d,_0x28119b,_0x90490a){const _0x43db4e=_0x46c6a8,_0x233ad0=Window_InBattleStatusStates[_0x43db4e(0x671)];let _0x451398=_0x233ad0[_0x43db4e(0x9ef)];if(_0x4ab99d===_0x43db4e(0x991))_0x451398=_0x233ad0['actionsFmt'];if(_0x4ab99d===_0x43db4e(0x83a))_0x451398=_0x233ad0['turnsFmt'];if(_0x4ab99d===_0x43db4e(0x82d))return'';return _0x451398[_0x43db4e(0x1ba)](_0x28119b,_0x90490a);};